{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS, WalletInitializationError, log, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { BaseSolanaAdapter } from '@web3auth/base-solana-adapter';\nimport { PhantomInjectedProvider } from '@web3auth/solana-provider';\nfunction poll(callback, interval, count) {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done) poll(callback, interval, count - 1).then(res => {\n          resolve(res);\n          return res;\n        }).catch(err => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\nconst detectProvider = async function () {\n  var _window$solana;\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    interval: 1000,\n    count: 3\n  };\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!((_window$solana = window.solana) !== null && _window$solana !== void 0 && _window$solana.isPhantom);\n  if (isPhantomAvailable) {\n    return window.solana;\n  }\n  const isAvailable = await poll(() => {\n    var _window$solana2;\n    return (_window$solana2 = window.solana) === null || _window$solana2 === void 0 ? void 0 : _window$solana2.isPhantom;\n  }, options.interval, options.count);\n  if (isAvailable) return window.solana;\n  return null;\n};\nclass PhantomAdapter extends BaseSolanaAdapter {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.PHANTOM);\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n    _defineProperty(this, \"_wallet\", null);\n    _defineProperty(this, \"phantomProvider\", null);\n    _defineProperty(this, \"_onDisconnect\", () => {\n      if (this._wallet) {\n        this._wallet.off(\"disconnect\", this._onDisconnect);\n        this.rehydrated = false;\n        // ready to be connected again only if it was previously connected and not cleaned up\n        this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n        this.emit(ADAPTER_EVENTS.DISCONNECTED);\n      }\n    });\n  }\n  get isWalletConnected() {\n    var _this$_wallet;\n    return !!((_this$_wallet = this._wallet) !== null && _this$_wallet !== void 0 && _this$_wallet.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n  get provider() {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.phantomProvider) {\n      return this.phantomProvider.provider;\n    }\n    return null;\n  }\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n  async init() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this._wallet = await detectProvider({\n      interval: 500,\n      count: 3\n    });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n    try {\n      log.debug(\"initializing phantom adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n  async connect() {\n    var _this = this;\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, {\n        adapter: WALLET_ADAPTERS.PHANTOM\n      });\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet);\n              resolve(this.provider);\n            };\n            if (!this._wallet) {\n              reject(WalletInitializationError.notInstalled());\n              return;\n            }\n            this._wallet.once(\"connect\", connect);\n            // Raise an issue on phantom that if window is closed, disconnect event is not fired\n            this._wallet._handleDisconnect = function () {\n              reject(WalletInitializationError.windowClosed());\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n              return handleDisconnect.apply(_this._wallet, args);\n            };\n            this._wallet.connect().catch(reason => {\n              reject(reason);\n            });\n          });\n        } catch (error) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError(error === null || error === void 0 ? void 0 : error.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    await super.disconnectSession();\n    try {\n      var _this$_wallet2;\n      await ((_this$_wallet2 = this._wallet) === null || _this$_wallet2 === void 0 ? void 0 : _this$_wallet2.disconnect());\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      await super.disconnect();\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError(error === null || error === void 0 ? void 0 : error.message));\n    }\n  }\n  async getUserInfo() {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n  async addChain(chainConfig) {\n    var _this$phantomProvider;\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkAddChainRequirements(chainConfig, init);\n    (_this$phantomProvider = this.phantomProvider) === null || _this$phantomProvider === void 0 ? void 0 : _this$phantomProvider.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n  async switchChain(params) {\n    var _this$phantomProvider2;\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkSwitchChainRequirements(params, init);\n    await ((_this$phantomProvider2 = this.phantomProvider) === null || _this$phantomProvider2 === void 0 ? void 0 : _this$phantomProvider2.switchChain(params));\n    this.setAdapterSettings({\n      chainConfig: this.getChainConfig(params.chainId)\n    });\n  }\n  async connectWithProvider(injectedProvider) {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, {\n      adapter: WALLET_ADAPTERS.PHANTOM,\n      reconnected: this.rehydrated\n    });\n    return this.provider;\n  }\n}\nexport { PhantomAdapter };","map":{"version":3,"names":["poll","callback","interval","count","Promise","resolve","reject","setTimeout","done","then","res","catch","err","detectProvider","_window$solana","options","arguments","length","undefined","isPhantomAvailable","window","solana","isPhantom","isAvailable","_window$solana2","PhantomAdapter","BaseSolanaAdapter","constructor","_defineProperty","WALLET_ADAPTERS","PHANTOM","ADAPTER_NAMESPACES","SOLANA","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","_wallet","off","_onDisconnect","rehydrated","status","CONNECTED","READY","emit","ADAPTER_EVENTS","DISCONNECTED","isWalletConnected","_this$_wallet","isConnected","provider","phantomProvider","_","Error","init","checkInitializationRequirements","WalletInitializationError","notInstalled","PhantomInjectedProvider","config","chainConfig","log","debug","autoConnect","connect","error","_this","checkConnectionRequirements","CONNECTING","adapter","handleDisconnect","_handleDisconnect","connectWithProvider","once","windowClosed","_len","args","Array","_key","apply","reason","Web3AuthError","WalletLoginError","connectionError","message","publicKey","on","ERRORED","disconnect","cleanup","disconnectSession","_this$_wallet2","disconnectionError","getUserInfo","notConnectedError","addChain","_this$phantomProvider","checkAddChainRequirements","addChainConfig","switchChain","params","_this$phantomProvider2","checkSwitchChainRequirements","setAdapterSettings","getChainConfig","chainId","injectedProvider","setupProvider","reconnected"],"sources":["/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@web3auth/phantom-adapter/src/utils.ts","/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@web3auth/phantom-adapter/src/phantomAdapter.ts"],"sourcesContent":["import type { IPhantomWalletProvider } from \"@web3auth/solana-provider\";\n\nexport function poll(callback: () => boolean | Promise<boolean>, interval: number, count: number): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done)\n          poll(callback, interval, count - 1)\n            .then((res) => {\n              resolve(res);\n              return res;\n            })\n            .catch((err) => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nexport const detectProvider = async (\n  options: { interval: number; count: number } = { interval: 1000, count: 3 }\n): Promise<IPhantomWalletProvider | null> => {\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!(window as any).solana?.isPhantom;\n  if (isPhantomAvailable) {\n    return (window as any).solana;\n  }\n  const isAvailable = await poll(() => (window as any).solana?.isPhantom, options.interval, options.count);\n  if (isAvailable) return (window as any).solana;\n  return null;\n};\n","import {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { IPhantomWalletProvider, PhantomInjectedProvider } from \"@web3auth/solana-provider\";\n\nimport { detectProvider } from \"./utils\";\nexport type PhantomAdapterOptions = BaseAdapterSettings;\n\nexport class PhantomAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.PHANTOM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public _wallet: IPhantomWalletProvider | null = null;\n\n  private phantomProvider: PhantomInjectedProvider | null = null;\n\n  get isWalletConnected(): boolean {\n    return !!(this._wallet?.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.phantomProvider) {\n      return this.phantomProvider.provider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this._wallet = await detectProvider({ interval: 500, count: 3 });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig } });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      log.debug(\"initializing phantom adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.PHANTOM });\n\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise<SafeEventEmitterProvider | null>((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet as IPhantomWalletProvider);\n              resolve(this.provider);\n            };\n            if (!this._wallet) {\n              reject(WalletInitializationError.notInstalled());\n              return;\n            }\n            this._wallet.once(\"connect\", connect);\n            // Raise an issue on phantom that if window is closed, disconnect event is not fired\n            (this._wallet as IPhantomWalletProvider)._handleDisconnect = (...args: unknown[]) => {\n              reject(WalletInitializationError.windowClosed());\n              return handleDisconnect.apply(this._wallet, args);\n            };\n\n            this._wallet.connect().catch((reason: unknown) => {\n              reject(reason);\n            });\n          });\n        } catch (error: unknown) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError((error as Error)?.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error: unknown) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    try {\n      await this._wallet?.disconnect();\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      await super.disconnect();\n    } catch (error: unknown) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError((error as Error)?.message));\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(chainConfig, init);\n    this.phantomProvider?.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    await this.phantomProvider?.switchChain(params);\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n\n  private async connectWithProvider(injectedProvider: IPhantomWalletProvider): Promise<SafeEventEmitterProvider | null> {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.PHANTOM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    return this.provider;\n  }\n\n  private _onDisconnect = () => {\n    if (this._wallet) {\n      this._wallet.off(\"disconnect\", this._onDisconnect);\n      this.rehydrated = false;\n      // ready to be connected again only if it was previously connected and not cleaned up\n      this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}