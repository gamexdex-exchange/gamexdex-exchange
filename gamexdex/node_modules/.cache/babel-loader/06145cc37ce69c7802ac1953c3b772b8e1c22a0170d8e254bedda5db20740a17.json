{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});","map":{"version":3,"names":[],"sources":["/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@ethereumjs/common/src/types.ts"],"sourcesContent":["import type { Chain, ConsensusAlgorithm, ConsensusType, Hardfork } from './enums'\n\nexport interface ChainName {\n  [chainId: string]: string\n}\nexport interface ChainsConfig {\n  [key: string]: ChainConfig | ChainName\n}\n\nexport type CliqueConfig = {\n  period: number\n  epoch: number\n}\n\nexport type EthashConfig = {}\n\nexport type CasperConfig = {}\nexport interface ChainConfig {\n  name: string\n  chainId: number | bigint\n  networkId: number | bigint\n  defaultHardfork?: string\n  comment?: string\n  url?: string\n  genesis: GenesisBlockConfig\n  hardforks: HardforkConfig[]\n  bootstrapNodes: BootstrapNodeConfig[]\n  dnsNetworks?: string[]\n  consensus: {\n    type: ConsensusType | string\n    algorithm: ConsensusAlgorithm | string\n    clique?: CliqueConfig\n    ethash?: EthashConfig\n    casper?: CasperConfig\n  }\n}\n\nexport interface GenesisBlockConfig {\n  timestamp?: string\n  gasLimit: number\n  difficulty: number\n  nonce: string\n  extraData: string\n  baseFeePerGas?: string\n}\n\nexport interface HardforkConfig {\n  name: Hardfork | string\n  block: number | null // null is used for hardforks that should not be applied -- since `undefined` isn't a valid value in JSON\n  ttd?: bigint | string\n  timestamp?: number | string\n  forkHash?: string | null\n}\n\nexport interface BootstrapNodeConfig {\n  ip: string\n  port: number | string\n  network?: string\n  chainId?: number\n  id: string\n  location: string\n  comment: string\n}\n\ninterface BaseOpts {\n  /**\n   * String identifier ('byzantium') for hardfork or {@link Hardfork} enum.\n   *\n   * Default: Hardfork.London\n   */\n  hardfork?: string | Hardfork\n  /**\n   * Selected EIPs which can be activated, please use an array for instantiation\n   * (e.g. `eips: [ 2537, ]`)\n   *\n   * Currently supported:\n   *\n   * - [EIP-2537](https://eips.ethereum.org/EIPS/eip-2537) - BLS12-381 precompiles\n   */\n  eips?: number[]\n}\n\n/**\n * Options for instantiating a {@link Common} instance.\n */\nexport interface CommonOpts extends BaseOpts {\n  /**\n   * Chain name ('mainnet'), id (1), or {@link Chain} enum,\n   * either from a chain directly supported or a custom chain\n   * passed in via {@link CommonOpts.customChains}.\n   */\n  chain: string | number | Chain | bigint | object\n  /**\n   * Initialize (in addition to the supported chains) with the selected\n   * custom chains. Custom genesis state should be passed to the Blockchain class if used.\n   *\n   * Usage (directly with the respective chain initialization via the {@link CommonOpts.chain} option):\n   *\n   * ```javascript\n   * import myCustomChain1 from '[PATH_TO_MY_CHAINS]/myCustomChain1.json'\n   * const common = new Common({ chain: 'myCustomChain1', customChains: [ myCustomChain1 ]})\n   * ```\n   */\n  customChains?: ChainConfig[]\n}\n\n/**\n * Options to be used with the {@link Common.custom} static constructor.\n */\nexport interface CustomCommonOpts extends BaseOpts {\n  /**\n   * The name (`mainnet`), id (`1`), or {@link Chain} enum of\n   * a standard chain used to base the custom chain params on.\n   */\n  baseChain?: string | number | Chain | bigint\n}\n\nexport interface GethConfigOpts extends BaseOpts {\n  chain?: string\n  genesisHash?: Buffer\n  mergeForkIdPostMerge?: boolean\n}\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}