{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/torus-embed';\nimport { WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, log, ADAPTER_EVENTS, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { BaseEvmAdapter } from '@web3auth/base-evm-adapter';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nclass TorusWalletAdapter extends BaseEvmAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(params);\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_EVM);\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n    _defineProperty(this, \"torusInstance\", null);\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n    _defineProperty(this, \"initParams\", void 0);\n    _defineProperty(this, \"loginSettings\", {});\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n  }\n  get provider() {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.torusInstance) {\n      return this.torusInstance.provider;\n    }\n    return null;\n  }\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n  async init() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    await super.init(options);\n    super.checkInitializationRequirements();\n    const {\n      chainId,\n      blockExplorer,\n      displayName,\n      rpcTarget,\n      ticker,\n      tickerName\n    } = this.chainConfig;\n    const network = {\n      chainId: Number.parseInt(chainId, 16),\n      host: rpcTarget,\n      blockExplorer,\n      networkName: displayName,\n      ticker,\n      tickerName\n      // decimals: decimals || 18,\n    };\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus evm adapter init\");\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_EVM);\n    try {\n      log.debug(\"initializing torus evm adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with torus evm provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_EVM\n    });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      const {\n        chainId\n      } = this.torusInstance.provider;\n      if (chainId && parseInt(chainId) !== parseInt(this.chainConfig.chainId, 16)) {\n        const {\n          chainId: _chainId,\n          blockExplorer,\n          displayName,\n          rpcTarget,\n          ticker,\n          tickerName\n        } = this.chainConfig;\n        const network = {\n          chainId: Number.parseInt(_chainId, 16),\n          host: rpcTarget,\n          blockExplorer,\n          networkName: displayName,\n          tickerName,\n          ticker\n        };\n        // in some cases when user manually switches chain and relogin then adapter will not connect to initially passed\n        // chainConfig but will connect to the one that user switched to.\n        // So here trying to switch network to the one that was initially passed in chainConfig.\n        await this.torusInstance.setProvider(_objectSpread({}, network));\n        const updatedChainID = await this.torusInstance.ethereum.request({\n          method: \"eth_chainId\"\n        });\n        if (updatedChainID && parseInt(updatedChainID) !== parseInt(this.chainConfig.chainId, 16)) {\n          throw WalletInitializationError.fromCode(5000, `Not connected to correct chainId. Expected: ${this.chainConfig.chainId}, Current: ${updatedChainID}`);\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_EVM,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_STATUS.ERRORED, error);\n      throw error instanceof Web3AuthError ? error : WalletLoginError.connectionError(\"Failed to login with torus wallet\");\n    }\n  }\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    await super.disconnectSession();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    this.torusInstance.hideTorusButton();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo(\"\");\n    return userInfo;\n  }\n  async addChain(chainConfig) {\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkAddChainRequirements(chainConfig, init);\n    // TODO: add these in torus wallet.\n    // await this.torusInstance?.provider.request({\n    //   method: \"wallet_addEthereumChain\",\n    //   params: [\n    //     {\n    //       chainId: chainConfig.chainId,\n    //       chainName: chainConfig.displayName,\n    //       rpcUrls: [chainConfig.rpcTarget],\n    //       blockExplorerUrls: [chainConfig.blockExplorer],\n    //       nativeCurrency: {\n    //         name: chainConfig.tickerName,\n    //         symbol: chainConfig.ticker,\n    //         decimals: chainConfig.decimals || 18,\n    //       },\n    //     },\n    //   ],\n    // });\n    this.addChainConfig(chainConfig);\n  }\n  async switchChain(params) {\n    var _this$torusInstance;\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkSwitchChainRequirements(params, init);\n    // TODO: add these in torus wallet.\n    // await this.torusInstance?.provider.request({\n    //   method: \"wallet_switchEthereumChain\",\n    //   params: [{ chainId: params.chainId }],\n    // });\n    const chainConfig = this.getChainConfig(params.chainId);\n    await ((_this$torusInstance = this.torusInstance) === null || _this$torusInstance === void 0 ? void 0 : _this$torusInstance.setProvider({\n      host: chainConfig.rpcTarget,\n      chainId: parseInt(chainConfig.chainId, 16),\n      networkName: chainConfig.displayName,\n      blockExplorer: chainConfig.blockExplorer,\n      ticker: chainConfig.ticker,\n      tickerName: chainConfig.tickerName\n    }));\n    this.setAdapterSettings({\n      chainConfig: this.getChainConfig(params.chainId)\n    });\n  }\n}\nexport { TorusWalletAdapter };","map":{"version":3,"names":["TorusWalletAdapter","BaseEvmAdapter","constructor","params","arguments","length","undefined","_defineProperty","WALLET_ADAPTERS","TORUS_EVM","ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","torusWalletOptions","adapterSettings","initParams","loginSettings","provider","status","torusInstance","_","Error","init","options","checkInitializationRequirements","chainId","blockExplorer","displayName","rpcTarget","ticker","tickerName","chainConfig","network","Number","parseInt","host","networkName","Torus","log","debug","_objectSpread","showTorusButton","READY","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","error","ERRORED","checkConnectionRequirements","WalletInitializationError","notReady","CONNECTING","adapter","login","_chainId","setProvider","updatedChainID","ethereum","request","method","fromCode","CONNECTED","reconnected","Web3AuthError","WalletLoginError","connectionError","disconnect","cleanup","disconnectSession","logout","hideTorusButton","getUserInfo","notConnectedError","userInfo","addChain","checkAddChainRequirements","addChainConfig","switchChain","_this$torusInstance","checkSwitchChainRequirements","getChainConfig","setAdapterSettings"],"sources":["/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@web3auth/torus-evm-adapter/src/torusWalletAdapter.ts"],"sourcesContent":["import Torus, { LoginParams, NetworkInterface, TorusCtorArgs, TorusParams } from \"@toruslabs/torus-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\nexport interface TorusWalletOptions extends BaseAdapterSettings {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: LoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n}\n\nexport class TorusWalletAdapter extends BaseEvmAdapter<never> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_EVM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: LoginParams = {};\n\n  constructor(params: TorusWalletOptions = {}) {\n    super(params);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.torusInstance) {\n      return this.torusInstance.provider as unknown as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n\n    const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n    const network: NetworkInterface = {\n      chainId: Number.parseInt(chainId, 16),\n      host: rpcTarget,\n      blockExplorer,\n      networkName: displayName,\n      ticker,\n      tickerName,\n      // decimals: decimals || 18,\n    };\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus evm adapter init\");\n    await this.torusInstance.init({\n      showTorusButton: false,\n      ...this.initParams,\n      network,\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_EVM);\n\n    try {\n      log.debug(\"initializing torus evm adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with torus evm provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_EVM });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      const { chainId } = this.torusInstance.provider;\n      if (chainId && parseInt(chainId) !== parseInt((this.chainConfig as CustomChainConfig).chainId, 16)) {\n        const { chainId: _chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n        const network: NetworkInterface = {\n          chainId: Number.parseInt(_chainId, 16),\n          host: rpcTarget,\n          blockExplorer,\n          networkName: displayName,\n          tickerName,\n          ticker,\n        };\n        // in some cases when user manually switches chain and relogin then adapter will not connect to initially passed\n        // chainConfig but will connect to the one that user switched to.\n        // So here trying to switch network to the one that was initially passed in chainConfig.\n        await this.torusInstance.setProvider({\n          ...network,\n        });\n        const updatedChainID = await this.torusInstance.ethereum.request<string>({ method: \"eth_chainId\" });\n        if (updatedChainID && parseInt(updatedChainID) !== parseInt((this.chainConfig as CustomChainConfig).chainId, 16)) {\n          throw WalletInitializationError.fromCode(\n            5000,\n            `Not connected to correct chainId. Expected: ${(this.chainConfig as CustomChainConfig).chainId}, Current: ${updatedChainID}`\n          );\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_EVM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_STATUS.ERRORED, error);\n      throw error instanceof Web3AuthError ? error : WalletLoginError.connectionError(\"Failed to login with torus wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    this.torusInstance.hideTorusButton();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo(\"\");\n    return userInfo;\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(chainConfig, init);\n    // TODO: add these in torus wallet.\n    // await this.torusInstance?.provider.request({\n    //   method: \"wallet_addEthereumChain\",\n    //   params: [\n    //     {\n    //       chainId: chainConfig.chainId,\n    //       chainName: chainConfig.displayName,\n    //       rpcUrls: [chainConfig.rpcTarget],\n    //       blockExplorerUrls: [chainConfig.blockExplorer],\n    //       nativeCurrency: {\n    //         name: chainConfig.tickerName,\n    //         symbol: chainConfig.ticker,\n    //         decimals: chainConfig.decimals || 18,\n    //       },\n    //     },\n    //   ],\n    // });\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    // TODO: add these in torus wallet.\n    // await this.torusInstance?.provider.request({\n    //   method: \"wallet_switchEthereumChain\",\n    //   params: [{ chainId: params.chainId }],\n    // });\n    const chainConfig = this.getChainConfig(params.chainId) as CustomChainConfig;\n    await this.torusInstance?.setProvider({\n      host: chainConfig.rpcTarget,\n      chainId: parseInt(chainConfig.chainId, 16),\n      networkName: chainConfig.displayName,\n      blockExplorer: chainConfig.blockExplorer,\n      ticker: chainConfig.ticker,\n      tickerName: chainConfig.tickerName,\n    });\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}