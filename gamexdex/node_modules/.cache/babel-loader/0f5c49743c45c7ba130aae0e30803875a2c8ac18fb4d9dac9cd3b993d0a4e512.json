{"ast":null,"code":"\"use strict\";\n\n/* eslint jsdoc/require-description: 0 */\n/* eslint jsdoc/require-returns: 0 */\n/* eslint jsdoc/match-description: 0 */\n/* eslint jsdoc/require-param-description: 0 */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rawEncode = exports.parseNumber = exports.solidityPack = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst ethjs_util_1 = require(\"ethjs-util\");\nconst utils_1 = require(\"./utils\");\n//\n// Methods borrowed and somewhat adapted from ethereumjs-abi@0.6.8:\n// https://npmfs.com/package/ethereumjs-abi/0.6.8/lib/index.js\n//\n/**\n * Packs non-standard encoded values packed according to their respective type in types in a buffer.\n *\n * @param types - Array of types of each value to encode.\n * @param values - Array of values to encode.\n * @returns A buffer containing the packed values.\n */\nfunction solidityPack(types, values) {\n  if (types.length !== values.length) {\n    throw new Error('Number of types are not matching the values');\n  }\n  const ret = [];\n  for (let i = 0; i < types.length; i++) {\n    const type = elementaryName(types[i]);\n    const value = values[i];\n    ret.push(solidityHexValue(type, value, null));\n  }\n  return Buffer.concat(ret);\n}\nexports.solidityPack = solidityPack;\n/**\n * Checks if a value is an array (represented as a string).\n *\n * @param type - The value to check whether it is an array.\n * @returns A boolean indicating whether the passed value is an array.\n */\nfunction isArray(type) {\n  return type.endsWith(']');\n}\n/**\n * Parse array type for packing solidity values.\n *\n * @param type - A string that may be an array to parse.\n * @returns A parsed value from the array.\n */\nfunction parseTypeArray(type) {\n  const tmp = type.match(/(.*)\\[(.*?)\\]$/u);\n  if (tmp) {\n    return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10);\n  }\n  return null;\n}\n/**\n * Parse N from type<N>.\n *\n * @param type - Value to parse.\n * @returns Parsed value.\n */\nfunction parseTypeN(type) {\n  const match = /^\\D+(\\d+)$/u.exec(type);\n  if (match === null) {\n    throw new Error(`Invalid parseTypeN input \"${type}\".`);\n  }\n  return parseInt(match[1], 10);\n}\n/**\n * Parse a number for determining a solidity hexvalue.\n *\n * @param arg - Number to parse.\n * @returns Parsed value.\n */\nfunction parseNumber(arg) {\n  const type = typeof arg;\n  if (type === 'string') {\n    if ((0, util_1.isHexPrefixed)(arg)) {\n      return new bn_js_1.default((0, ethjs_util_1.stripHexPrefix)(arg), 16);\n    }\n    return new bn_js_1.default(arg, 10);\n  } else if (type === 'number') {\n    return new bn_js_1.default(arg);\n  } else if (arg && Object.prototype.hasOwnProperty.call(arg, 'toArray') || bn_js_1.default.isBN(arg)) {\n    return arg;\n  }\n  throw new Error('Argument is not a number');\n}\nexports.parseNumber = parseNumber;\n/**\n * Get solidity hex value from type, value and bitsize inputs for packing these values in a buffer.\n *\n * @param type - The type of the value to encode.\n * @param value - The value to encode.\n * @param bitsize - The bitsize of the value to encode.\n * @returns The encoded soldity hex value.\n */\nfunction solidityHexValue(type, value, bitsize) {\n  // pass in bitsize = null if use default bitsize\n  if (isArray(type)) {\n    const subType = type.replace(/\\[.*?\\]/u, '');\n    if (!isArray(subType)) {\n      const arraySize = parseTypeArray(type);\n      if (arraySize !== 'dynamic' && arraySize !== 0 && arraySize !== null && value.length > arraySize) {\n        throw new Error(`Elements exceed array size: ${arraySize}`);\n      }\n    }\n    const arrayValues = value.map(v => solidityHexValue(subType, v, 256));\n    return Buffer.concat(arrayValues);\n  } else if (type === 'bytes') {\n    return value;\n  } else if (type === 'string') {\n    return Buffer.from(value, 'utf8');\n  } else if (type === 'bool') {\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    bitsize = bitsize || 8;\n    const padding = Array(bitsize / 4).join('0');\n    return Buffer.from(value ? `${padding}1` : `${padding}0`, 'hex');\n  } else if (type === 'address') {\n    let bytesize = 20;\n    if (bitsize) {\n      bytesize = bitsize / 8;\n    }\n    return (0, util_1.setLengthLeft)((0, util_1.toBuffer)(value), bytesize);\n  } else if (type.startsWith('bytes')) {\n    const size = parseTypeN(type);\n    if (size < 1 || size > 32) {\n      throw new Error(`Invalid bytes<N> width: ${size}`);\n    }\n    if (typeof value === 'number') {\n      value = (0, utils_1.normalize)(value);\n    }\n    return (0, util_1.setLengthRight)((0, util_1.toBuffer)(value), size);\n  } else if (type.startsWith('uint')) {\n    const size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid uint<N> width: ${size}`);\n    }\n    const num = parseNumber(value);\n    if (num.bitLength() > size) {\n      throw new Error(`Supplied uint exceeds width: ${size} vs ${num.bitLength()}`);\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    bitsize = bitsize || size;\n    return num.toArrayLike(Buffer, 'be', bitsize / 8);\n  } else if (type.startsWith('int')) {\n    const size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid int<N> width: ${size}`);\n    }\n    const num = parseNumber(value);\n    if (num.bitLength() > size) {\n      throw new Error(`Supplied int exceeds width: ${size} vs ${num.bitLength()}`);\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    bitsize = bitsize || size;\n    return num.toTwos(size).toArrayLike(Buffer, 'be', bitsize / 8);\n  }\n  // FIXME: support all other types\n  throw new Error(`Unsupported or invalid type: ${JSON.stringify(type)}`);\n}\n/**\n * Gets the correct solidity type name.\n *\n * @param name - The type name for which we want the corresponding solidity type name.\n * @returns The solidity type name for the input value.\n */\nfunction elementaryName(name) {\n  if (name.startsWith('int[')) {\n    return `int256${name.slice(3)}`;\n  } else if (name === 'int') {\n    return 'int256';\n  } else if (name.startsWith('uint[')) {\n    return `uint256${name.slice(4)}`;\n  } else if (name === 'uint') {\n    return 'uint256';\n  } else if (name.startsWith('fixed[')) {\n    return `fixed128x128${name.slice(5)}`;\n  } else if (name === 'fixed') {\n    return 'fixed128x128';\n  } else if (name.startsWith('ufixed[')) {\n    return `ufixed128x128${name.slice(6)}`;\n  } else if (name === 'ufixed') {\n    return 'ufixed128x128';\n  }\n  return name;\n}\n/**\n * @param types\n * @param values\n */\nfunction rawEncode(types, values) {\n  const output = [];\n  const data = [];\n  let headLength = 0;\n  types.forEach(type => {\n    if (isArray(type)) {\n      const size = parseTypeArray(type);\n      // eslint-disable-next-line no-negated-condition\n      if (size !== 'dynamic' && size !== null) {\n        headLength += 32 * size;\n      } else {\n        headLength += 32;\n      }\n    } else {\n      headLength += 32;\n    }\n  });\n  for (let i = 0; i < types.length; i++) {\n    const type = elementaryName(types[i]);\n    const value = values[i];\n    const cur = encodeSingle(type, value);\n    // Use the head/tail method for storing dynamic data\n    if (isDynamic(type)) {\n      output.push(encodeSingle('uint256', headLength));\n      data.push(cur);\n      headLength += cur.length;\n    } else {\n      output.push(cur);\n    }\n  }\n  return Buffer.concat(output.concat(data));\n}\nexports.rawEncode = rawEncode;\n// Encodes a single item (can be dynamic array)\n// @returns: Buffer\n/**\n * @param type\n * @param arg\n */\nfunction encodeSingle(type, arg) {\n  if (type === 'address') {\n    return encodeSingle('uint160', parseNumber(arg));\n  } else if (type === 'bool') {\n    return encodeSingle('uint8', arg ? 1 : 0);\n  } else if (type === 'string') {\n    return encodeSingle('bytes', Buffer.from(arg, 'utf8'));\n  } else if (isArray(type)) {\n    // this part handles fixed-length ([2]) and variable length ([]) arrays\n    // NOTE: we catch here all calls to arrays, that simplifies the rest\n    if (typeof arg.length === 'undefined') {\n      throw new Error('Not an array?');\n    }\n    const size = parseTypeArray(type);\n    if (size !== 'dynamic' && size !== 0 && size !== null && arg.length > size) {\n      throw new Error(`Elements exceed array size: ${size}`);\n    }\n    const ret = [];\n    type = type.slice(0, type.lastIndexOf('['));\n    if (typeof arg === 'string') {\n      arg = JSON.parse(arg);\n    }\n    // TODO: if this is array, should do for-of\n    for (const i in arg) {\n      if (Object.prototype.hasOwnProperty.call(arg, i)) {\n        ret.push(encodeSingle(type, arg[i]));\n      }\n    }\n    if (size === 'dynamic') {\n      const length = encodeSingle('uint256', arg.length);\n      ret.unshift(length);\n    }\n    return Buffer.concat(ret);\n  } else if (type === 'bytes') {\n    arg = Buffer.from(arg);\n    let ret = Buffer.concat([encodeSingle('uint256', arg.length), arg]);\n    if (arg.length % 32 !== 0) {\n      ret = Buffer.concat([ret, (0, util_1.zeros)(32 - arg.length % 32)]);\n    }\n    return ret;\n  } else if (type.startsWith('bytes')) {\n    const size = parseTypeN(type);\n    if (size < 1 || size > 32) {\n      throw new Error(`Invalid bytes<N> width: ${size}`);\n    }\n    // TODO: fix types here\n    const nArg = typeof arg === 'number' ? (0, utils_1.normalize)(arg) : arg;\n    return (0, util_1.setLengthRight)((0, util_1.toBuffer)(nArg), 32);\n  } else if (type.startsWith('uint')) {\n    const size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid uint<N> width: ${size}`);\n    }\n    const num = parseNumber(arg);\n    if (num.bitLength() > size) {\n      throw new Error(`Supplied uint exceeds width: ${size} vs ${num.bitLength()}`);\n    }\n    if (num.isNeg()) {\n      throw new Error('Supplied uint is negative');\n    }\n    return num.toArrayLike(Buffer, 'be', 32);\n  } else if (type.startsWith('int')) {\n    const size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid int<N> width: ${size}`);\n    }\n    const num = parseNumber(arg);\n    if (num.bitLength() > size) {\n      throw new Error(`Supplied int exceeds width: ${size} vs ${num.bitLength()}`);\n    }\n    return num.toTwos(256).toArrayLike(Buffer, 'be', 32);\n  } else if (type.startsWith('ufixed')) {\n    const size = parseTypeNxM(type);\n    const num = parseNumber(arg);\n    if (num.isNeg()) {\n      throw new Error('Supplied ufixed is negative');\n    }\n    return encodeSingle('uint256', num.mul(new bn_js_1.default(2).pow(new bn_js_1.default(size[1]))));\n  } else if (type.startsWith('fixed')) {\n    const size = parseTypeNxM(type);\n    return encodeSingle('int256', parseNumber(arg).mul(new bn_js_1.default(2).pow(new bn_js_1.default(size[1]))));\n  }\n  throw new Error(`Unsupported or invalid type: ${JSON.stringify(type)}`);\n}\n// Is a type dynamic?\n/**\n * @param type\n */\nfunction isDynamic(type) {\n  // FIXME: handle all types? I don't think anything is missing now\n  return type === 'string' || type === 'bytes' || parseTypeArray(type) === 'dynamic';\n}\n// Parse N,M from type<N>x<M>\n/**\n * @param type\n */\nfunction parseTypeNxM(type) {\n  const match = /^\\D+(\\d+)x(\\d+)$/u.exec(type);\n  if (match === null || match.length < 1) {\n    throw new Error(`Invalid parseTypeNxM input \"${type}\".`);\n  }\n  return [parseInt(match[1], 10), parseInt(match[2], 10)];\n}","map":{"version":3,"names":["util_1","require","bn_js_1","__importDefault","ethjs_util_1","utils_1","solidityPack","types","values","length","Error","ret","i","type","elementaryName","value","push","solidityHexValue","Buffer","concat","exports","isArray","endsWith","parseTypeArray","tmp","match","parseInt","parseTypeN","exec","parseNumber","arg","isHexPrefixed","default","stripHexPrefix","Object","prototype","hasOwnProperty","call","isBN","bitsize","subType","replace","arraySize","arrayValues","map","v","from","padding","Array","join","bytesize","setLengthLeft","toBuffer","startsWith","size","normalize","setLengthRight","num","bitLength","toArrayLike","toTwos","JSON","stringify","name","slice","rawEncode","output","data","headLength","forEach","cur","encodeSingle","isDynamic","lastIndexOf","parse","unshift","zeros","nArg","isNeg","parseTypeNxM","mul","pow"],"sources":["/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@metamask/eth-sig-util/src/ethereumjs-abi-utils.ts"],"sourcesContent":["/* eslint jsdoc/require-description: 0 */\n/* eslint jsdoc/require-returns: 0 */\n/* eslint jsdoc/match-description: 0 */\n/* eslint jsdoc/require-param-description: 0 */\n\nimport {\n  ToBufferInputTypes,\n  toBuffer,\n  setLengthRight,\n  setLengthLeft,\n  isHexPrefixed,\n  zeros,\n} from '@ethereumjs/util';\nimport BN from 'bn.js';\nimport { stripHexPrefix } from 'ethjs-util';\n\nimport { normalize } from './utils';\n\n//\n// Methods borrowed and somewhat adapted from ethereumjs-abi@0.6.8:\n// https://npmfs.com/package/ethereumjs-abi/0.6.8/lib/index.js\n//\n\n/**\n * Packs non-standard encoded values packed according to their respective type in types in a buffer.\n *\n * @param types - Array of types of each value to encode.\n * @param values - Array of values to encode.\n * @returns A buffer containing the packed values.\n */\nexport function solidityPack(types: string[], values: any[]): Buffer {\n  if (types.length !== values.length) {\n    throw new Error('Number of types are not matching the values');\n  }\n\n  const ret: Buffer[] = [];\n\n  for (let i = 0; i < types.length; i++) {\n    const type = elementaryName(types[i]);\n    const value = values[i];\n    ret.push(solidityHexValue(type, value, null));\n  }\n\n  return Buffer.concat(ret);\n}\n\n/**\n * Checks if a value is an array (represented as a string).\n *\n * @param type - The value to check whether it is an array.\n * @returns A boolean indicating whether the passed value is an array.\n */\nfunction isArray(type: string): boolean {\n  return type.endsWith(']');\n}\n\n/**\n * Parse array type for packing solidity values.\n *\n * @param type - A string that may be an array to parse.\n * @returns A parsed value from the array.\n */\nfunction parseTypeArray(type: string): 'dynamic' | number | null {\n  const tmp = type.match(/(.*)\\[(.*?)\\]$/u);\n  if (tmp) {\n    return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10);\n  }\n  return null;\n}\n\n/**\n * Parse N from type<N>.\n *\n * @param type - Value to parse.\n * @returns Parsed value.\n */\nfunction parseTypeN(type: string): number {\n  const match = /^\\D+(\\d+)$/u.exec(type);\n  if (match === null) {\n    throw new Error(`Invalid parseTypeN input \"${type}\".`);\n  }\n  return parseInt(match[1], 10);\n}\n\n/**\n * Parse a number for determining a solidity hexvalue.\n *\n * @param arg - Number to parse.\n * @returns Parsed value.\n */\nexport function parseNumber(arg: string | number | BN): BN {\n  const type = typeof arg;\n  if (type === 'string') {\n    if (isHexPrefixed(arg as string)) {\n      return new BN(stripHexPrefix(arg), 16);\n    }\n    return new BN(arg, 10);\n  } else if (type === 'number') {\n    return new BN(arg);\n  } else if (\n    (arg && Object.prototype.hasOwnProperty.call(arg, 'toArray')) ||\n    BN.isBN(arg)\n  ) {\n    return arg as BN;\n  }\n  throw new Error('Argument is not a number');\n}\n\n/**\n * Get solidity hex value from type, value and bitsize inputs for packing these values in a buffer.\n *\n * @param type - The type of the value to encode.\n * @param value - The value to encode.\n * @param bitsize - The bitsize of the value to encode.\n * @returns The encoded soldity hex value.\n */\nfunction solidityHexValue(\n  type: string,\n  value: ToBufferInputTypes,\n  bitsize: number | null,\n): Buffer {\n  // pass in bitsize = null if use default bitsize\n  if (isArray(type)) {\n    const subType = type.replace(/\\[.*?\\]/u, '');\n    if (!isArray(subType)) {\n      const arraySize = parseTypeArray(type);\n      if (\n        arraySize !== 'dynamic' &&\n        arraySize !== 0 &&\n        arraySize !== null &&\n        (value as any[]).length > arraySize\n      ) {\n        throw new Error(`Elements exceed array size: ${arraySize}`);\n      }\n    }\n    const arrayValues = (value as number[]).map((v) =>\n      solidityHexValue(subType, v, 256),\n    );\n    return Buffer.concat(arrayValues);\n  } else if (type === 'bytes') {\n    return value as Buffer;\n  } else if (type === 'string') {\n    return Buffer.from(value as string, 'utf8');\n  } else if (type === 'bool') {\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    bitsize = bitsize || 8;\n    const padding = Array(bitsize / 4).join('0');\n    return Buffer.from(value ? `${padding}1` : `${padding}0`, 'hex');\n  } else if (type === 'address') {\n    let bytesize = 20;\n    if (bitsize) {\n      bytesize = bitsize / 8;\n    }\n    return setLengthLeft(toBuffer(value), bytesize);\n  } else if (type.startsWith('bytes')) {\n    const size = parseTypeN(type);\n    if (size < 1 || size > 32) {\n      throw new Error(`Invalid bytes<N> width: ${size}`);\n    }\n\n    if (typeof value === 'number') {\n      value = normalize(value);\n    }\n    return setLengthRight(toBuffer(value), size);\n  } else if (type.startsWith('uint')) {\n    const size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid uint<N> width: ${size}`);\n    }\n\n    const num = parseNumber(value as number);\n    if (num.bitLength() > size) {\n      throw new Error(\n        `Supplied uint exceeds width: ${size} vs ${num.bitLength()}`,\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    bitsize = bitsize || size;\n    return num.toArrayLike(Buffer, 'be', bitsize / 8);\n  } else if (type.startsWith('int')) {\n    const size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid int<N> width: ${size}`);\n    }\n\n    const num = parseNumber(value as number);\n    if (num.bitLength() > size) {\n      throw new Error(\n        `Supplied int exceeds width: ${size} vs ${num.bitLength()}`,\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    bitsize = bitsize || size;\n    return num.toTwos(size).toArrayLike(Buffer, 'be', bitsize / 8);\n  }\n  // FIXME: support all other types\n  throw new Error(`Unsupported or invalid type: ${JSON.stringify(type)}`);\n}\n\n/**\n * Gets the correct solidity type name.\n *\n * @param name - The type name for which we want the corresponding solidity type name.\n * @returns The solidity type name for the input value.\n */\nfunction elementaryName(name: string): string {\n  if (name.startsWith('int[')) {\n    return `int256${name.slice(3)}`;\n  } else if (name === 'int') {\n    return 'int256';\n  } else if (name.startsWith('uint[')) {\n    return `uint256${name.slice(4)}`;\n  } else if (name === 'uint') {\n    return 'uint256';\n  } else if (name.startsWith('fixed[')) {\n    return `fixed128x128${name.slice(5)}`;\n  } else if (name === 'fixed') {\n    return 'fixed128x128';\n  } else if (name.startsWith('ufixed[')) {\n    return `ufixed128x128${name.slice(6)}`;\n  } else if (name === 'ufixed') {\n    return 'ufixed128x128';\n  }\n  return name;\n}\n\n/**\n * @param types\n * @param values\n */\nexport function rawEncode(\n  types: string[],\n  values: (BN | Buffer | string | number | string[] | number[])[],\n): Buffer {\n  const output: Buffer[] = [];\n  const data: Buffer[] = [];\n\n  let headLength = 0;\n\n  types.forEach((type) => {\n    if (isArray(type)) {\n      const size: number | 'dynamic' | null = parseTypeArray(type);\n      // eslint-disable-next-line no-negated-condition\n      if (size !== 'dynamic' && size !== null) {\n        headLength += 32 * size;\n      } else {\n        headLength += 32;\n      }\n    } else {\n      headLength += 32;\n    }\n  });\n\n  for (let i = 0; i < types.length; i++) {\n    const type = elementaryName(types[i]);\n    const value = values[i];\n    const cur = encodeSingle(type, value);\n\n    // Use the head/tail method for storing dynamic data\n    if (isDynamic(type)) {\n      output.push(encodeSingle('uint256', headLength));\n      data.push(cur);\n      headLength += cur.length;\n    } else {\n      output.push(cur);\n    }\n  }\n\n  return Buffer.concat(output.concat(data));\n}\n\n// Encodes a single item (can be dynamic array)\n// @returns: Buffer\n/**\n * @param type\n * @param arg\n */\nfunction encodeSingle(\n  type: string,\n  arg: BN | Buffer | string | number | string[] | number[],\n): Buffer {\n  if (type === 'address') {\n    return encodeSingle('uint160', parseNumber(arg as string));\n  } else if (type === 'bool') {\n    return encodeSingle('uint8', arg ? 1 : 0);\n  } else if (type === 'string') {\n    return encodeSingle('bytes', Buffer.from(arg as string, 'utf8'));\n  } else if (isArray(type)) {\n    // this part handles fixed-length ([2]) and variable length ([]) arrays\n    // NOTE: we catch here all calls to arrays, that simplifies the rest\n    if (typeof (arg as any).length === 'undefined') {\n      throw new Error('Not an array?');\n    }\n    const size = parseTypeArray(type);\n    if (\n      size !== 'dynamic' &&\n      size !== 0 &&\n      size !== null &&\n      (arg as any).length > size\n    ) {\n      throw new Error(`Elements exceed array size: ${size}`);\n    }\n    const ret: Buffer[] = [];\n    type = type.slice(0, type.lastIndexOf('['));\n    if (typeof arg === 'string') {\n      arg = JSON.parse(arg);\n    }\n\n    // TODO: if this is array, should do for-of\n    for (const i in arg as Record<string, any>) {\n      if (Object.prototype.hasOwnProperty.call(arg, i)) {\n        ret.push(encodeSingle(type, arg[i]));\n      }\n    }\n\n    if (size === 'dynamic') {\n      const length = encodeSingle('uint256', (arg as any).length);\n      ret.unshift(length);\n    }\n    return Buffer.concat(ret);\n  } else if (type === 'bytes') {\n    arg = Buffer.from(arg as Buffer);\n\n    let ret = Buffer.concat([encodeSingle('uint256', arg.length), arg]);\n\n    if (arg.length % 32 !== 0) {\n      ret = Buffer.concat([ret, zeros(32 - (arg.length % 32))]);\n    }\n\n    return ret;\n  } else if (type.startsWith('bytes')) {\n    const size = parseTypeN(type);\n    if (size < 1 || size > 32) {\n      throw new Error(`Invalid bytes<N> width: ${size}`);\n    }\n\n    // TODO: fix types here\n    const nArg = typeof arg === 'number' ? normalize(arg) : arg;\n    return setLengthRight(toBuffer(nArg as string), 32);\n  } else if (type.startsWith('uint')) {\n    const size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid uint<N> width: ${size}`);\n    }\n\n    const num = parseNumber(arg as string);\n    if (num.bitLength() > size) {\n      throw new Error(\n        `Supplied uint exceeds width: ${size} vs ${num.bitLength()}`,\n      );\n    }\n\n    if (num.isNeg()) {\n      throw new Error('Supplied uint is negative');\n    }\n\n    return num.toArrayLike(Buffer, 'be', 32);\n  } else if (type.startsWith('int')) {\n    const size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid int<N> width: ${size}`);\n    }\n\n    const num = parseNumber(arg as string);\n    if (num.bitLength() > size) {\n      throw new Error(\n        `Supplied int exceeds width: ${size} vs ${num.bitLength()}`,\n      );\n    }\n\n    return num.toTwos(256).toArrayLike(Buffer, 'be', 32);\n  } else if (type.startsWith('ufixed')) {\n    const size = parseTypeNxM(type);\n\n    const num = parseNumber(arg as string);\n\n    if (num.isNeg()) {\n      throw new Error('Supplied ufixed is negative');\n    }\n\n    return encodeSingle('uint256', num.mul(new BN(2).pow(new BN(size[1]))));\n  } else if (type.startsWith('fixed')) {\n    const size = parseTypeNxM(type);\n\n    return encodeSingle(\n      'int256',\n      parseNumber(arg as string).mul(new BN(2).pow(new BN(size[1]))),\n    );\n  }\n\n  throw new Error(`Unsupported or invalid type: ${JSON.stringify(type)}`);\n}\n\n// Is a type dynamic?\n/**\n * @param type\n */\nfunction isDynamic(type: string): boolean {\n  // FIXME: handle all types? I don't think anything is missing now\n  return (\n    type === 'string' || type === 'bytes' || parseTypeArray(type) === 'dynamic'\n  );\n}\n\n// Parse N,M from type<N>x<M>\n/**\n * @param type\n */\nfunction parseTypeNxM(type: string): [number, number] {\n  const match = /^\\D+(\\d+)x(\\d+)$/u.exec(type);\n  if (match === null || match.length < 1) {\n    throw new Error(`Invalid parseTypeNxM input \"${type}\".`);\n  }\n  return [parseInt(match[1], 10), parseInt(match[2], 10)];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}