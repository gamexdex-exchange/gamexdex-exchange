{"ast":null,"code":"import { BaseAdapter, getChainConfig, CHAIN_NAMESPACES, ADAPTER_STATUS, WalletLoginError, getSavedToken, checkIfTokenIsExpired, signChallenge, verifySignedChallenge, saveToken, clearToken, ADAPTER_EVENTS } from '@web3auth/base';\nclass BaseEvmAdapter extends BaseAdapter {\n  async init(_) {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n  }\n  async authenticateUser() {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n    const {\n      chainNamespace,\n      chainId\n    } = this.chainConfig;\n    const accounts = await this.provider.request({\n      method: \"eth_accounts\"\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0], this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return {\n            idToken: existingToken\n          };\n        }\n      }\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString()\n      };\n      const challenge = await signChallenge(payload, chainNamespace);\n      const signedMessage = await this.provider.request({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]]\n      });\n      const idToken = await verifySignedChallenge(chainNamespace, signedMessage, challenge, this.name, this.sessionTime, this.clientId, this.web3AuthNetwork);\n      saveToken(accounts[0], this.name, idToken);\n      return {\n        idToken\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n  async disconnectSession() {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request({\n      method: \"eth_accounts\"\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n  async disconnect() {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\nexport { BaseEvmAdapter };","map":{"version":3,"names":["BaseEvmAdapter","BaseAdapter","init","_","chainConfig","getChainConfig","CHAIN_NAMESPACES","EIP155","authenticateUser","provider","status","ADAPTER_STATUS","CONNECTED","WalletLoginError","notConnectedError","chainNamespace","chainId","accounts","request","method","length","existingToken","getSavedToken","name","isExpired","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","challenge","signChallenge","signedMessage","params","verifySignedChallenge","sessionTime","clientId","web3AuthNetwork","saveToken","disconnectSession","checkDisconnectionRequirements","clearToken","disconnect","rehydrated","emit","ADAPTER_EVENTS","DISCONNECTED"],"sources":["/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts"],"sourcesContent":["import {\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  AdapterInitOptions,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  checkIfTokenIsExpired,\n  clearToken,\n  getChainConfig,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  async init(_?: AdapterInitOptions): Promise<void> {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n    const { chainNamespace, chainId } = this.chainConfig;\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        signedMessage as string,\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId,\n        this.web3AuthNetwork\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnectSession(): Promise<void> {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n"],"mappings":";AAiBM,MAAgBA,cAAkB,SAAQC,WAAc;EAC5D,MAAMC,IAAIA,CAACC,CAAsB;IAC/B,IAAI,CAAC,IAAI,CAACC,WAAW,EAAE,IAAI,CAACA,WAAW,GAAGC,cAAc,CAACC,gBAAgB,CAACC,MAAM,EAAE,CAAC,CAAC;EACtF;EAEA,MAAMC,gBAAgBA,CAAA;IACpB,IAAI,CAAC,IAAI,CAACC,QAAQ,IAAI,IAAI,CAACC,MAAM,KAAKC,cAAc,CAACC,SAAS,EAAE,MAAMC,gBAAgB,CAACC,iBAAiB,EAAE;IAC1G,MAAM;MAAEC,cAAc;MAAEC;KAAS,GAAG,IAAI,CAACZ,WAAW;IACpD,MAAMa,QAAQ,GAAG,MAAM,IAAI,CAACR,QAAQ,CAACS,OAAO,CAAW;MACrDC,MAAM,EAAE;IACT,EAAC;IACF,IAAIF,QAAQ,IAAIA,QAAQ,CAACG,MAAM,GAAG,CAAC,EAAE;MACnC,MAAMC,aAAa,GAAGC,aAAa,CAACL,QAAQ,CAAC,CAAC,CAAW,EAAE,IAAI,CAACM,IAAI,CAAC;MACrE,IAAIF,aAAa,EAAE;QACjB,MAAMG,SAAS,GAAGC,qBAAqB,CAACJ,aAAa,CAAC;QACtD,IAAI,CAACG,SAAS,EAAE;UACd,OAAO;YAAEE,OAAO,EAAEL;WAAe;QAClC;MACF;MAED,MAAMM,OAAO,GAAG;QACdC,MAAM,EAAEC,MAAM,CAACC,QAAQ,CAACC,MAAM;QAC9BC,GAAG,EAAEH,MAAM,CAACC,QAAQ,CAACG,IAAI;QACzBC,OAAO,EAAEjB,QAAQ,CAAC,CAAC,CAAC;QACpBD,OAAO,EAAEmB,QAAQ,CAACnB,OAAO,EAAE,EAAE,CAAC;QAC9BoB,OAAO,EAAE,GAAG;QACZC,KAAK,EAAEC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;QAC1CC,QAAQ,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;OACjC;MAED,MAAMC,SAAS,GAAG,MAAMC,aAAa,CAACnB,OAAO,EAAEZ,cAAc,CAAC;MAE9D,MAAMgC,aAAa,GAAG,MAAM,IAAI,CAACtC,QAAQ,CAACS,OAAO,CAAS;QACxDC,MAAM,EAAE,eAAe;QACvB6B,MAAM,EAAE,CAACH,SAAS,EAAE5B,QAAQ,CAAC,CAAC,CAAC;MAChC,EAAC;MAEF,MAAMS,OAAO,GAAG,MAAMuB,qBAAqB,CACzClC,cAAc,EACdgC,aAAuB,EACvBF,SAAS,EACT,IAAI,CAACtB,IAAI,EACT,IAAI,CAAC2B,WAAW,EAChB,IAAI,CAACC,QAAQ,EACb,IAAI,CAACC,eAAe,CACrB;MACDC,SAAS,CAACpC,QAAQ,CAAC,CAAC,CAAW,EAAE,IAAI,CAACM,IAAI,EAAEG,OAAO,CAAC;MACpD,OAAO;QACLA;OACD;IACF;IACD,MAAMb,gBAAgB,CAACC,iBAAiB,CAAC,uDAAuD,CAAC;EACnG;EAEA,MAAMwC,iBAAiBA,CAAA;IACrB,KAAK,CAACC,8BAA8B,EAAE;IACtC,MAAMtC,QAAQ,GAAG,MAAM,IAAI,CAACR,QAAQ,CAACS,OAAO,CAAW;MACrDC,MAAM,EAAE;IACT,EAAC;IACF,IAAIF,QAAQ,IAAIA,QAAQ,CAACG,MAAM,GAAG,CAAC,EAAE;MACnCoC,UAAU,CAACvC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAACM,IAAI,CAAC;IACnC;EACH;EAEA,MAAMkC,UAAUA,CAAA;IACd,IAAI,CAACC,UAAU,GAAG,KAAK;IACvB,IAAI,CAACC,IAAI,CAACC,cAAc,CAACC,YAAY,CAAC;EACxC;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}