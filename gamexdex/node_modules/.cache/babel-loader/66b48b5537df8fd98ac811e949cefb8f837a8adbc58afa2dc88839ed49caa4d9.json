{"ast":null,"code":"import Web3 from \"web3\";\nexport default class EthereumRpc {\n  constructor(provider) {\n    this.provider = void 0;\n    this.provider = provider;\n  }\n  async getChainId() {\n    try {\n      const web3 = new Web3(this.provider);\n\n      // Get the connected Chain's ID\n      const chainId = await web3.eth.getChainId();\n      return chainId.toString();\n    } catch (error) {\n      return error;\n    }\n  }\n  async getAccounts() {\n    try {\n      const web3 = new Web3(this.provider);\n\n      // Get user's Ethereum public address\n      const address = (await web3.eth.getAccounts())[0];\n      return address;\n    } catch (error) {\n      return error;\n    }\n  }\n  async getBalance() {\n    try {\n      const web3 = new Web3(this.provider);\n\n      // Get user's Ethereum public address\n      const address = (await web3.eth.getAccounts())[0];\n\n      // Get user's balance in ether\n      const balance = web3.utils.fromWei(await web3.eth.getBalance(address) // Balance is in wei\n      );\n\n      return balance;\n    } catch (error) {\n      return error;\n    }\n  }\n  async sendTransaction() {\n    try {\n      const web3 = new Web3(this.provider);\n\n      // Get user's Ethereum public address\n      const fromAddress = (await web3.eth.getAccounts())[0];\n      const destination = fromAddress;\n      const amount = web3.utils.toWei(\"0.01\"); // Convert 1 ether to wei\n\n      // Submit transaction to the blockchain and wait for it to be mined\n      const receipt = await web3.eth.sendTransaction({\n        from: fromAddress,\n        to: destination,\n        value: amount,\n        maxPriorityFeePerGas: \"5000000000\",\n        // Max priority fee per gas\n        maxFeePerGas: \"6000000000000\" // Max fee per gas\n      });\n\n      return receipt;\n    } catch (error) {\n      return error;\n    }\n  }\n  async signMessage() {\n    try {\n      const web3 = new Web3(this.provider);\n\n      // Get user's Ethereum public address\n      const fromAddress = (await web3.eth.getAccounts())[0];\n      const originalMessage = \"YOUR_MESSAGE\";\n\n      // Sign the message\n      const signedMessage = await web3.eth.personal.sign(originalMessage, fromAddress, \"test password!\" // configure your own password here.\n      );\n\n      return signedMessage;\n    } catch (error) {\n      return error;\n    }\n  }\n  async getPrivateKey() {\n    try {\n      const privateKey = await this.provider.request({\n        method: \"eth_private_key\"\n      });\n      return privateKey;\n    } catch (error) {\n      return error;\n    }\n  }\n}","map":{"version":3,"names":["Web3","EthereumRpc","constructor","provider","getChainId","web3","chainId","eth","toString","error","getAccounts","address","getBalance","balance","utils","fromWei","sendTransaction","fromAddress","destination","amount","toWei","receipt","from","to","value","maxPriorityFeePerGas","maxFeePerGas","signMessage","originalMessage","signedMessage","personal","sign","getPrivateKey","privateKey","request","method"],"sources":["/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/web3-auth/gamexdex/src/web3RPC.ts"],"sourcesContent":["import type { SafeEventEmitterProvider } from \"@web3auth/base\";\nimport Web3 from \"web3\";\n\nexport default class EthereumRpc {\n  private provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  async getChainId(): Promise<string> {\n    try {\n      const web3 = new Web3(this.provider as any);\n\n      // Get the connected Chain's ID\n      const chainId = await web3.eth.getChainId();\n\n      return chainId.toString();\n    } catch (error) {\n      return error as string;\n    }\n  }\n\n  async getAccounts(): Promise<any> {\n    try {\n      const web3 = new Web3(this.provider as any);\n\n      // Get user's Ethereum public address\n      const address = (await web3.eth.getAccounts())[0];\n\n      return address;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async getBalance(): Promise<string> {\n    try {\n      const web3 = new Web3(this.provider as any);\n\n      // Get user's Ethereum public address\n      const address = (await web3.eth.getAccounts())[0];\n\n      // Get user's balance in ether\n      const balance = web3.utils.fromWei(\n        await web3.eth.getBalance(address) // Balance is in wei\n      );\n\n      return balance;\n    } catch (error) {\n      return error as string;\n    }\n  }\n\n  async sendTransaction(): Promise<any> {\n    try {\n      const web3 = new Web3(this.provider as any);\n\n      // Get user's Ethereum public address\n      const fromAddress = (await web3.eth.getAccounts())[0];\n\n      const destination = fromAddress;\n\n      const amount = web3.utils.toWei(\"0.01\"); // Convert 1 ether to wei\n\n      // Submit transaction to the blockchain and wait for it to be mined\n      const receipt = await web3.eth.sendTransaction({\n        from: fromAddress,\n        to: destination,\n        value: amount,\n        maxPriorityFeePerGas: \"5000000000\", // Max priority fee per gas\n        maxFeePerGas: \"6000000000000\", // Max fee per gas\n      });\n\n      return receipt;\n    } catch (error) {\n      return error as string;\n    }\n  }\n\n  async signMessage() {\n    try {\n      const web3 = new Web3(this.provider as any);\n\n      // Get user's Ethereum public address\n      const fromAddress = (await web3.eth.getAccounts())[0];\n\n      const originalMessage = \"YOUR_MESSAGE\";\n\n      // Sign the message\n      const signedMessage = await web3.eth.personal.sign(\n        originalMessage,\n        fromAddress,\n        \"test password!\" // configure your own password here.\n      );\n\n      return signedMessage;\n    } catch (error) {\n      return error as string;\n    }\n  }\n\n  async getPrivateKey(): Promise<any> {\n    try {\n      const privateKey = await this.provider.request({\n        method: \"eth_private_key\",\n      });\n\n      return privateKey;\n    } catch (error) {\n      return error as string;\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}