{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, log, WalletLoginError, Web3AuthError } from '@web3auth/base';\nimport { BaseEvmAdapter } from '@web3auth/base-evm-adapter';\nclass MetamaskAdapter extends BaseEvmAdapter {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.METAMASK);\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n    _defineProperty(this, \"metamaskProvider\", null);\n  }\n  get provider() {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n    return null;\n  }\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n  async init() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    const {\n      ethereum\n    } = window;\n    const isPhantom = Boolean(\"isPhantom\" in ethereum);\n    // check which is the active provider\n    if (ethereum && ethereum.isMetaMask && isPhantom) {\n      // this means phantom is the active provider.\n      if (ethereum.providers && ethereum.providers.length > 0) {\n        const provider = ethereum.providers.find(p => p.isMetaMask && !p.overrideIsMetaMask);\n        if (provider) {\n          ethereum.setProvider(provider);\n        }\n      }\n    } else if (ethereum && (ethereum.providers || []).length > 0) {\n      // this means that there are another providers than metamask (like coinbase).\n      const provider = ethereum.providers.find(p => p.isMetaMask);\n      if (provider) {\n        ethereum.setSelectedProvider(provider);\n      }\n    }\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.METAMASK\n    });\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n      if (chainId !== this.chainConfig.chainId) {\n        await this.addChain(this.chainConfig, true);\n        await this.switchChain(this.chainConfig, true);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      const disconnectHandler = () => {\n        var _this$provider;\n        // ready to be connected again\n        this.disconnect();\n        (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeListener(\"disconnect\", disconnectHandler);\n      };\n      this.provider.on(\"disconnect\", disconnectHandler);\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if (error instanceof Web3AuthError) throw error;\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n  async disconnect() {\n    var _this$provider2;\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    await super.disconnectSession();\n    (_this$provider2 = this.provider) === null || _this$provider2 === void 0 ? void 0 : _this$provider2.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n  async addChain(chainConfig) {\n    var _this$metamaskProvide;\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkAddChainRequirements(chainConfig, init);\n    await ((_this$metamaskProvide = this.metamaskProvider) === null || _this$metamaskProvide === void 0 ? void 0 : _this$metamaskProvide.request({\n      method: \"wallet_addEthereumChain\",\n      params: [{\n        chainId: chainConfig.chainId,\n        chainName: chainConfig.displayName,\n        rpcUrls: [chainConfig.rpcTarget],\n        blockExplorerUrls: [chainConfig.blockExplorer],\n        nativeCurrency: {\n          name: chainConfig.tickerName,\n          symbol: chainConfig.ticker,\n          decimals: chainConfig.decimals || 18\n        }\n      }]\n    }));\n    this.addChainConfig(chainConfig);\n  }\n  async switchChain(params) {\n    var _this$metamaskProvide2;\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkSwitchChainRequirements(params, init);\n    await ((_this$metamaskProvide2 = this.metamaskProvider) === null || _this$metamaskProvide2 === void 0 ? void 0 : _this$metamaskProvide2.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{\n        chainId: params.chainId\n      }]\n    }));\n    this.setAdapterSettings({\n      chainConfig: this.getChainConfig(params.chainId)\n    });\n  }\n}\nexport { MetamaskAdapter };","map":{"version":3,"names":["MetamaskAdapter","BaseEvmAdapter","constructor","arguments","_defineProperty","ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","WALLET_ADAPTERS","METAMASK","ADAPTER_STATUS","NOT_READY","provider","status","metamaskProvider","_","Error","init","options","length","undefined","checkInitializationRequirements","detectEthereumProvider","mustBeMetaMask","WalletInitializationError","notInstalled","READY","emit","ADAPTER_EVENTS","log","debug","autoConnect","rehydrated","connect","error","ERRORED","checkConnectionRequirements","WalletLoginError","notConnectedError","ethereum","window","isPhantom","Boolean","isMetaMask","providers","find","p","overrideIsMetaMask","setProvider","setSelectedProvider","CONNECTING","adapter","request","method","chainId","chainConfig","addChain","switchChain","CONNECTED","disconnectHandler","_this$provider","disconnect","removeListener","on","reconnected","Web3AuthError","connectionError","_this$provider2","cleanup","disconnectSession","removeAllListeners","getUserInfo","_this$metamaskProvide","checkAddChainRequirements","params","chainName","displayName","rpcUrls","rpcTarget","blockExplorerUrls","blockExplorer","nativeCurrency","name","tickerName","symbol","ticker","decimals","addChainConfig","_this$metamaskProvide2","checkSwitchChainRequirements","setAdapterSettings","getChainConfig"],"sources":["/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":["import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport type MetamaskAdapterOptions = BaseAdapterSettings;\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    const { ethereum } = window as any;\n    const isPhantom = Boolean(\"isPhantom\" in ethereum);\n    // check which is the active provider\n    if (ethereum && ethereum.isMetaMask && isPhantom) {\n      // this means phantom is the active provider.\n      if (ethereum.providers && ethereum.providers.length > 0) {\n        const provider = ethereum.providers.find((p: any) => p.isMetaMask && !p.overrideIsMetaMask);\n\n        if (provider) {\n          ethereum.setProvider(provider);\n        }\n      }\n    } else if (ethereum && (ethereum.providers || []).length > 0) {\n      // this means that there are another providers than metamask (like coinbase).\n      const provider = ethereum.providers.find((p: any) => p.isMetaMask);\n      if (provider) {\n        ethereum.setSelectedProvider(provider);\n      }\n    }\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.addChain(this.chainConfig as CustomChainConfig, true);\n        await this.switchChain(this.chainConfig as CustomChainConfig, true);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      const disconnectHandler = () => {\n        // ready to be connected again\n        this.disconnect();\n        this.provider?.removeListener(\"disconnect\", disconnectHandler);\n      };\n      this.provider.on(\"disconnect\", disconnectHandler);\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if (error instanceof Web3AuthError) throw error;\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(chainConfig, init);\n    await this.metamaskProvider?.request({\n      method: \"wallet_addEthereumChain\",\n      params: [\n        {\n          chainId: chainConfig.chainId,\n          chainName: chainConfig.displayName,\n          rpcUrls: [chainConfig.rpcTarget],\n          blockExplorerUrls: [chainConfig.blockExplorer],\n          nativeCurrency: {\n            name: chainConfig.tickerName,\n            symbol: chainConfig.ticker,\n            decimals: chainConfig.decimals || 18,\n          },\n        },\n      ],\n    });\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    await this.metamaskProvider?.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: params.chainId }],\n    });\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n}\n\nexport { MetamaskAdapter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}