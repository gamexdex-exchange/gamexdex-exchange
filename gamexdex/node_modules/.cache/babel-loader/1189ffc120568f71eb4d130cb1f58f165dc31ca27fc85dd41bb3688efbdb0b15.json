{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst baseTransaction_1 = require(\"./baseTransaction\");\nconst types_1 = require(\"./types\");\nconst TRANSACTION_TYPE = 0;\nfunction meetsEIP155(_v, chainId) {\n  const v = Number(_v);\n  const chainIdDoubled = Number(chainId) * 2;\n  return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nclass Transaction extends baseTransaction_1.BaseTransaction {\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  constructor(txData, opts = {}) {\n    super({\n      ...txData,\n      type: TRANSACTION_TYPE\n    }, opts);\n    this.common = this._validateTxV(this.v, opts.common);\n    this.gasPrice = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n    if (this.gasPrice * this.gasLimit > util_1.MAX_INTEGER) {\n      const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n      throw new Error(msg);\n    }\n    this._validateCannotExceedMaxInteger({\n      gasPrice: this.gasPrice\n    });\n    baseTransaction_1.BaseTransaction._validateNotArray(txData);\n    if (this.common.gteHardfork('spuriousDragon')) {\n      if (!this.isSigned()) {\n        this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        // v and chain ID meet EIP-155 conditions\n        if (meetsEIP155(this.v, this.common.chainId())) {\n          this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n        }\n      }\n    }\n    const freeze = opts?.freeze ?? true;\n    if (freeze) {\n      Object.freeze(this);\n    }\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n  static fromTxData(txData, opts = {}) {\n    return new Transaction(txData, opts);\n  }\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n  static fromSerializedTx(serialized, opts = {}) {\n    const values = (0, util_1.arrToBufArr)(rlp_1.RLP.decode(Uint8Array.from(serialized)));\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array');\n    }\n    return this.fromValuesArray(values, opts);\n  }\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n  static fromValuesArray(values, opts = {}) {\n    // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n    }\n    const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\n    (0, util_1.validateNoLeadingZeroes)({\n      nonce,\n      gasPrice,\n      gasLimit,\n      value,\n      v,\n      r,\n      s\n    });\n    return new Transaction({\n      nonce,\n      gasPrice,\n      gasLimit,\n      to,\n      value,\n      data,\n      v,\n      r,\n      s\n    }, opts);\n  }\n  /**\n   * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For legacy txs this is also the correct format to add transactions\n   * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n   * for typed txs).\n   *\n   * For an unsigned tx this method returns the empty Buffer values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n  raw() {\n    return [(0, util_1.bigIntToUnpaddedBuffer)(this.nonce), (0, util_1.bigIntToUnpaddedBuffer)(this.gasPrice), (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, util_1.bigIntToUnpaddedBuffer)(this.value), this.data, this.v !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.v) : Buffer.from([]), this.r !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.r) : Buffer.from([]), this.s !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.s) : Buffer.from([])];\n  }\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link Transaction.getMessageToSign}.\n   */\n  serialize() {\n    return Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw())));\n  }\n  _getMessageToSign() {\n    const values = [(0, util_1.bigIntToUnpaddedBuffer)(this.nonce), (0, util_1.bigIntToUnpaddedBuffer)(this.gasPrice), (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, util_1.bigIntToUnpaddedBuffer)(this.value), this.data];\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      values.push((0, util_1.bigIntToUnpaddedBuffer)(this.common.chainId()));\n      values.push((0, util_1.unpadBuffer)((0, util_1.toBuffer)(0)));\n      values.push((0, util_1.unpadBuffer)((0, util_1.toBuffer)(0)));\n    }\n    return values;\n  }\n  getMessageToSign(hashMessage = true) {\n    const message = this._getMessageToSign();\n    if (hashMessage) {\n      return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(message))));\n    } else {\n      return message;\n    }\n  }\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee() {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: super.getDataFee(),\n        hardfork: this.common.hardfork()\n      };\n    }\n    return super.getDataFee();\n  }\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  getUpfrontCost() {\n    return this.gasLimit * this.gasPrice + this.value;\n  }\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  hash() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n      throw new Error(msg);\n    }\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw()))));\n      }\n      return this.cache.hash;\n    }\n    return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw()))));\n  }\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  getMessageToVerifySignature() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('This transaction is not signed');\n      throw new Error(msg);\n    }\n    const message = this._getMessageToSign();\n    return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(message))));\n  }\n  /**\n   * Returns the public key of the sender\n   */\n  getSenderPublicKey() {\n    const msgHash = this.getMessageToVerifySignature();\n    const {\n      v,\n      r,\n      s\n    } = this;\n    this._validateHighS();\n    try {\n      return (0, util_1.ecrecover)(msgHash, v, (0, util_1.bigIntToUnpaddedBuffer)(r), (0, util_1.bigIntToUnpaddedBuffer)(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainId() : undefined);\n    } catch (e) {\n      const msg = this._errorMsg('Invalid Signature');\n      throw new Error(msg);\n    }\n  }\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n  _processSignature(v, r, s) {\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      v += this.common.chainId() * BigInt(2) + BigInt(8);\n    }\n    const opts = {\n      ...this.txOptions,\n      common: this.common\n    };\n    return Transaction.fromTxData({\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      v,\n      r: (0, util_1.bufferToBigInt)(r),\n      s: (0, util_1.bufferToBigInt)(s)\n    }, opts);\n  }\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n  toJSON() {\n    return {\n      nonce: (0, util_1.bigIntToHex)(this.nonce),\n      gasPrice: (0, util_1.bigIntToHex)(this.gasPrice),\n      gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: (0, util_1.bigIntToHex)(this.value),\n      data: '0x' + this.data.toString('hex'),\n      v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,\n      r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,\n      s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined\n    };\n  }\n  /**\n   * Validates tx's `v` value\n   */\n  _validateTxV(_v, common) {\n    let chainIdBigInt;\n    const v = _v !== undefined ? Number(_v) : undefined;\n    // Check for valid v values in the scope of a signed legacy tx\n    if (v !== undefined) {\n      // v is 1. not matching the EIP-155 chainId included case and...\n      // v is 2. not matching the classic v=27 or v=28 case\n      if (v < 37 && v !== 27 && v !== 28) {\n        throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);\n      }\n    }\n    // No unsigned tx and EIP-155 activated and chain ID included\n    if (v !== undefined && v !== 0 && (!common || common.gteHardfork('spuriousDragon')) && v !== 27 && v !== 28) {\n      if (common) {\n        if (!meetsEIP155(BigInt(v), common.chainId())) {\n          throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);\n        }\n      } else {\n        // Derive the original chain ID\n        let numSub;\n        if ((v - 35) % 2 === 0) {\n          numSub = 35;\n        } else {\n          numSub = 36;\n        }\n        // Use derived chain ID to create a proper Common\n        chainIdBigInt = BigInt(v - numSub) / BigInt(2);\n      }\n    }\n    return this._getCommon(common, chainIdBigInt);\n  }\n  /**\n   * Return a compact error string representation of the object\n   */\n  errorStr() {\n    let errorStr = this._getSharedErrorPostfix();\n    errorStr += ` gasPrice=${this.gasPrice}`;\n    return errorStr;\n  }\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  _errorMsg(msg) {\n    return `${msg} (${this.errorStr()})`;\n  }\n}\nexports.Transaction = Transaction;","map":{"version":3,"names":["rlp_1","require","util_1","keccak_1","baseTransaction_1","types_1","TRANSACTION_TYPE","meetsEIP155","_v","chainId","v","Number","chainIdDoubled","Transaction","BaseTransaction","constructor","txData","opts","type","common","_validateTxV","gasPrice","bufferToBigInt","toBuffer","gasLimit","MAX_INTEGER","msg","_errorMsg","Error","_validateCannotExceedMaxInteger","_validateNotArray","gteHardfork","isSigned","activeCapabilities","push","Capability","EIP155ReplayProtection","freeze","Object","fromTxData","fromSerializedTx","serialized","values","arrToBufArr","RLP","decode","Uint8Array","from","Array","isArray","fromValuesArray","length","nonce","to","value","data","r","s","validateNoLeadingZeroes","raw","bigIntToUnpaddedBuffer","undefined","buf","Buffer","serialize","encode","bufArrToArr","_getMessageToSign","supports","unpadBuffer","getMessageToSign","hashMessage","message","keccak256","getDataFee","cache","dataFee","hardfork","isFrozen","getUpfrontCost","hash","getMessageToVerifySignature","getSenderPublicKey","msgHash","_validateHighS","ecrecover","e","_processSignature","BigInt","txOptions","toJSON","bigIntToHex","toString","chainIdBigInt","numSub","_getCommon","errorStr","_getSharedErrorPostfix","exports"],"sources":["/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@ethereumjs/tx/src/legacyTransaction.ts"],"sourcesContent":["import { RLP } from '@ethereumjs/rlp'\nimport {\n  MAX_INTEGER,\n  arrToBufArr,\n  bigIntToHex,\n  bigIntToUnpaddedBuffer,\n  bufArrToArr,\n  bufferToBigInt,\n  ecrecover,\n  toBuffer,\n  unpadBuffer,\n  validateNoLeadingZeroes,\n} from '@ethereumjs/util'\nimport { keccak256 } from 'ethereum-cryptography/keccak'\n\nimport { BaseTransaction } from './baseTransaction'\nimport { Capability } from './types'\n\nimport type { JsonTx, TxData, TxOptions, TxValuesArray } from './types'\nimport type { Common } from '@ethereumjs/common'\n\nconst TRANSACTION_TYPE = 0\n\nfunction meetsEIP155(_v: bigint, chainId: bigint) {\n  const v = Number(_v)\n  const chainIdDoubled = Number(chainId) * 2\n  return v === chainIdDoubled + 35 || v === chainIdDoubled + 36\n}\n\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nexport class Transaction extends BaseTransaction<Transaction> {\n  public readonly gasPrice: bigint\n\n  public readonly common: Common\n\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n  public static fromTxData(txData: TxData, opts: TxOptions = {}) {\n    return new Transaction(txData, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n  public static fromSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    const values = arrToBufArr(RLP.decode(Uint8Array.from(serialized))) as Buffer[]\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array')\n    }\n\n    return this.fromValuesArray(values, opts)\n  }\n\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n  public static fromValuesArray(values: TxValuesArray, opts: TxOptions = {}) {\n    // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error(\n        'Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).'\n      )\n    }\n\n    const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values\n\n    validateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s })\n\n    return new Transaction(\n      {\n        nonce,\n        gasPrice,\n        gasLimit,\n        to,\n        value,\n        data,\n        v,\n        r,\n        s,\n      },\n      opts\n    )\n  }\n\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  public constructor(txData: TxData, opts: TxOptions = {}) {\n    super({ ...txData, type: TRANSACTION_TYPE }, opts)\n\n    this.common = this._validateTxV(this.v, opts.common)\n\n    this.gasPrice = bufferToBigInt(toBuffer(txData.gasPrice === '' ? '0x' : txData.gasPrice))\n\n    if (this.gasPrice * this.gasLimit > MAX_INTEGER) {\n      const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)')\n      throw new Error(msg)\n    }\n    this._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice })\n    BaseTransaction._validateNotArray(txData)\n\n    if (this.common.gteHardfork('spuriousDragon')) {\n      if (!this.isSigned()) {\n        this.activeCapabilities.push(Capability.EIP155ReplayProtection)\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        // v and chain ID meet EIP-155 conditions\n        if (meetsEIP155(this.v!, this.common.chainId())) {\n          this.activeCapabilities.push(Capability.EIP155ReplayProtection)\n        }\n      }\n    }\n\n    const freeze = opts?.freeze ?? true\n    if (freeze) {\n      Object.freeze(this)\n    }\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For legacy txs this is also the correct format to add transactions\n   * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n   * for typed txs).\n   *\n   * For an unsigned tx this method returns the empty Buffer values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n  raw(): TxValuesArray {\n    return [\n      bigIntToUnpaddedBuffer(this.nonce),\n      bigIntToUnpaddedBuffer(this.gasPrice),\n      bigIntToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bigIntToUnpaddedBuffer(this.value),\n      this.data,\n      this.v !== undefined ? bigIntToUnpaddedBuffer(this.v) : Buffer.from([]),\n      this.r !== undefined ? bigIntToUnpaddedBuffer(this.r) : Buffer.from([]),\n      this.s !== undefined ? bigIntToUnpaddedBuffer(this.s) : Buffer.from([]),\n    ]\n  }\n\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link Transaction.getMessageToSign}.\n   */\n  serialize(): Buffer {\n    return Buffer.from(RLP.encode(bufArrToArr(this.raw())))\n  }\n\n  private _getMessageToSign() {\n    const values = [\n      bigIntToUnpaddedBuffer(this.nonce),\n      bigIntToUnpaddedBuffer(this.gasPrice),\n      bigIntToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bigIntToUnpaddedBuffer(this.value),\n      this.data,\n    ]\n\n    if (this.supports(Capability.EIP155ReplayProtection)) {\n      values.push(bigIntToUnpaddedBuffer(this.common.chainId()))\n      values.push(unpadBuffer(toBuffer(0)))\n      values.push(unpadBuffer(toBuffer(0)))\n    }\n\n    return values\n  }\n\n  /**\n   * Returns the unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: the raw message message format for the legacy tx is not RLP encoded\n   * and you might need to do yourself with:\n   *\n   * ```javascript\n   * import { bufArrToArr } from '@ethereumjs/util'\n   * import { RLP } from '@ethereumjs/rlp'\n   * const message = tx.getMessageToSign(false)\n   * const serializedMessage = Buffer.from(RLP.encode(bufArrToArr(message))) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign(hashMessage: false): Buffer[]\n  getMessageToSign(hashMessage?: true): Buffer\n  getMessageToSign(hashMessage = true) {\n    const message = this._getMessageToSign()\n    if (hashMessage) {\n      return Buffer.from(keccak256(RLP.encode(bufArrToArr(message))))\n    } else {\n      return message\n    }\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): bigint {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value\n    }\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: super.getDataFee(),\n        hardfork: this.common.hardfork(),\n      }\n    }\n\n    return super.getDataFee()\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  getUpfrontCost(): bigint {\n    return this.gasLimit * this.gasPrice + this.value\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  hash(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = Buffer.from(keccak256(RLP.encode(bufArrToArr(this.raw()))))\n      }\n      return this.cache.hash\n    }\n\n    return Buffer.from(keccak256(RLP.encode(bufArrToArr(this.raw()))))\n  }\n\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  getMessageToVerifySignature() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('This transaction is not signed')\n      throw new Error(msg)\n    }\n    const message = this._getMessageToSign()\n    return Buffer.from(keccak256(RLP.encode(bufArrToArr(message))))\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  getSenderPublicKey(): Buffer {\n    const msgHash = this.getMessageToVerifySignature()\n\n    const { v, r, s } = this\n\n    this._validateHighS()\n\n    try {\n      return ecrecover(\n        msgHash,\n        v!,\n        bigIntToUnpaddedBuffer(r!),\n        bigIntToUnpaddedBuffer(s!),\n        this.supports(Capability.EIP155ReplayProtection) ? this.common.chainId() : undefined\n      )\n    } catch (e: any) {\n      const msg = this._errorMsg('Invalid Signature')\n      throw new Error(msg)\n    }\n  }\n\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n  protected _processSignature(v: bigint, r: Buffer, s: Buffer) {\n    if (this.supports(Capability.EIP155ReplayProtection)) {\n      v += this.common.chainId() * BigInt(2) + BigInt(8)\n    }\n\n    const opts = { ...this.txOptions, common: this.common }\n\n    return Transaction.fromTxData(\n      {\n        nonce: this.nonce,\n        gasPrice: this.gasPrice,\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.value,\n        data: this.data,\n        v,\n        r: bufferToBigInt(r),\n        s: bufferToBigInt(s),\n      },\n      opts\n    )\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n  toJSON(): JsonTx {\n    return {\n      nonce: bigIntToHex(this.nonce),\n      gasPrice: bigIntToHex(this.gasPrice),\n      gasLimit: bigIntToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bigIntToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      v: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n      r: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n      s: this.s !== undefined ? bigIntToHex(this.s) : undefined,\n    }\n  }\n\n  /**\n   * Validates tx's `v` value\n   */\n  private _validateTxV(_v?: bigint, common?: Common): Common {\n    let chainIdBigInt\n    const v = _v !== undefined ? Number(_v) : undefined\n    // Check for valid v values in the scope of a signed legacy tx\n    if (v !== undefined) {\n      // v is 1. not matching the EIP-155 chainId included case and...\n      // v is 2. not matching the classic v=27 or v=28 case\n      if (v < 37 && v !== 27 && v !== 28) {\n        throw new Error(\n          `Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`\n        )\n      }\n    }\n\n    // No unsigned tx and EIP-155 activated and chain ID included\n    if (\n      v !== undefined &&\n      v !== 0 &&\n      (!common || common.gteHardfork('spuriousDragon')) &&\n      v !== 27 &&\n      v !== 28\n    ) {\n      if (common) {\n        if (!meetsEIP155(BigInt(v), common.chainId())) {\n          throw new Error(\n            `Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`\n          )\n        }\n      } else {\n        // Derive the original chain ID\n        let numSub\n        if ((v - 35) % 2 === 0) {\n          numSub = 35\n        } else {\n          numSub = 36\n        }\n        // Use derived chain ID to create a proper Common\n        chainIdBigInt = BigInt(v - numSub) / BigInt(2)\n      }\n    }\n    return this._getCommon(common, chainIdBigInt)\n  }\n\n  /**\n   * Return a compact error string representation of the object\n   */\n  public errorStr() {\n    let errorStr = this._getSharedErrorPostfix()\n    errorStr += ` gasPrice=${this.gasPrice}`\n    return errorStr\n  }\n\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  protected _errorMsg(msg: string) {\n    return `${msg} (${this.errorStr()})`\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}