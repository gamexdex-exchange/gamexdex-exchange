{"ast":null,"code":"import { patch, put, post, get } from '@toruslabs/http-helpers';\nclass BaseSessionManager {\n  checkSessionParams(key) {\n    if (!key) throw new Error(\"Session key is required\");\n  }\n  /**\n   * Common handler method for making an http request.\n   *\n   * Note: Embed all the query parameters in the path itself.\n   */\n  request(_ref) {\n    let {\n      method = \"GET\",\n      url,\n      data = {},\n      headers = {}\n    } = _ref;\n    const options = {\n      headers\n    };\n    switch (method) {\n      case \"GET\":\n        return get(url, options);\n      case \"POST\":\n        return post(url, data, options);\n      case \"PUT\":\n        return put(url, data, options);\n      case \"PATCH\":\n        return patch(url, data, options);\n    }\n    throw new Error(\"Invalid method type\");\n  }\n}\nexport { BaseSessionManager };","map":{"version":3,"names":["BaseSessionManager","checkSessionParams","key","Error","request","_ref","method","url","data","headers","options","get","post","put","patch"],"sources":["/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@toruslabs/base-session-manager/src/baseSessionManager.ts"],"sourcesContent":["import { get, patch, post, put } from \"@toruslabs/http-helpers\";\n\nimport { ApiRequestParams, ISessionManager } from \"./interfaces\";\n\nexport abstract class BaseSessionManager<TSessionData> implements ISessionManager<TSessionData> {\n  abstract sessionKey: string;\n\n  checkSessionParams(key: string) {\n    if (!key) throw new Error(\"Session key is required\");\n  }\n\n  /**\n   * Common handler method for making an http request.\n   *\n   * Note: Embed all the query parameters in the path itself.\n   */\n  protected request<T>({ method = \"GET\", url, data = {}, headers = {} }: ApiRequestParams): Promise<T> {\n    const options = { headers };\n\n    switch (method) {\n      case \"GET\":\n        return get<T>(url, options);\n      case \"POST\":\n        return post<T>(url, data, options);\n      case \"PUT\":\n        return put<T>(url, data, options);\n      case \"PATCH\":\n        return patch<T>(url, data, options);\n    }\n\n    throw new Error(\"Invalid method type\");\n  }\n\n  abstract createSession(data: TSessionData): Promise<string>;\n\n  abstract authorizeSession(): Promise<TSessionData>;\n\n  abstract updateSession(data: Partial<TSessionData>): Promise<void>;\n\n  abstract invalidateSession(): Promise<boolean>;\n}\n"],"mappings":";MAIsBA,kBAAkB;EAGtCC,kBAAkBA,CAACC,GAAW;IAC5B,IAAI,CAACA,GAAG,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EACtD;EAEA;;;;AAIG;EACOC,OAAOA,CAAAC,IAAA,EAAsE;IAAA,IAAlE;MAAEC,MAAM,GAAG,KAAK;MAAEC,GAAG;MAAEC,IAAI,GAAG,EAAE;MAAEC,OAAO,GAAG;IAAsB,IAAAJ,IAAA;IACrF,MAAMK,OAAO,GAAG;MAAED;KAAS;IAE3B,QAAQH,MAAM;MACZ,KAAK,KAAK;QACR,OAAOK,GAAG,CAAIJ,GAAG,EAAEG,OAAO,CAAC;MAC7B,KAAK,MAAM;QACT,OAAOE,IAAI,CAAIL,GAAG,EAAEC,IAAI,EAAEE,OAAO,CAAC;MACpC,KAAK,KAAK;QACR,OAAOG,GAAG,CAAIN,GAAG,EAAEC,IAAI,EAAEE,OAAO,CAAC;MACnC,KAAK,OAAO;QACV,OAAOI,KAAK,CAAIP,GAAG,EAAEC,IAAI,EAAEE,OAAO,CAAC;IACtC;IAED,MAAM,IAAIP,KAAK,CAAC,qBAAqB,CAAC;EACxC;AASD"},"metadata":{},"sourceType":"module","externalDependencies":[]}