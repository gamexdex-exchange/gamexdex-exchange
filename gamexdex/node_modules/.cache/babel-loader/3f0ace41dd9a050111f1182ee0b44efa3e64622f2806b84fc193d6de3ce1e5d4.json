{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccessLists = exports.checkMaxInitCodeSize = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst types_1 = require(\"./types\");\nfunction checkMaxInitCodeSize(common, length) {\n  const maxInitCodeSize = common.param('vm', 'maxInitCodeSize');\n  if (maxInitCodeSize && BigInt(length) > maxInitCodeSize) {\n    throw new Error(`the initcode size of this transaction is too large: it is ${length} while the max is ${common.param('vm', 'maxInitCodeSize')}`);\n  }\n}\nexports.checkMaxInitCodeSize = checkMaxInitCodeSize;\nclass AccessLists {\n  static getAccessListData(accessList) {\n    let AccessListJSON;\n    let bufferAccessList;\n    if ((0, types_1.isAccessList)(accessList)) {\n      AccessListJSON = accessList;\n      const newAccessList = [];\n      for (let i = 0; i < accessList.length; i++) {\n        const item = accessList[i];\n        const addressBuffer = (0, util_1.toBuffer)(item.address);\n        const storageItems = [];\n        for (let index = 0; index < item.storageKeys.length; index++) {\n          storageItems.push((0, util_1.toBuffer)(item.storageKeys[index]));\n        }\n        newAccessList.push([addressBuffer, storageItems]);\n      }\n      bufferAccessList = newAccessList;\n    } else {\n      bufferAccessList = accessList ?? [];\n      // build the JSON\n      const json = [];\n      for (let i = 0; i < bufferAccessList.length; i++) {\n        const data = bufferAccessList[i];\n        const address = (0, util_1.bufferToHex)(data[0]);\n        const storageKeys = [];\n        for (let item = 0; item < data[1].length; item++) {\n          storageKeys.push((0, util_1.bufferToHex)(data[1][item]));\n        }\n        const jsonItem = {\n          address,\n          storageKeys\n        };\n        json.push(jsonItem);\n      }\n      AccessListJSON = json;\n    }\n    return {\n      AccessListJSON,\n      accessList: bufferAccessList\n    };\n  }\n  static verifyAccessList(accessList) {\n    for (let key = 0; key < accessList.length; key++) {\n      const accessListItem = accessList[key];\n      const address = accessListItem[0];\n      const storageSlots = accessListItem[1];\n      if (accessListItem[2] !== undefined) {\n        throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');\n      }\n      if (address.length !== 20) {\n        throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\n      }\n      for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n        if (storageSlots[storageSlot].length !== 32) {\n          throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');\n        }\n      }\n    }\n  }\n  static getAccessListJSON(accessList) {\n    const accessListJSON = [];\n    for (let index = 0; index < accessList.length; index++) {\n      const item = accessList[index];\n      const JSONItem = {\n        address: '0x' + (0, util_1.setLengthLeft)(item[0], 20).toString('hex'),\n        storageKeys: []\n      };\n      const storageSlots = item[1];\n      for (let slot = 0; slot < storageSlots.length; slot++) {\n        const storageSlot = storageSlots[slot];\n        JSONItem.storageKeys.push('0x' + (0, util_1.setLengthLeft)(storageSlot, 32).toString('hex'));\n      }\n      accessListJSON.push(JSONItem);\n    }\n    return accessListJSON;\n  }\n  static getDataFeeEIP2930(accessList, common) {\n    const accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\n    const accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\n    let slots = 0;\n    for (let index = 0; index < accessList.length; index++) {\n      const item = accessList[index];\n      const storageSlots = item[1];\n      slots += storageSlots.length;\n    }\n    const addresses = accessList.length;\n    return addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost);\n  }\n}\nexports.AccessLists = AccessLists;","map":{"version":3,"names":["util_1","require","types_1","checkMaxInitCodeSize","common","length","maxInitCodeSize","param","BigInt","Error","exports","AccessLists","getAccessListData","accessList","AccessListJSON","bufferAccessList","isAccessList","newAccessList","i","item","addressBuffer","toBuffer","address","storageItems","index","storageKeys","push","json","data","bufferToHex","jsonItem","verifyAccessList","key","accessListItem","storageSlots","undefined","storageSlot","getAccessListJSON","accessListJSON","JSONItem","setLengthLeft","toString","slot","getDataFeeEIP2930","accessListStorageKeyCost","accessListAddressCost","slots","addresses","Number"],"sources":["/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@ethereumjs/tx/src/util.ts"],"sourcesContent":["import { bufferToHex, setLengthLeft, toBuffer } from '@ethereumjs/util'\n\nimport { isAccessList } from './types'\n\nimport type { AccessList, AccessListBuffer, AccessListItem } from './types'\nimport type { Common } from '@ethereumjs/common'\n\nexport function checkMaxInitCodeSize(common: Common, length: number) {\n  const maxInitCodeSize = common.param('vm', 'maxInitCodeSize')\n  if (maxInitCodeSize && BigInt(length) > maxInitCodeSize) {\n    throw new Error(\n      `the initcode size of this transaction is too large: it is ${length} while the max is ${common.param(\n        'vm',\n        'maxInitCodeSize'\n      )}`\n    )\n  }\n}\n\nexport class AccessLists {\n  public static getAccessListData(accessList: AccessListBuffer | AccessList) {\n    let AccessListJSON\n    let bufferAccessList\n    if (isAccessList(accessList)) {\n      AccessListJSON = accessList\n      const newAccessList: AccessListBuffer = []\n\n      for (let i = 0; i < accessList.length; i++) {\n        const item: AccessListItem = accessList[i]\n        const addressBuffer = toBuffer(item.address)\n        const storageItems: Buffer[] = []\n        for (let index = 0; index < item.storageKeys.length; index++) {\n          storageItems.push(toBuffer(item.storageKeys[index]))\n        }\n        newAccessList.push([addressBuffer, storageItems])\n      }\n      bufferAccessList = newAccessList\n    } else {\n      bufferAccessList = accessList ?? []\n      // build the JSON\n      const json: AccessList = []\n      for (let i = 0; i < bufferAccessList.length; i++) {\n        const data = bufferAccessList[i]\n        const address = bufferToHex(data[0])\n        const storageKeys: string[] = []\n        for (let item = 0; item < data[1].length; item++) {\n          storageKeys.push(bufferToHex(data[1][item]))\n        }\n        const jsonItem: AccessListItem = {\n          address,\n          storageKeys,\n        }\n        json.push(jsonItem)\n      }\n      AccessListJSON = json\n    }\n\n    return {\n      AccessListJSON,\n      accessList: bufferAccessList,\n    }\n  }\n\n  public static verifyAccessList(accessList: AccessListBuffer) {\n    for (let key = 0; key < accessList.length; key++) {\n      const accessListItem = accessList[key]\n      const address = <Buffer>accessListItem[0]\n      const storageSlots = <Buffer[]>accessListItem[1]\n      if ((<any>accessListItem)[2] !== undefined) {\n        throw new Error(\n          'Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.'\n        )\n      }\n      if (address.length !== 20) {\n        throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes')\n      }\n      for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n        if (storageSlots[storageSlot].length !== 32) {\n          throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes')\n        }\n      }\n    }\n  }\n\n  public static getAccessListJSON(accessList: AccessListBuffer) {\n    const accessListJSON = []\n    for (let index = 0; index < accessList.length; index++) {\n      const item: any = accessList[index]\n      const JSONItem: any = {\n        address: '0x' + setLengthLeft(<Buffer>item[0], 20).toString('hex'),\n        storageKeys: [],\n      }\n      const storageSlots: Buffer[] = item[1]\n      for (let slot = 0; slot < storageSlots.length; slot++) {\n        const storageSlot = storageSlots[slot]\n        JSONItem.storageKeys.push('0x' + setLengthLeft(storageSlot, 32).toString('hex'))\n      }\n      accessListJSON.push(JSONItem)\n    }\n    return accessListJSON\n  }\n\n  public static getDataFeeEIP2930(accessList: AccessListBuffer, common: Common): number {\n    const accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost')\n    const accessListAddressCost = common.param('gasPrices', 'accessListAddressCost')\n\n    let slots = 0\n    for (let index = 0; index < accessList.length; index++) {\n      const item = accessList[index]\n      const storageSlots = item[1]\n      slots += storageSlots.length\n    }\n\n    const addresses = accessList.length\n    return addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}