{"ast":null,"code":"\"use strict\";\n\nvar urilib = require('url');\nvar helpers = require('./helpers');\nmodule.exports.SchemaScanResult = SchemaScanResult;\nfunction SchemaScanResult(found, ref) {\n  this.id = found;\n  this.ref = ref;\n}\n\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param string uri\n * @param object schema\n * @return {Object}\n */\nmodule.exports.scan = function scan(base, schema) {\n  function scanSchema(baseuri, schema) {\n    if (!schema || typeof schema != 'object') return;\n    // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined\n    if (schema.$ref) {\n      var resolvedUri = urilib.resolve(baseuri, schema.$ref);\n      ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri] + 1 : 0;\n      return;\n    }\n    var id = schema.$id || schema.id;\n    var ourBase = id ? urilib.resolve(baseuri, id) : baseuri;\n    if (ourBase) {\n      // If there's no fragment, append an empty one\n      if (ourBase.indexOf('#') < 0) ourBase += '#';\n      if (found[ourBase]) {\n        if (!helpers.deepCompareStrict(found[ourBase], schema)) {\n          throw new Error('Schema <' + ourBase + '> already exists with different definition');\n        }\n        return found[ourBase];\n      }\n      found[ourBase] = schema;\n      // strip trailing fragment\n      if (ourBase[ourBase.length - 1] == '#') {\n        found[ourBase.substring(0, ourBase.length - 1)] = schema;\n      }\n    }\n    scanArray(ourBase + '/items', Array.isArray(schema.items) ? schema.items : [schema.items]);\n    scanArray(ourBase + '/extends', Array.isArray(schema.extends) ? schema.extends : [schema.extends]);\n    scanSchema(ourBase + '/additionalItems', schema.additionalItems);\n    scanObject(ourBase + '/properties', schema.properties);\n    scanSchema(ourBase + '/additionalProperties', schema.additionalProperties);\n    scanObject(ourBase + '/definitions', schema.definitions);\n    scanObject(ourBase + '/patternProperties', schema.patternProperties);\n    scanObject(ourBase + '/dependencies', schema.dependencies);\n    scanArray(ourBase + '/disallow', schema.disallow);\n    scanArray(ourBase + '/allOf', schema.allOf);\n    scanArray(ourBase + '/anyOf', schema.anyOf);\n    scanArray(ourBase + '/oneOf', schema.oneOf);\n    scanSchema(ourBase + '/not', schema.not);\n  }\n  function scanArray(baseuri, schemas) {\n    if (!Array.isArray(schemas)) return;\n    for (var i = 0; i < schemas.length; i++) {\n      scanSchema(baseuri + '/' + i, schemas[i]);\n    }\n  }\n  function scanObject(baseuri, schemas) {\n    if (!schemas || typeof schemas != 'object') return;\n    for (var p in schemas) {\n      scanSchema(baseuri + '/' + p, schemas[p]);\n    }\n  }\n  var found = {};\n  var ref = {};\n  scanSchema(base, schema);\n  return new SchemaScanResult(found, ref);\n};","map":{"version":3,"names":["urilib","require","helpers","module","exports","SchemaScanResult","found","ref","id","scan","base","schema","scanSchema","baseuri","$ref","resolvedUri","resolve","$id","ourBase","indexOf","deepCompareStrict","Error","length","substring","scanArray","Array","isArray","items","extends","additionalItems","scanObject","properties","additionalProperties","definitions","patternProperties","dependencies","disallow","allOf","anyOf","oneOf","not","schemas","i","p"],"sources":["/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/jsonschema/lib/scan.js"],"sourcesContent":["\"use strict\";\n\nvar urilib = require('url');\nvar helpers = require('./helpers');\n\nmodule.exports.SchemaScanResult = SchemaScanResult;\nfunction SchemaScanResult(found, ref){\n  this.id = found;\n  this.ref = ref;\n}\n\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param string uri\n * @param object schema\n * @return {Object}\n */\nmodule.exports.scan = function scan(base, schema){\n  function scanSchema(baseuri, schema){\n    if(!schema || typeof schema!='object') return;\n    // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined\n    if(schema.$ref){\n      var resolvedUri = urilib.resolve(baseuri, schema.$ref);\n      ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri]+1 : 0;\n      return;\n    }\n    var id = schema.$id || schema.id;\n    var ourBase = id ? urilib.resolve(baseuri, id) : baseuri;\n    if (ourBase) {\n      // If there's no fragment, append an empty one\n      if(ourBase.indexOf('#')<0) ourBase += '#';\n      if(found[ourBase]){\n        if(!helpers.deepCompareStrict(found[ourBase], schema)){\n          throw new Error('Schema <'+ourBase+'> already exists with different definition');\n        }\n        return found[ourBase];\n      }\n      found[ourBase] = schema;\n      // strip trailing fragment\n      if(ourBase[ourBase.length-1]=='#'){\n        found[ourBase.substring(0, ourBase.length-1)] = schema;\n      }\n    }\n    scanArray(ourBase+'/items', (Array.isArray(schema.items)?schema.items:[schema.items]));\n    scanArray(ourBase+'/extends', (Array.isArray(schema.extends)?schema.extends:[schema.extends]));\n    scanSchema(ourBase+'/additionalItems', schema.additionalItems);\n    scanObject(ourBase+'/properties', schema.properties);\n    scanSchema(ourBase+'/additionalProperties', schema.additionalProperties);\n    scanObject(ourBase+'/definitions', schema.definitions);\n    scanObject(ourBase+'/patternProperties', schema.patternProperties);\n    scanObject(ourBase+'/dependencies', schema.dependencies);\n    scanArray(ourBase+'/disallow', schema.disallow);\n    scanArray(ourBase+'/allOf', schema.allOf);\n    scanArray(ourBase+'/anyOf', schema.anyOf);\n    scanArray(ourBase+'/oneOf', schema.oneOf);\n    scanSchema(ourBase+'/not', schema.not);\n  }\n  function scanArray(baseuri, schemas){\n    if(!Array.isArray(schemas)) return;\n    for(var i=0; i<schemas.length; i++){\n      scanSchema(baseuri+'/'+i, schemas[i]);\n    }\n  }\n  function scanObject(baseuri, schemas){\n    if(!schemas || typeof schemas!='object') return;\n    for(var p in schemas){\n      scanSchema(baseuri+'/'+p, schemas[p]);\n    }\n  }\n\n  var found = {};\n  var ref = {};\n  scanSchema(base, schema);\n  return new SchemaScanResult(found, ref);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}