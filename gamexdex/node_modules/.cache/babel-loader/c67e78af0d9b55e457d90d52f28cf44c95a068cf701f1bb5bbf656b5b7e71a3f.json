{"ast":null,"code":"import { CHAIN_NAMESPACES, SOLANA_ADAPTERS, EVM_ADAPTERS, getChainConfig, WALLET_ADAPTERS, log, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS } from '@web3auth/base';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { CommonPrivateKeyProvider, CommonJRPCProvider } from '@web3auth/base-provider';\nimport { Web3AuthNoModal } from '@web3auth/no-modal';\nimport { LoginModal, getAdapterSocialLogins, OPENLOGIN_PROVIDERS, LOGIN_MODAL_EVENTS } from '@web3auth/ui';\nconst defaultSolanaDappModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.TORUS_SOLANA]: {\n      label: \"Torus Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [SOLANA_ADAPTERS.PHANTOM]: {\n      label: \"Phantom\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultEvmDappModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.TORUS_EVM]: {\n      label: \"Torus Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.METAMASK]: {\n      label: \"MetaMask\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.WALLET_CONNECT_V2]: {\n      label: \"Wallet Connect\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultSolanaWalletModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultEvmWalletModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultOtherModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.OTHER,\n  adapters: {\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nasync function getPrivateKeyProvider(chainConfig) {\n  if (chainConfig.chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    const {\n      SolanaPrivateKeyProvider\n    } = await import('@web3auth/solana-provider');\n    return new SolanaPrivateKeyProvider({\n      config: {\n        chainConfig\n      }\n    });\n  } else if (chainConfig.chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    const {\n      EthereumPrivateKeyProvider\n    } = await import('@web3auth/ethereum-provider');\n    return new EthereumPrivateKeyProvider({\n      config: {\n        chainConfig\n      }\n    });\n  } else if (chainConfig.chainNamespace === CHAIN_NAMESPACES.OTHER) {\n    // Modal doesn't support ripple provider\n    // Can always override this with a custom provider\n    return new CommonPrivateKeyProvider({\n      config: {\n        chainConfig\n      }\n    });\n  }\n  throw new Error(`Invalid chainNamespace: ${chainConfig.chainNamespace} found while connecting to wallet`);\n}\n// warning: this function is not compatible with \"OTHER\" chain namespace.\nconst getDefaultAdapterModule = async params => {\n  const {\n    name,\n    customChainConfig,\n    clientId,\n    sessionTime,\n    web3AuthNetwork\n  } = params;\n  if (!Object.values(CHAIN_NAMESPACES).includes(customChainConfig.chainNamespace)) throw new Error(`Invalid chainNamespace: ${customChainConfig.chainNamespace}`);\n  const finalChainConfig = _objectSpread$1(_objectSpread$1({}, getChainConfig(customChainConfig.chainNamespace, customChainConfig === null || customChainConfig === void 0 ? void 0 : customChainConfig.chainId)), customChainConfig || {});\n  if (name === WALLET_ADAPTERS.TORUS_EVM) {\n    const {\n      TorusWalletAdapter\n    } = await import('@web3auth/torus-evm-adapter');\n    const adapter = new TorusWalletAdapter({\n      chainConfig: finalChainConfig,\n      clientId,\n      sessionTime,\n      web3AuthNetwork\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.TORUS_SOLANA) {\n    const {\n      SolanaWalletAdapter\n    } = await import('@web3auth/torus-solana-adapter');\n    const adapter = new SolanaWalletAdapter({\n      chainConfig: finalChainConfig,\n      clientId,\n      sessionTime,\n      web3AuthNetwork\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.METAMASK) {\n    const {\n      MetamaskAdapter\n    } = await import('@web3auth/metamask-adapter');\n    const adapter = new MetamaskAdapter({\n      chainConfig: finalChainConfig,\n      clientId,\n      sessionTime,\n      web3AuthNetwork\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.PHANTOM) {\n    const {\n      PhantomAdapter\n    } = await import('@web3auth/phantom-adapter');\n    const adapter = new PhantomAdapter({\n      chainConfig: finalChainConfig,\n      clientId,\n      sessionTime,\n      web3AuthNetwork\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.WALLET_CONNECT_V2) {\n    const {\n      WalletConnectV2Adapter\n    } = await import('@web3auth/wallet-connect-v2-adapter');\n    const adapter = new WalletConnectV2Adapter({\n      chainConfig: finalChainConfig,\n      clientId,\n      sessionTime,\n      web3AuthNetwork,\n      adapterSettings: {\n        walletConnectInitOptions: {\n          // Using a default wallet connect project id for web3auth modal integration\n          projectId: \"d3c63f19f9582f8ba48e982057eb096b\"\n        }\n      }\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.OPENLOGIN) {\n    const {\n      OpenloginAdapter,\n      getOpenloginDefaultOptions\n    } = await import('@web3auth/openlogin-adapter');\n    const privateKeyProvider = await getPrivateKeyProvider(finalChainConfig);\n    const defaultOptions = getOpenloginDefaultOptions();\n    const adapter = new OpenloginAdapter(_objectSpread$1(_objectSpread$1({}, defaultOptions), {}, {\n      clientId,\n      chainConfig: _objectSpread$1({}, finalChainConfig),\n      adapterSettings: _objectSpread$1(_objectSpread$1({}, defaultOptions.adapterSettings), {}, {\n        clientId,\n        network: web3AuthNetwork\n      }),\n      sessionTime,\n      web3AuthNetwork,\n      privateKeyProvider\n    }));\n    return adapter;\n  }\n  throw new Error(\"Invalid wallet adapter name\");\n};\nconst languageMap = {\n  en: \"english\",\n  de: \"german\",\n  ja: \"japanese\",\n  ko: \"korean\",\n  zh: \"mandarin\",\n  es: \"spanish\",\n  fr: \"french\",\n  pt: \"portuguese\",\n  nl: \"dutch\"\n};\nconst getUserLanguage = defaultLanguage => {\n  let userLanguage = defaultLanguage;\n  if (!userLanguage) {\n    const browserLanguage = typeof window !== \"undefined\" ? window.navigator.userLanguage || window.navigator.language || \"en-US\" : \"en-US\";\n    userLanguage = browserLanguage.split(\"-\")[0];\n  }\n  return Object.prototype.hasOwnProperty.call(languageMap, userLanguage) ? userLanguage : \"en\";\n};\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nclass Web3Auth extends Web3AuthNoModal {\n  constructor(options) {\n    var _this$options$uiConfi, _this$options$uiConfi2, _this$options$uiConfi3, _this$options$uiConfi4, _this$options$uiConfi5, _this$options$uiConfi6, _this$options$uiConfi7, _this$options$uiConfi8;\n    super(options);\n    _defineProperty(this, \"loginModal\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"modalConfig\", defaultEvmDappModalConfig);\n    this.options = _objectSpread({}, options);\n    const providedChainConfig = this.options.chainConfig;\n    if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      if (options.authMode === \"WALLET\") {\n        // default config for solana wallet modal\n        this.modalConfig = defaultSolanaWalletModalConfig;\n      } else {\n        // default config for solana dapp modal\n        this.modalConfig = defaultSolanaDappModalConfig;\n      }\n    } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.EIP155) {\n      if (options.authMode === \"WALLET\") {\n        // default config for evm wallet modal\n        this.modalConfig = defaultEvmWalletModalConfig;\n      } else {\n        // default config for evm dapp modal\n        this.modalConfig = defaultEvmDappModalConfig;\n      }\n    } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.modalConfig = defaultOtherModalConfig;\n    } else {\n      throw new Error(`Invalid chainNamespace provided: ${providedChainConfig.chainNamespace}`);\n    }\n    // get userLanguage\n    const defaultLanguage = getUserLanguage((_this$options$uiConfi = this.options.uiConfig) === null || _this$options$uiConfi === void 0 ? void 0 : _this$options$uiConfi.defaultLanguage);\n    this.loginModal = new LoginModal({\n      theme: (_this$options$uiConfi2 = this.options.uiConfig) === null || _this$options$uiConfi2 === void 0 ? void 0 : _this$options$uiConfi2.theme,\n      appName: ((_this$options$uiConfi3 = this.options.uiConfig) === null || _this$options$uiConfi3 === void 0 ? void 0 : _this$options$uiConfi3.appName) || \"blockchain\",\n      appLogo: ((_this$options$uiConfi4 = this.options.uiConfig) === null || _this$options$uiConfi4 === void 0 ? void 0 : _this$options$uiConfi4.appLogo) || \"\",\n      adapterListener: this,\n      displayErrorsOnModal: (_this$options$uiConfi5 = this.options.uiConfig) === null || _this$options$uiConfi5 === void 0 ? void 0 : _this$options$uiConfi5.displayErrorsOnModal,\n      defaultLanguage,\n      modalZIndex: ((_this$options$uiConfi6 = this.options.uiConfig) === null || _this$options$uiConfi6 === void 0 ? void 0 : _this$options$uiConfi6.modalZIndex) || \"99998\",\n      web3AuthNetwork: this.options.web3AuthNetwork,\n      loginGridCol: ((_this$options$uiConfi7 = this.options.uiConfig) === null || _this$options$uiConfi7 === void 0 ? void 0 : _this$options$uiConfi7.loginGridCol) || 3,\n      primaryButton: ((_this$options$uiConfi8 = this.options.uiConfig) === null || _this$options$uiConfi8 === void 0 ? void 0 : _this$options$uiConfi8.primaryButton) || \"socialLogin\"\n    });\n    this.subscribeToLoginModalEvents();\n  }\n  async initModal(params) {\n    super.checkInitRequirements();\n    await this.loginModal.initModal();\n    const providedChainConfig = this.options.chainConfig;\n    // merge default adapters with the custom configured adapters.\n    const allAdapters = [...new Set([...Object.keys(this.modalConfig.adapters || {}), ...Object.keys(this.walletAdapters)])];\n    const adapterConfigurationPromises = allAdapters.map(async adapterName => {\n      var _this$modalConfig$ada, _params$modalConfig, _this$modalConfig$ada2, _this$modalConfig$ada3;\n      // start with the default config of adapter.\n      let adapterConfig = ((_this$modalConfig$ada = this.modalConfig.adapters) === null || _this$modalConfig$ada === void 0 ? void 0 : _this$modalConfig$ada[adapterName]) || {\n        label: adapterName,\n        showOnModal: true,\n        showOnMobile: true,\n        showOnDesktop: true\n      };\n      // override the default config of adapter if some config is being provided by the user.\n      if (params !== null && params !== void 0 && (_params$modalConfig = params.modalConfig) !== null && _params$modalConfig !== void 0 && _params$modalConfig[adapterName]) {\n        adapterConfig = _objectSpread(_objectSpread({}, adapterConfig), params.modalConfig[adapterName]);\n      }\n      this.modalConfig.adapters[adapterName] = adapterConfig;\n      // check if adapter is configured/added by user and exist in walletAdapters map.\n      const adapter = this.walletAdapters[adapterName];\n      log.debug(\"adapter config\", adapterName, (_this$modalConfig$ada2 = this.modalConfig.adapters) === null || _this$modalConfig$ada2 === void 0 ? void 0 : _this$modalConfig$ada2[adapterName].showOnModal, adapter);\n      // if adapter is not custom configured then check if it is available in default adapters.\n      // and if adapter is not hidden by user\n      if (!adapter && (_this$modalConfig$ada3 = this.modalConfig.adapters) !== null && _this$modalConfig$ada3 !== void 0 && _this$modalConfig$ada3[adapterName].showOnModal) {\n        // if adapter is not configured and some default configuration is available, use it.\n        const ad = await getDefaultAdapterModule({\n          name: adapterName,\n          customChainConfig: this.options.chainConfig,\n          clientId: this.options.clientId,\n          sessionTime: this.options.sessionTime,\n          web3AuthNetwork: this.options.web3AuthNetwork\n        });\n        this.walletAdapters[adapterName] = ad;\n        return adapterName;\n      } else if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.IN_APP || (adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL || adapterName === this.cachedAdapter) {\n        var _this$modalConfig$ada4;\n        if (!((_this$modalConfig$ada4 = this.modalConfig.adapters) !== null && _this$modalConfig$ada4 !== void 0 && _this$modalConfig$ada4[adapterName].showOnModal)) return;\n        // add client id to adapter, same web3auth client id can be used in adapter.\n        // this id is being overridden if user is also passing client id in adapter's constructor.\n        this.walletAdapters[adapterName].setAdapterSettings({\n          clientId: this.options.clientId,\n          sessionTime: this.options.sessionTime,\n          web3AuthNetwork: this.options.web3AuthNetwork\n        });\n        // if adapter doesn't have any chainConfig then we will set the chainConfig based of passed chainNamespace\n        // and chainNamespace.\n        if (!adapter.chainConfigProxy) {\n          var _this$coreOptions$cha;\n          const chainConfig = _objectSpread(_objectSpread({}, getChainConfig(providedChainConfig.chainNamespace, (_this$coreOptions$cha = this.coreOptions.chainConfig) === null || _this$coreOptions$cha === void 0 ? void 0 : _this$coreOptions$cha.chainId)), this.coreOptions.chainConfig);\n          this.walletAdapters[adapterName].setAdapterSettings({\n            chainConfig\n          });\n        }\n        if (adapterName === WALLET_ADAPTERS.OPENLOGIN) {\n          const openloginAdapter = this.walletAdapters[adapterName];\n          if (!openloginAdapter.privateKeyProvider) {\n            const currentPrivateKeyProvider = await getPrivateKeyProvider(openloginAdapter.chainConfigProxy);\n            openloginAdapter.setAdapterSettings({\n              privateKeyProvider: currentPrivateKeyProvider\n            });\n          }\n        }\n        return adapterName;\n      }\n    });\n    let adapterNames = await Promise.all(adapterConfigurationPromises);\n    const hasInAppWallets = Object.values(this.walletAdapters).some(adapter => {\n      var _this$modalConfig$ada5, _this$modalConfig$ada6, _this$modalConfig$ada7;\n      if (adapter.type !== ADAPTER_CATEGORY.IN_APP) return false;\n      if (((_this$modalConfig$ada5 = this.modalConfig.adapters) === null || _this$modalConfig$ada5 === void 0 || (_this$modalConfig$ada5 = _this$modalConfig$ada5[adapter.name]) === null || _this$modalConfig$ada5 === void 0 ? void 0 : _this$modalConfig$ada5.showOnModal) !== true) return false;\n      if (!((_this$modalConfig$ada6 = this.modalConfig.adapters) !== null && _this$modalConfig$ada6 !== void 0 && (_this$modalConfig$ada6 = _this$modalConfig$ada6[adapter.name]) !== null && _this$modalConfig$ada6 !== void 0 && _this$modalConfig$ada6.loginMethods)) return true;\n      const mergedLoginMethods = getAdapterSocialLogins(adapter.name, this.walletAdapters[adapter.name], (_this$modalConfig$ada7 = this.modalConfig.adapters[adapter.name]) === null || _this$modalConfig$ada7 === void 0 ? void 0 : _this$modalConfig$ada7.loginMethods);\n      if (Object.values(mergedLoginMethods).some(method => method.showOnModal)) return true;\n      return false;\n    });\n    log.debug(hasInAppWallets, this.walletAdapters, adapterNames, \"hasInAppWallets\");\n    // if both wc1 and wc2 are configured, give precedence to wc2.\n    if (this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1] && this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V2]) {\n      delete this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1];\n      adapterNames = adapterNames.filter(ad => ad !== WALLET_ADAPTERS.WALLET_CONNECT_V1);\n    }\n    // Now, initialize the adapters.\n    const initPromises = adapterNames.map(async adapterName => {\n      if (!adapterName) return;\n      try {\n        const adapter = this.walletAdapters[adapterName];\n        // only initialize a external adapter here if it is a cached adapter.\n        if (this.cachedAdapter !== adapterName && adapter.type === ADAPTER_CATEGORY.EXTERNAL) {\n          return;\n        }\n        // in-app wallets or cached wallet (being connected or already connected) are initialized first.\n        // if adapter is configured thn only initialize in app or cached adapter.\n        // external wallets are initialized on INIT_EXTERNAL_WALLET event.\n        this.subscribeToAdapterEvents(adapter);\n        if (adapter.status === ADAPTER_STATUS.NOT_READY) await adapter.init({\n          autoConnect: this.cachedAdapter === adapterName\n        });\n        // note: not adding cachedWallet to modal if it is external wallet.\n        // adding it later if no in-app wallets are available.\n        if (adapter.type === ADAPTER_CATEGORY.IN_APP) {\n          this.initializeInAppWallet(adapterName);\n        }\n      } catch (error) {\n        log.error(error, \"error while initializing adapter\");\n      }\n    });\n    this.commonJRPCProvider = await CommonJRPCProvider.getProviderInstance({\n      chainConfig: this.coreOptions.chainConfig\n    });\n    this.status = ADAPTER_STATUS.READY;\n    await Promise.all(initPromises);\n    const hasExternalWallets = allAdapters.some(adapterName => {\n      var _this$walletAdapters$, _this$modalConfig$ada8;\n      return ((_this$walletAdapters$ = this.walletAdapters[adapterName]) === null || _this$walletAdapters$ === void 0 ? void 0 : _this$walletAdapters$.type) === ADAPTER_CATEGORY.EXTERNAL && ((_this$modalConfig$ada8 = this.modalConfig.adapters) === null || _this$modalConfig$ada8 === void 0 ? void 0 : _this$modalConfig$ada8[adapterName].showOnModal);\n    });\n    if (hasExternalWallets) {\n      this.loginModal.initExternalWalletContainer();\n    }\n    // variable to check if we have any in app wallets\n    // currently all default in app and external wallets can be hidden or shown based on config.\n    if (!hasInAppWallets && hasExternalWallets) {\n      // if no in app wallet is available then initialize external wallets in modal\n      await this.initExternalWalletAdapters(false, {\n        showExternalWalletsOnly: true\n      });\n    }\n  }\n  async connect() {\n    // if (!this.loginModal.initialized) throw new Error(\"Login modal is not initialized\");\n    // if already connected return provider\n    if (this.connectedAdapterName && this.status === ADAPTER_STATUS.CONNECTED && this.provider) return this.provider;\n    this.loginModal.open();\n    return new Promise((resolve, reject) => {\n      this.once(ADAPTER_EVENTS.CONNECTED, () => {\n        return resolve(this.provider);\n      });\n      this.once(ADAPTER_EVENTS.ERRORED, err => {\n        return reject(err);\n      });\n    });\n  }\n  async initExternalWalletAdapters(externalWalletsInitialized, options) {\n    if (externalWalletsInitialized) return;\n    const adaptersConfig = {};\n    Object.keys(this.walletAdapters).forEach(async adapterName => {\n      const adapter = this.walletAdapters[adapterName];\n      if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL) {\n        log.debug(\"init external wallet\", this.cachedAdapter, adapterName);\n        this.subscribeToAdapterEvents(adapter);\n        // we are not initializing cached adapter here as it is already being initialized in initModal before.\n        if (this.cachedAdapter === adapterName) {\n          return;\n        }\n        if (adapter.status === ADAPTER_STATUS.NOT_READY) {\n          await adapter.init({\n            autoConnect: this.cachedAdapter === adapterName\n          }).then(() => {\n            adaptersConfig[adapterName] = this.modalConfig.adapters[adapterName];\n            this.loginModal.addWalletLogins(adaptersConfig, {\n              showExternalWalletsOnly: !!(options !== null && options !== void 0 && options.showExternalWalletsOnly)\n            });\n            return undefined;\n          }).catch(error => log.error(error, \"error while initializing adapter\"));\n        } else if (adapter.status === ADAPTER_STATUS.READY) {\n          adaptersConfig[adapterName] = this.modalConfig.adapters[adapterName];\n          this.loginModal.addWalletLogins(adaptersConfig, {\n            showExternalWalletsOnly: !!(options !== null && options !== void 0 && options.showExternalWalletsOnly)\n          });\n        }\n      }\n    });\n  }\n  initializeInAppWallet(adapterName) {\n    log.info(\"adapterInitResults\", adapterName);\n    if (this.walletAdapters[adapterName].type === ADAPTER_CATEGORY.IN_APP) {\n      var _this$modalConfig$ada9, _this$options$uiConfi9, _this$options$uiConfi10, _this$options$uiConfi11;\n      this.loginModal.addSocialLogins(adapterName, getAdapterSocialLogins(adapterName, this.walletAdapters[adapterName], (_this$modalConfig$ada9 = this.modalConfig.adapters[adapterName]) === null || _this$modalConfig$ada9 === void 0 ? void 0 : _this$modalConfig$ada9.loginMethods), ((_this$options$uiConfi9 = this.options.uiConfig) === null || _this$options$uiConfi9 === void 0 ? void 0 : _this$options$uiConfi9.loginMethodsOrder) || OPENLOGIN_PROVIDERS, _objectSpread(_objectSpread({}, this.options.uiConfig), {}, {\n        loginGridCol: ((_this$options$uiConfi10 = this.options.uiConfig) === null || _this$options$uiConfi10 === void 0 ? void 0 : _this$options$uiConfi10.loginGridCol) || 3,\n        primaryButton: ((_this$options$uiConfi11 = this.options.uiConfig) === null || _this$options$uiConfi11 === void 0 ? void 0 : _this$options$uiConfi11.primaryButton) || \"socialLogin\"\n      }));\n    }\n  }\n  subscribeToLoginModalEvents() {\n    this.loginModal.on(LOGIN_MODAL_EVENTS.LOGIN, async params => {\n      try {\n        await this.connectTo(params.adapter, params.loginParams);\n      } catch (error) {\n        log.error(`Error while connecting to adapter: ${params.adapter}`, error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.INIT_EXTERNAL_WALLETS, async params => {\n      await this.initExternalWalletAdapters(params.externalWalletsInitialized);\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.DISCONNECT, async () => {\n      try {\n        await this.logout();\n      } catch (error) {\n        log.error(`Error while disconnecting`, error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, async visibility => {\n      log.debug(\"is login modal visible\", visibility);\n      this.emit(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, visibility);\n      const adapter = this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V2] || this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1];\n      if (adapter) {\n        const walletConnectStatus = adapter === null || adapter === void 0 ? void 0 : adapter.status;\n        log.debug(\"trying refreshing wc session\", visibility, walletConnectStatus);\n        if (visibility && (walletConnectStatus === ADAPTER_STATUS.READY || walletConnectStatus === ADAPTER_STATUS.CONNECTING)) {\n          log.debug(\"refreshing wc session\");\n          // refreshing session for wallet connect whenever modal is opened.\n          try {\n            adapter.connect();\n          } catch (error) {\n            log.error(`Error while disconnecting to wallet connect in core`, error);\n          }\n        }\n      }\n    });\n  }\n}\nexport { Web3Auth, defaultEvmDappModalConfig, defaultEvmWalletModalConfig, defaultOtherModalConfig, defaultSolanaDappModalConfig, defaultSolanaWalletModalConfig };","map":{"version":3,"names":["defaultSolanaDappModalConfig","chainNamespace","CHAIN_NAMESPACES","SOLANA","adapters","SOLANA_ADAPTERS","TORUS_SOLANA","label","showOnModal","showOnMobile","showOnDesktop","OPENLOGIN","PHANTOM","defaultEvmDappModalConfig","EIP155","EVM_ADAPTERS","TORUS_EVM","METAMASK","WALLET_CONNECT_V2","defaultSolanaWalletModalConfig","defaultEvmWalletModalConfig","defaultOtherModalConfig","OTHER","getPrivateKeyProvider","chainConfig","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","CommonPrivateKeyProvider","Error","getDefaultAdapterModule","params","name","customChainConfig","clientId","sessionTime","web3AuthNetwork","Object","values","includes","finalChainConfig","_objectSpread$1","getChainConfig","chainId","WALLET_ADAPTERS","TorusWalletAdapter","adapter","SolanaWalletAdapter","MetamaskAdapter","PhantomAdapter","WalletConnectV2Adapter","adapterSettings","walletConnectInitOptions","projectId","OpenloginAdapter","getOpenloginDefaultOptions","privateKeyProvider","defaultOptions","network","languageMap","en","de","ja","ko","zh","es","fr","pt","nl","getUserLanguage","defaultLanguage","userLanguage","browserLanguage","window","navigator","language","split","prototype","hasOwnProperty","call","Web3Auth","Web3AuthNoModal","constructor","options","_this$options$uiConfi","_this$options$uiConfi2","_this$options$uiConfi3","_this$options$uiConfi4","_this$options$uiConfi5","_this$options$uiConfi6","_this$options$uiConfi7","_this$options$uiConfi8","_defineProperty","_objectSpread","providedChainConfig","authMode","modalConfig","uiConfig","loginModal","LoginModal","theme","appName","appLogo","adapterListener","displayErrorsOnModal","modalZIndex","loginGridCol","primaryButton","subscribeToLoginModalEvents","initModal","checkInitRequirements","allAdapters","Set","keys","walletAdapters","adapterConfigurationPromises","map","adapterName","_this$modalConfig$ada","_params$modalConfig","_this$modalConfig$ada2","_this$modalConfig$ada3","adapterConfig","log","debug","ad","type","ADAPTER_CATEGORY","IN_APP","EXTERNAL","cachedAdapter","_this$modalConfig$ada4","setAdapterSettings","chainConfigProxy","_this$coreOptions$cha","coreOptions","openloginAdapter","currentPrivateKeyProvider","adapterNames","Promise","all","hasInAppWallets","some","_this$modalConfig$ada5","_this$modalConfig$ada6","_this$modalConfig$ada7","loginMethods","mergedLoginMethods","getAdapterSocialLogins","method","WALLET_CONNECT_V1","filter","initPromises","subscribeToAdapterEvents","status","ADAPTER_STATUS","NOT_READY","init","autoConnect","initializeInAppWallet","error","commonJRPCProvider","CommonJRPCProvider","getProviderInstance","READY","hasExternalWallets","_this$walletAdapters$","_this$modalConfig$ada8","initExternalWalletContainer","initExternalWalletAdapters","showExternalWalletsOnly","connect","connectedAdapterName","CONNECTED","provider","open","resolve","reject","once","ADAPTER_EVENTS","ERRORED","err","externalWalletsInitialized","adaptersConfig","forEach","then","addWalletLogins","undefined","catch","info","_this$modalConfig$ada9","_this$options$uiConfi9","_this$options$uiConfi10","_this$options$uiConfi11","addSocialLogins","loginMethodsOrder","OPENLOGIN_PROVIDERS","on","LOGIN_MODAL_EVENTS","LOGIN","connectTo","loginParams","INIT_EXTERNAL_WALLETS","DISCONNECT","logout","MODAL_VISIBILITY","visibility","emit","walletConnectStatus","CONNECTING"],"sources":["/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@web3auth/modal/src/config.ts","/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@web3auth/modal/src/default.ts","/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@web3auth/modal/src/utils.ts","/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@web3auth/modal/src/modalManager.ts"],"sourcesContent":["import { CHAIN_NAMESPACES, EVM_ADAPTERS, SOLANA_ADAPTERS } from \"@web3auth/base\";\n\nimport { AdaptersModalConfig } from \"./interface\";\n\nexport const defaultSolanaDappModalConfig: AdaptersModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.TORUS_SOLANA]: {\n      label: \"Torus Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n    [SOLANA_ADAPTERS.PHANTOM]: {\n      label: \"Phantom\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n  },\n};\n\nexport const defaultEvmDappModalConfig: AdaptersModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.TORUS_EVM]: {\n      label: \"Torus Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n    [EVM_ADAPTERS.METAMASK]: {\n      label: \"MetaMask\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n    [EVM_ADAPTERS.WALLET_CONNECT_V2]: {\n      label: \"Wallet Connect\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n  },\n};\n\nexport const defaultSolanaWalletModalConfig: AdaptersModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n  },\n};\n\nexport const defaultEvmWalletModalConfig: AdaptersModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n  },\n};\n\nexport const defaultOtherModalConfig: AdaptersModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.OTHER,\n  adapters: {\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true,\n    },\n  },\n};\n","import type { OPENLOGIN_NETWORK_TYPE, OpenLoginOptions } from \"@toruslabs/openlogin-utils\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, getChainConfig, IAdapter, WALLET_ADAPTER_TYPE, WALLET_ADAPTERS } from \"@web3auth/base\";\nimport { CommonPrivateKeyProvider, IBaseProvider } from \"@web3auth/base-provider\";\n\nexport async function getPrivateKeyProvider(chainConfig: CustomChainConfig): Promise<IBaseProvider<string>> {\n  if (chainConfig.chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    const { SolanaPrivateKeyProvider } = await import(\"@web3auth/solana-provider\");\n    return new SolanaPrivateKeyProvider({ config: { chainConfig } });\n  } else if (chainConfig.chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    const { EthereumPrivateKeyProvider } = await import(\"@web3auth/ethereum-provider\");\n    return new EthereumPrivateKeyProvider({ config: { chainConfig } });\n  } else if (chainConfig.chainNamespace === CHAIN_NAMESPACES.OTHER) {\n    // Modal doesn't support ripple provider\n    // Can always override this with a custom provider\n    return new CommonPrivateKeyProvider({ config: { chainConfig } });\n  }\n  throw new Error(`Invalid chainNamespace: ${chainConfig.chainNamespace} found while connecting to wallet`);\n}\n\n// warning: this function is not compatible with \"OTHER\" chain namespace.\nexport const getDefaultAdapterModule = async (params: {\n  name: WALLET_ADAPTER_TYPE;\n  clientId: string;\n  customChainConfig: Partial<CustomChainConfig> & Pick<CustomChainConfig, \"chainNamespace\">;\n  sessionTime?: number;\n  web3AuthNetwork?: OPENLOGIN_NETWORK_TYPE;\n}): Promise<IAdapter<unknown>> => {\n  const { name, customChainConfig, clientId, sessionTime, web3AuthNetwork } = params;\n  if (!Object.values(CHAIN_NAMESPACES).includes(customChainConfig.chainNamespace))\n    throw new Error(`Invalid chainNamespace: ${customChainConfig.chainNamespace}`);\n  const finalChainConfig = {\n    ...(getChainConfig(customChainConfig.chainNamespace, customChainConfig?.chainId) as CustomChainConfig),\n    ...(customChainConfig || {}),\n  };\n  if (name === WALLET_ADAPTERS.TORUS_EVM) {\n    const { TorusWalletAdapter } = await import(\"@web3auth/torus-evm-adapter\");\n    const adapter = new TorusWalletAdapter({ chainConfig: finalChainConfig, clientId, sessionTime, web3AuthNetwork });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.TORUS_SOLANA) {\n    const { SolanaWalletAdapter } = await import(\"@web3auth/torus-solana-adapter\");\n    const adapter = new SolanaWalletAdapter({ chainConfig: finalChainConfig, clientId, sessionTime, web3AuthNetwork });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.METAMASK) {\n    const { MetamaskAdapter } = await import(\"@web3auth/metamask-adapter\");\n    const adapter = new MetamaskAdapter({ chainConfig: finalChainConfig, clientId, sessionTime, web3AuthNetwork });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.PHANTOM) {\n    const { PhantomAdapter } = await import(\"@web3auth/phantom-adapter\");\n    const adapter = new PhantomAdapter({ chainConfig: finalChainConfig, clientId, sessionTime, web3AuthNetwork });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.WALLET_CONNECT_V2) {\n    const { WalletConnectV2Adapter } = await import(\"@web3auth/wallet-connect-v2-adapter\");\n    const adapter = new WalletConnectV2Adapter({\n      chainConfig: finalChainConfig,\n      clientId,\n      sessionTime,\n      web3AuthNetwork,\n      adapterSettings: {\n        walletConnectInitOptions: {\n          // Using a default wallet connect project id for web3auth modal integration\n          projectId: \"d3c63f19f9582f8ba48e982057eb096b\",\n        },\n      },\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.OPENLOGIN) {\n    const { OpenloginAdapter, getOpenloginDefaultOptions } = await import(\"@web3auth/openlogin-adapter\");\n\n    const privateKeyProvider: IBaseProvider<string> = await getPrivateKeyProvider(finalChainConfig);\n\n    const defaultOptions = getOpenloginDefaultOptions();\n    const adapter = new OpenloginAdapter({\n      ...defaultOptions,\n      clientId,\n      chainConfig: { ...finalChainConfig },\n      adapterSettings: { ...(defaultOptions.adapterSettings as OpenLoginOptions), clientId, network: web3AuthNetwork },\n      sessionTime,\n      web3AuthNetwork,\n      privateKeyProvider,\n    });\n    return adapter;\n  }\n  throw new Error(\"Invalid wallet adapter name\");\n};\n","interface NavigatorLanguage {\n  userLanguage?: string;\n}\n\nexport const languageMap = {\n  en: \"english\",\n  de: \"german\",\n  ja: \"japanese\",\n  ko: \"korean\",\n  zh: \"mandarin\",\n  es: \"spanish\",\n  fr: \"french\",\n  pt: \"portuguese\",\n  nl: \"dutch\",\n};\n\nexport const getUserLanguage = (defaultLanguage: string | undefined) => {\n  let userLanguage = defaultLanguage;\n  if (!userLanguage) {\n    const browserLanguage =\n      typeof window !== \"undefined\" ? (window.navigator as NavigatorLanguage).userLanguage || window.navigator.language || \"en-US\" : \"en-US\";\n    userLanguage = browserLanguage.split(\"-\")[0];\n  }\n  return Object.prototype.hasOwnProperty.call(languageMap, userLanguage) ? userLanguage : \"en\";\n};\n","import {\n  ADAPTER_CATEGORY,\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  BaseAdapterConfig,\n  CHAIN_NAMESPACES,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  LoginMethodConfig,\n  SafeEventEmitterProvider,\n  WALLET_ADAPTER_TYPE,\n  WALLET_ADAPTERS,\n} from \"@web3auth/base\";\nimport { CommonJRPCProvider } from \"@web3auth/base-provider\";\nimport { Web3AuthNoModal, Web3AuthNoModalOptions } from \"@web3auth/no-modal\";\nimport type { OpenloginAdapter } from \"@web3auth/openlogin-adapter\";\nimport { getAdapterSocialLogins, LOGIN_MODAL_EVENTS, LoginModal, OPENLOGIN_PROVIDERS, UIConfig } from \"@web3auth/ui\";\n\nimport {\n  defaultEvmDappModalConfig,\n  defaultEvmWalletModalConfig,\n  defaultOtherModalConfig,\n  defaultSolanaDappModalConfig,\n  defaultSolanaWalletModalConfig,\n} from \"./config\";\nimport { getDefaultAdapterModule, getPrivateKeyProvider } from \"./default\";\nimport { AdaptersModalConfig, IWeb3AuthModal, ModalConfig } from \"./interface\";\nimport { getUserLanguage } from \"./utils\";\n\nexport interface Web3AuthOptions extends Web3AuthNoModalOptions {\n  /**\n   * web3auth instance provides different adapters for different type of usages. If you are dapp and want to\n   * use external wallets like metamask, then you can use the `DAPP` authMode.\n   * If you are a wallet and only want to use you own wallet implementations along with openlogin,\n   * then you should use `WALLET` authMode.\n   *\n   * @defaultValue `DAPP`\n   */\n  authMode?: \"DAPP\" | \"WALLET\";\n  /**\n   * Config for configuring modal ui display properties\n   */\n  uiConfig?: Omit<UIConfig, \"adapterListener\">;\n}\n\nexport class Web3Auth extends Web3AuthNoModal implements IWeb3AuthModal {\n  public loginModal: LoginModal;\n\n  readonly options: Web3AuthOptions;\n\n  private modalConfig: AdaptersModalConfig = defaultEvmDappModalConfig;\n\n  constructor(options: Web3AuthOptions) {\n    super(options);\n    this.options = { ...options };\n    const providedChainConfig = this.options.chainConfig;\n    if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      if (options.authMode === \"WALLET\") {\n        // default config for solana wallet modal\n        this.modalConfig = defaultSolanaWalletModalConfig;\n      } else {\n        // default config for solana dapp modal\n        this.modalConfig = defaultSolanaDappModalConfig;\n      }\n    } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.EIP155) {\n      if (options.authMode === \"WALLET\") {\n        // default config for evm wallet modal\n        this.modalConfig = defaultEvmWalletModalConfig;\n      } else {\n        // default config for evm dapp modal\n        this.modalConfig = defaultEvmDappModalConfig;\n      }\n    } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.modalConfig = defaultOtherModalConfig;\n    } else {\n      throw new Error(`Invalid chainNamespace provided: ${providedChainConfig.chainNamespace}`);\n    }\n\n    // get userLanguage\n    const defaultLanguage = getUserLanguage(this.options.uiConfig?.defaultLanguage);\n\n    this.loginModal = new LoginModal({\n      theme: this.options.uiConfig?.theme,\n      appName: this.options.uiConfig?.appName || \"blockchain\",\n      appLogo: this.options.uiConfig?.appLogo || \"\",\n      adapterListener: this,\n      displayErrorsOnModal: this.options.uiConfig?.displayErrorsOnModal,\n      defaultLanguage,\n      modalZIndex: this.options.uiConfig?.modalZIndex || \"99998\",\n      web3AuthNetwork: this.options.web3AuthNetwork,\n      loginGridCol: this.options.uiConfig?.loginGridCol || 3,\n      primaryButton: this.options.uiConfig?.primaryButton || \"socialLogin\",\n    });\n    this.subscribeToLoginModalEvents();\n  }\n\n  public async initModal(params?: { modalConfig?: Record<WALLET_ADAPTER_TYPE, ModalConfig> }): Promise<void> {\n    super.checkInitRequirements();\n    await this.loginModal.initModal();\n    const providedChainConfig = this.options.chainConfig;\n\n    // merge default adapters with the custom configured adapters.\n    const allAdapters = [...new Set([...Object.keys(this.modalConfig.adapters || {}), ...Object.keys(this.walletAdapters)])];\n\n    const adapterConfigurationPromises = allAdapters.map(async (adapterName) => {\n      // start with the default config of adapter.\n      let adapterConfig = this.modalConfig.adapters?.[adapterName] || {\n        label: adapterName,\n        showOnModal: true,\n        showOnMobile: true,\n        showOnDesktop: true,\n      };\n\n      // override the default config of adapter if some config is being provided by the user.\n      if (params?.modalConfig?.[adapterName]) {\n        adapterConfig = { ...adapterConfig, ...params.modalConfig[adapterName] };\n      }\n      (this.modalConfig.adapters as Record<WALLET_ADAPTER_TYPE, ModalConfig>)[adapterName] = adapterConfig as ModalConfig;\n\n      // check if adapter is configured/added by user and exist in walletAdapters map.\n      const adapter = this.walletAdapters[adapterName];\n      log.debug(\"adapter config\", adapterName, this.modalConfig.adapters?.[adapterName].showOnModal, adapter);\n\n      // if adapter is not custom configured then check if it is available in default adapters.\n      // and if adapter is not hidden by user\n      if (!adapter && this.modalConfig.adapters?.[adapterName].showOnModal) {\n        // if adapter is not configured and some default configuration is available, use it.\n        const ad = await getDefaultAdapterModule({\n          name: adapterName,\n          customChainConfig: this.options.chainConfig,\n          clientId: this.options.clientId,\n          sessionTime: this.options.sessionTime,\n          web3AuthNetwork: this.options.web3AuthNetwork,\n        });\n\n        this.walletAdapters[adapterName] = ad;\n        return adapterName;\n      } else if (adapter?.type === ADAPTER_CATEGORY.IN_APP || adapter?.type === ADAPTER_CATEGORY.EXTERNAL || adapterName === this.cachedAdapter) {\n        if (!this.modalConfig.adapters?.[adapterName].showOnModal) return;\n        // add client id to adapter, same web3auth client id can be used in adapter.\n        // this id is being overridden if user is also passing client id in adapter's constructor.\n        this.walletAdapters[adapterName].setAdapterSettings({\n          clientId: this.options.clientId,\n          sessionTime: this.options.sessionTime,\n          web3AuthNetwork: this.options.web3AuthNetwork,\n        });\n\n        // if adapter doesn't have any chainConfig then we will set the chainConfig based of passed chainNamespace\n        // and chainNamespace.\n        if (!adapter.chainConfigProxy) {\n          const chainConfig = {\n            ...getChainConfig(providedChainConfig.chainNamespace, this.coreOptions.chainConfig?.chainId),\n            ...this.coreOptions.chainConfig,\n          } as CustomChainConfig;\n          this.walletAdapters[adapterName].setAdapterSettings({ chainConfig });\n        }\n\n        if (adapterName === WALLET_ADAPTERS.OPENLOGIN) {\n          const openloginAdapter = this.walletAdapters[adapterName] as OpenloginAdapter;\n          if (!openloginAdapter.privateKeyProvider) {\n            const currentPrivateKeyProvider = await getPrivateKeyProvider(openloginAdapter.chainConfigProxy as CustomChainConfig);\n            openloginAdapter.setAdapterSettings({ privateKeyProvider: currentPrivateKeyProvider });\n          }\n        }\n\n        return adapterName;\n      }\n    });\n\n    let adapterNames = await Promise.all(adapterConfigurationPromises);\n    const hasInAppWallets = Object.values(this.walletAdapters).some((adapter) => {\n      if (adapter.type !== ADAPTER_CATEGORY.IN_APP) return false;\n      if (this.modalConfig.adapters?.[adapter.name]?.showOnModal !== true) return false;\n      if (!this.modalConfig.adapters?.[adapter.name]?.loginMethods) return true;\n      const mergedLoginMethods = getAdapterSocialLogins(\n        adapter.name,\n        this.walletAdapters[adapter.name],\n        (this.modalConfig.adapters as Record<WALLET_ADAPTER_TYPE, ModalConfig>)[adapter.name]?.loginMethods\n      );\n      if (Object.values(mergedLoginMethods).some((method: LoginMethodConfig[keyof LoginMethodConfig]) => method.showOnModal)) return true;\n      return false;\n    });\n    log.debug(hasInAppWallets, this.walletAdapters, adapterNames, \"hasInAppWallets\");\n\n    // if both wc1 and wc2 are configured, give precedence to wc2.\n    if (this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1] && this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V2]) {\n      delete this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1];\n      adapterNames = adapterNames.filter((ad) => ad !== WALLET_ADAPTERS.WALLET_CONNECT_V1);\n    }\n    // Now, initialize the adapters.\n    const initPromises = adapterNames.map(async (adapterName) => {\n      if (!adapterName) return;\n      try {\n        const adapter = this.walletAdapters[adapterName];\n        // only initialize a external adapter here if it is a cached adapter.\n        if (this.cachedAdapter !== adapterName && adapter.type === ADAPTER_CATEGORY.EXTERNAL) {\n          return;\n        }\n        // in-app wallets or cached wallet (being connected or already connected) are initialized first.\n        // if adapter is configured thn only initialize in app or cached adapter.\n        // external wallets are initialized on INIT_EXTERNAL_WALLET event.\n        this.subscribeToAdapterEvents(adapter);\n        if (adapter.status === ADAPTER_STATUS.NOT_READY) await adapter.init({ autoConnect: this.cachedAdapter === adapterName });\n        // note: not adding cachedWallet to modal if it is external wallet.\n        // adding it later if no in-app wallets are available.\n        if (adapter.type === ADAPTER_CATEGORY.IN_APP) {\n          this.initializeInAppWallet(adapterName);\n        }\n      } catch (error) {\n        log.error(error, \"error while initializing adapter\");\n      }\n    });\n\n    this.commonJRPCProvider = await CommonJRPCProvider.getProviderInstance({ chainConfig: this.coreOptions.chainConfig as CustomChainConfig });\n    this.status = ADAPTER_STATUS.READY;\n    await Promise.all(initPromises);\n\n    const hasExternalWallets = allAdapters.some((adapterName) => {\n      return this.walletAdapters[adapterName]?.type === ADAPTER_CATEGORY.EXTERNAL && this.modalConfig.adapters?.[adapterName].showOnModal;\n    });\n\n    if (hasExternalWallets) {\n      this.loginModal.initExternalWalletContainer();\n    }\n\n    // variable to check if we have any in app wallets\n    // currently all default in app and external wallets can be hidden or shown based on config.\n    if (!hasInAppWallets && hasExternalWallets) {\n      // if no in app wallet is available then initialize external wallets in modal\n      await this.initExternalWalletAdapters(false, { showExternalWalletsOnly: true });\n    }\n  }\n\n  public async connect(): Promise<SafeEventEmitterProvider | null> {\n    // if (!this.loginModal.initialized) throw new Error(\"Login modal is not initialized\");\n    // if already connected return provider\n    if (this.connectedAdapterName && this.status === ADAPTER_STATUS.CONNECTED && this.provider) return this.provider;\n    this.loginModal.open();\n    return new Promise((resolve, reject) => {\n      this.once(ADAPTER_EVENTS.CONNECTED, () => {\n        return resolve(this.provider);\n      });\n      this.once(ADAPTER_EVENTS.ERRORED, (err: unknown) => {\n        return reject(err);\n      });\n    });\n  }\n\n  private async initExternalWalletAdapters(externalWalletsInitialized: boolean, options?: { showExternalWalletsOnly: boolean }): Promise<void> {\n    if (externalWalletsInitialized) return;\n    const adaptersConfig: Record<string, BaseAdapterConfig> = {};\n    Object.keys(this.walletAdapters).forEach(async (adapterName) => {\n      const adapter = this.walletAdapters[adapterName];\n      if (adapter?.type === ADAPTER_CATEGORY.EXTERNAL) {\n        log.debug(\"init external wallet\", this.cachedAdapter, adapterName);\n        this.subscribeToAdapterEvents(adapter);\n        // we are not initializing cached adapter here as it is already being initialized in initModal before.\n        if (this.cachedAdapter === adapterName) {\n          return;\n        }\n        if (adapter.status === ADAPTER_STATUS.NOT_READY) {\n          await adapter\n            .init({ autoConnect: this.cachedAdapter === adapterName })\n            .then(() => {\n              adaptersConfig[adapterName] = (this.modalConfig.adapters as Record<WALLET_ADAPTER_TYPE, ModalConfig>)[adapterName];\n              this.loginModal.addWalletLogins(adaptersConfig, { showExternalWalletsOnly: !!options?.showExternalWalletsOnly });\n              return undefined;\n            })\n            .catch((error) => log.error(error, \"error while initializing adapter\"));\n        } else if (adapter.status === ADAPTER_STATUS.READY) {\n          adaptersConfig[adapterName] = (this.modalConfig.adapters as Record<WALLET_ADAPTER_TYPE, ModalConfig>)[adapterName];\n          this.loginModal.addWalletLogins(adaptersConfig, { showExternalWalletsOnly: !!options?.showExternalWalletsOnly });\n        }\n      }\n    });\n  }\n\n  private initializeInAppWallet(adapterName: string): void {\n    log.info(\"adapterInitResults\", adapterName);\n    if (this.walletAdapters[adapterName].type === ADAPTER_CATEGORY.IN_APP) {\n      this.loginModal.addSocialLogins(\n        adapterName,\n        getAdapterSocialLogins(\n          adapterName,\n          this.walletAdapters[adapterName],\n          (this.modalConfig.adapters as Record<WALLET_ADAPTER_TYPE, ModalConfig>)[adapterName]?.loginMethods\n        ),\n        this.options.uiConfig?.loginMethodsOrder || OPENLOGIN_PROVIDERS,\n        {\n          ...this.options.uiConfig,\n          loginGridCol: this.options.uiConfig?.loginGridCol || 3,\n          primaryButton: this.options.uiConfig?.primaryButton || \"socialLogin\",\n        }\n      );\n    }\n  }\n\n  private subscribeToLoginModalEvents(): void {\n    this.loginModal.on(LOGIN_MODAL_EVENTS.LOGIN, async (params: { adapter: WALLET_ADAPTER_TYPE; loginParams: unknown }) => {\n      try {\n        await this.connectTo<unknown>(params.adapter, params.loginParams);\n      } catch (error) {\n        log.error(`Error while connecting to adapter: ${params.adapter}`, error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.INIT_EXTERNAL_WALLETS, async (params: { externalWalletsInitialized: boolean }) => {\n      await this.initExternalWalletAdapters(params.externalWalletsInitialized);\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.DISCONNECT, async () => {\n      try {\n        await this.logout();\n      } catch (error) {\n        log.error(`Error while disconnecting`, error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, async (visibility: boolean) => {\n      log.debug(\"is login modal visible\", visibility);\n      this.emit(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, visibility);\n      const adapter = this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V2] || this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1];\n      if (adapter) {\n        const walletConnectStatus = adapter?.status;\n        log.debug(\"trying refreshing wc session\", visibility, walletConnectStatus);\n        if (visibility && (walletConnectStatus === ADAPTER_STATUS.READY || walletConnectStatus === ADAPTER_STATUS.CONNECTING)) {\n          log.debug(\"refreshing wc session\");\n\n          // refreshing session for wallet connect whenever modal is opened.\n          try {\n            adapter.connect();\n          } catch (error) {\n            log.error(`Error while disconnecting to wallet connect in core`, error);\n          }\n        }\n      }\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}