{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { CustomError } from 'ts-custom-error';\nimport loglevel from 'loglevel';\nimport { OpenloginSessionManager } from '@toruslabs/openlogin-session-manager';\nimport { base64url, safeatob, OPENLOGIN_NETWORK, UX_MODE, BrowserStorage, jsonToBase64 } from '@toruslabs/openlogin-utils';\nimport { BroadcastChannel } from '@toruslabs/broadcast-channel';\nimport { EventEmitter } from 'events';\nimport { getPublic, sign } from '@toruslabs/eccrypto';\nimport { keccak256 } from '@toruslabs/metadata-helpers';\nclass OpenloginError extends CustomError {\n  constructor(code, message) {\n    // takes care of stack and proto\n    super(message);\n    _defineProperty(this, \"code\", void 0);\n    _defineProperty(this, \"message\", void 0);\n    this.code = code;\n    this.message = message || \"\";\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", {\n      value: \"OpenloginError\"\n    });\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message\n    };\n  }\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\nclass InitializationError extends OpenloginError {\n  constructor(code, message) {\n    // takes care of stack and proto\n    super(code, message);\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", {\n      value: \"InitializationError\"\n    });\n  }\n  static fromCode(code) {\n    let extraMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    return new InitializationError(code, `${InitializationError.messages[code]}, ${extraMessage}`);\n  }\n  static invalidParams() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return InitializationError.fromCode(5001, extraMessage);\n  }\n  static notInitialized() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return InitializationError.fromCode(5002, extraMessage);\n  }\n}\n/**\n * login errors\n */\n_defineProperty(InitializationError, \"messages\", {\n  5000: \"Custom\",\n  5001: \"Invalid constructor params\",\n  5002: \"SDK not initialized. please call init first\"\n});\nclass LoginError extends OpenloginError {\n  constructor(code, message) {\n    // takes care of stack and proto\n    super(code, message);\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", {\n      value: \"LoginError\"\n    });\n  }\n  static fromCode(code) {\n    let extraMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    return new LoginError(code, `${LoginError.messages[code]}, ${extraMessage}`);\n  }\n  static invalidLoginParams() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return LoginError.fromCode(5111, extraMessage);\n  }\n  static userNotLoggedIn() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return LoginError.fromCode(5112, extraMessage);\n  }\n  static popupClosed() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return LoginError.fromCode(5113, extraMessage);\n  }\n  static loginFailed() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return LoginError.fromCode(5114, extraMessage);\n  }\n}\n_defineProperty(LoginError, \"messages\", {\n  5000: \"Custom\",\n  5111: \"Invalid login params\",\n  5112: \"User not logged in.\",\n  5113: \"login popup has been closed by the user\",\n  5114: \"Login failed\"\n});\nconst log = loglevel.getLogger(\"openlogin\");\nlog.setLevel(\"error\");\n\n// don't use destructuring for process.env cause it messes up webpack env plugin\nconst version = \"4.7.0\";\nasync function whitelistUrl(clientId, appKey, origin) {\n  const appKeyBuf = Buffer.from(appKey.padStart(64, \"0\"), \"hex\");\n  if (base64url.encode(getPublic(appKeyBuf)) !== clientId) throw new Error(\"appKey mismatch\");\n  const sig = await sign(appKeyBuf, keccak256(Buffer.from(origin, \"utf8\")));\n  return base64url.encode(sig);\n}\nfunction getHashQueryParams() {\n  let replaceUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  const result = {};\n  const url = new URL(window.location.href);\n  url.searchParams.forEach((value, key) => {\n    if (key !== \"result\") {\n      result[key] = value;\n    }\n  });\n  const queryResult = url.searchParams.get(\"result\");\n  if (queryResult) {\n    try {\n      const queryParams = JSON.parse(safeatob(queryResult));\n      Object.keys(queryParams).forEach(key => {\n        result[key] = queryParams[key];\n      });\n    } catch (error) {\n      log.error(error);\n    }\n  }\n  const hash = url.hash.substring(1);\n  const hashUrl = new URL(`${window.location.origin}/?${hash}`);\n  hashUrl.searchParams.forEach((value, key) => {\n    if (key !== \"result\") {\n      result[key] = value;\n    }\n  });\n  const hashResult = hashUrl.searchParams.get(\"result\");\n  if (hashResult) {\n    try {\n      const hashParams = JSON.parse(safeatob(hashResult));\n      Object.keys(hashParams).forEach(key => {\n        result[key] = hashParams[key];\n      });\n    } catch (error) {\n      log.error(error);\n    }\n  }\n  if (replaceUrl) {\n    const cleanUrl = window.location.origin + window.location.pathname;\n    window.history.replaceState(null, \"\", cleanUrl);\n  }\n  return result;\n}\nfunction constructURL(params) {\n  const {\n    baseURL,\n    query,\n    hash\n  } = params;\n  const url = new URL(baseURL);\n  if (query) {\n    Object.keys(query).forEach(key => {\n      url.searchParams.append(key, query[key]);\n    });\n  }\n  if (hash) {\n    const h = new URL(constructURL({\n      baseURL,\n      query: hash\n    })).searchParams.toString();\n    url.hash = h;\n  }\n  return url.toString();\n}\nfunction getPopupFeatures() {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const w = 1200;\n  const h = 700;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\nclass PopupHandler extends EventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features\n    } = _ref;\n    super();\n    _defineProperty(this, \"url\", void 0);\n    _defineProperty(this, \"target\", void 0);\n    _defineProperty(this, \"features\", void 0);\n    _defineProperty(this, \"window\", void 0);\n    _defineProperty(this, \"windowTimer\", void 0);\n    _defineProperty(this, \"iClosedWindow\", void 0);\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures();\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n        if (!this.iClosedWindow) {\n          this.emit(\"close\");\n        }\n        this.iClosedWindow = false;\n        this.window = undefined;\n      }\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n  open() {\n    var _this$window;\n    this.window = window.open(this.url, this.target, this.features);\n    if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n  }\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url);\n    } else {\n      window.location.href = this.url;\n    }\n  }\n  async listenOnChannel(loginId) {\n    return new Promise((resolve, reject) => {\n      const bc = new BroadcastChannel(loginId, {\n        webWorkerSupport: false,\n        type: \"server\"\n      });\n      bc.addEventListener(\"message\", ev => {\n        this.close();\n        bc.close();\n        if (ev.error) {\n          reject(new Error(ev.error));\n        } else {\n          resolve(ev.data);\n        }\n      });\n    });\n  }\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nclass OpenLogin {\n  constructor(options) {\n    _defineProperty(this, \"state\", {});\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"versionSupportNetworks\", [OPENLOGIN_NETWORK.MAINNET, OPENLOGIN_NETWORK.CYAN, OPENLOGIN_NETWORK.AQUA]);\n    _defineProperty(this, \"sessionManager\", void 0);\n    _defineProperty(this, \"currentStorage\", void 0);\n    _defineProperty(this, \"_storageBaseKey\", \"openlogin_store\");\n    if (!options.clientId) throw InitializationError.invalidParams(\"clientId is required\");\n    if (!options.sdkUrl) {\n      if (options.network === OPENLOGIN_NETWORK.MAINNET) {\n        options.sdkUrl = \"https://app.openlogin.com\";\n      } else if (options.network === OPENLOGIN_NETWORK.CYAN) {\n        options.sdkUrl = \"https://cyan.openlogin.com\";\n      } else if (options.network === OPENLOGIN_NETWORK.TESTNET) {\n        options.sdkUrl = \"https://testing.openlogin.com\";\n      } else if (options.network === OPENLOGIN_NETWORK.AQUA) {\n        options.sdkUrl = \"https://aqua.openlogin.com\";\n      } else if (options.network === OPENLOGIN_NETWORK.DEVELOPMENT) {\n        options.sdkUrl = \"http://localhost:3000\";\n      }\n    }\n    if (!options.sdkUrl) {\n      throw InitializationError.invalidParams(\"network or sdk url\");\n    }\n    if (!options.redirectUrl) {\n      options.redirectUrl = `${window.location.protocol}//${window.location.host}${window.location.pathname}`;\n    }\n    if (!options.uxMode) options.uxMode = UX_MODE.REDIRECT;\n    if (typeof options.replaceUrlOnRedirect !== \"boolean\") options.replaceUrlOnRedirect = true;\n    if (!options.originData) options.originData = {};\n    if (!options.whiteLabel) options.whiteLabel = {};\n    if (!options.loginConfig) options.loginConfig = {};\n    if (!options.mfaSettings) options.mfaSettings = {};\n    if (!options.storageServerUrl) options.storageServerUrl = \"https://broadcast-server.tor.us\";\n    if (!options.storageKey) options.storageKey = \"local\";\n    if (!options.webauthnTransports) options.webauthnTransports = [\"internal\"];\n    if (!options.sessionTime) options.sessionTime = 86400;\n    this.options = options;\n  }\n  get privKey() {\n    return this.state.privKey ? this.state.privKey.padStart(64, \"0\") : \"\";\n  }\n  get coreKitKey() {\n    return this.state.coreKitKey ? this.state.coreKitKey.padStart(64, \"0\") : \"\";\n  }\n  get ed25519PrivKey() {\n    return this.state.ed25519PrivKey ? this.state.ed25519PrivKey.padStart(128, \"0\") : \"\";\n  }\n  get coreKitEd25519Key() {\n    return this.state.coreKitEd25519PrivKey ? this.state.coreKitEd25519PrivKey.padStart(128, \"0\") : \"\";\n  }\n  get sessionId() {\n    return this.state.sessionId || \"\";\n  }\n  get sessionNamespace() {\n    return this.options.sessionNamespace || \"\";\n  }\n  async init() {\n    // get sessionNamespace from the redirect result.\n    const params = getHashQueryParams(this.options.replaceUrlOnRedirect);\n    if (params.sessionNamespace) this.options.sessionNamespace = params.sessionNamespace;\n    const storageKey = this.options.sessionNamespace ? `${this._storageBaseKey}_${this.options.sessionNamespace}` : this._storageBaseKey;\n    this.currentStorage = BrowserStorage.getInstance(storageKey, this.options.storageKey);\n    const sessionId = this.currentStorage.get(\"sessionId\");\n    this.sessionManager = new OpenloginSessionManager({\n      sessionServerBaseUrl: this.options.storageServerUrl,\n      sessionNamespace: this.options.sessionNamespace,\n      sessionTime: this.options.sessionTime,\n      sessionId\n    });\n    if (this.options.network === OPENLOGIN_NETWORK.TESTNET) {\n      // using console log because it shouldn't be affected by loglevel config\n      // eslint-disable-next-line no-console\n      console.log(\"%c WARNING! You are on testnet. Please set network: 'mainnet' in production\", \"color: #FF0000\");\n    }\n    if (params.error) {\n      throw LoginError.loginFailed(params.error);\n    }\n    if (params.sessionId) {\n      this.currentStorage.set(\"sessionId\", params.sessionId);\n      this.sessionManager.sessionKey = params.sessionId;\n    }\n    if (this.sessionManager.sessionKey) {\n      const data = await this._authorizeSession();\n      // Fill state with correct info from session\n      // If session is invalid all the data is unset here.\n      this.updateState(data);\n      if (Object.keys(data).length === 0) {\n        // If session is invalid, unset the sessionId from localStorage.\n        this.currentStorage.set(\"sessionId\", \"\");\n      }\n    }\n  }\n  async login(params) {\n    if (!params.loginProvider) throw LoginError.invalidLoginParams(`loginProvider is required`);\n    // in case of redirect mode, redirect url will be dapp specified\n    // in case of popup mode, redirect url will be sdk specified\n    const defaultParams = {\n      redirectUrl: this.options.redirectUrl\n    };\n    const loginParams = _objectSpread(_objectSpread({\n      loginProvider: params.loginProvider\n    }, defaultParams), params);\n    // do this in popup-window route\n    // loginParams.redirectUrl = this.options.uxMode === UX_MODE.POPUP ? `${this.options.sdkUrl}/popup-window` : loginParams.redirectUrl;\n    const base64url = this.getBaseUrl();\n    // construct the url to open for either popup/redirect mode and call request method to handle the rest\n    const loginId = await this.getLoginId(loginParams);\n    const configParams = {\n      loginId,\n      sessionNamespace: this.options.sessionNamespace\n    };\n    if (this.options.uxMode === UX_MODE.REDIRECT) {\n      const loginUrl = constructURL({\n        baseURL: base64url,\n        hash: {\n          b64Params: jsonToBase64(configParams)\n        }\n      });\n      window.location.href = loginUrl;\n      return undefined;\n    }\n    return new Promise((resolve, reject) => {\n      const loginUrl = constructURL({\n        baseURL: base64url,\n        hash: {\n          b64Params: jsonToBase64(configParams)\n        }\n      });\n      const currentWindow = new PopupHandler({\n        url: loginUrl\n      });\n      currentWindow.on(\"close\", () => {\n        reject(LoginError.popupClosed());\n      });\n      currentWindow.listenOnChannel(loginId).then(_ref => {\n        let {\n          sessionId,\n          sessionNamespace\n        } = _ref;\n        this.sessionManager.sessionKey = sessionId;\n        this.options.sessionNamespace = sessionNamespace;\n        this.currentStorage.set(\"sessionId\", sessionId);\n        return this.sessionManager.authorizeSession();\n      }).then(sessionData => {\n        this.updateState(sessionData);\n        return resolve({\n          privKey: this.privKey\n        });\n      }).catch(reject);\n      currentWindow.open();\n    });\n  }\n  async logout() {\n    if (!this.sessionManager.sessionKey) throw LoginError.userNotLoggedIn();\n    await this.sessionManager.invalidateSession();\n    this.updateState({\n      privKey: \"\",\n      coreKitKey: \"\",\n      coreKitEd25519PrivKey: \"\",\n      ed25519PrivKey: \"\",\n      walletKey: \"\",\n      oAuthPrivateKey: \"\",\n      tKey: \"\",\n      userInfo: {\n        name: \"\",\n        profileImage: \"\",\n        dappShare: \"\",\n        idToken: \"\",\n        oAuthIdToken: \"\",\n        oAuthAccessToken: \"\",\n        appState: \"\",\n        email: \"\",\n        verifier: \"\",\n        verifierId: \"\",\n        aggregateVerifier: \"\",\n        typeOfLogin: \"\"\n      }\n    });\n    this.currentStorage.set(\"sessionId\", \"\");\n  }\n  getUserInfo() {\n    if (!this.sessionManager.sessionKey) {\n      throw LoginError.userNotLoggedIn();\n    }\n    return this.state.userInfo;\n  }\n  async getLoginId(loginParams) {\n    if (!this.sessionManager) throw InitializationError.notInitialized();\n    const dataObject = {\n      options: this.options,\n      params: loginParams\n    };\n    const loginId = OpenloginSessionManager.generateRandomSessionKey();\n    const loginSessionMgr = new OpenloginSessionManager({\n      sessionServerBaseUrl: this.options.storageServerUrl,\n      sessionNamespace: this.options.sessionNamespace,\n      sessionTime: 600,\n      sessionId: loginId\n    });\n    await loginSessionMgr.createSession(JSON.parse(JSON.stringify(dataObject)));\n    return loginId;\n  }\n  async _authorizeSession() {\n    try {\n      if (!this.sessionManager.sessionKey) return {};\n      const result = await this.sessionManager.authorizeSession();\n      return result;\n    } catch (err) {\n      loglevel.error(\"authorization failed\", err);\n      return {};\n    }\n  }\n  updateState(data) {\n    this.state = _objectSpread(_objectSpread({}, this.state), data);\n  }\n  getBaseUrl() {\n    if (this.versionSupportNetworks.includes(this.options.network)) {\n      return `${this.options.sdkUrl}/v${version.split(\".\")[0]}/start`;\n    }\n    return `${this.options.sdkUrl}/start`;\n  }\n}\nexport { InitializationError, LoginError, OpenloginError, constructURL, OpenLogin as default, getHashQueryParams, getPopupFeatures, log as loglevel, version, whitelistUrl };","map":{"version":3,"names":["OpenloginError","CustomError","constructor","code","message","_defineProperty","Object","defineProperty","value","toJSON","name","toString","JSON","stringify","InitializationError","fromCode","extraMessage","arguments","length","undefined","messages","invalidParams","notInitialized","LoginError","invalidLoginParams","userNotLoggedIn","popupClosed","loginFailed","log","loglevel","getLogger","setLevel","version","whitelistUrl","clientId","appKey","origin","appKeyBuf","Buffer","from","padStart","base64url","encode","getPublic","Error","sig","sign","keccak256","getHashQueryParams","replaceUrl","result","url","URL","window","location","href","searchParams","forEach","key","queryResult","get","queryParams","parse","safeatob","keys","error","hash","substring","hashUrl","hashResult","hashParams","cleanUrl","pathname","history","replaceState","constructURL","params","baseURL","query","append","h","getPopupFeatures","dualScreenLeft","screenLeft","screenX","dualScreenTop","screenTop","screenY","w","width","innerWidth","document","documentElement","clientWidth","screen","height","innerHeight","clientHeight","systemZoom","left","Math","abs","top","features","PopupHandler","EventEmitter","_ref","target","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","closed","clearInterval","emit","open","_this$window","focus","close","redirect","locationReplaceOnRedirect","replace","listenOnChannel","loginId","Promise","resolve","reject","bc","BroadcastChannel","webWorkerSupport","type","addEventListener","ev","data","OpenLogin","options","OPENLOGIN_NETWORK","MAINNET","CYAN","AQUA","sdkUrl","network","TESTNET","DEVELOPMENT","redirectUrl","protocol","host","uxMode","UX_MODE","REDIRECT","replaceUrlOnRedirect","originData","whiteLabel","loginConfig","mfaSettings","storageServerUrl","storageKey","webauthnTransports","sessionTime","privKey","state","coreKitKey","ed25519PrivKey","coreKitEd25519Key","coreKitEd25519PrivKey","sessionId","sessionNamespace","init","_storageBaseKey","currentStorage","BrowserStorage","getInstance","sessionManager","OpenloginSessionManager","sessionServerBaseUrl","console","set","sessionKey","_authorizeSession","updateState","login","loginProvider","defaultParams","loginParams","_objectSpread","getBaseUrl","getLoginId","configParams","loginUrl","b64Params","jsonToBase64","currentWindow","on","then","authorizeSession","sessionData","catch","logout","invalidateSession","walletKey","oAuthPrivateKey","tKey","userInfo","profileImage","dappShare","idToken","oAuthIdToken","oAuthAccessToken","appState","email","verifier","verifierId","aggregateVerifier","typeOfLogin","getUserInfo","dataObject","generateRandomSessionKey","loginSessionMgr","createSession","err","versionSupportNetworks","includes","split"],"sources":["/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@toruslabs/openlogin/src/errors.ts","/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@toruslabs/openlogin/src/loglevel.ts","/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@toruslabs/openlogin/src/utils.ts","/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@toruslabs/openlogin/src/PopupHandler.ts","/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@toruslabs/openlogin/src/OpenLogin.ts"],"sourcesContent":["import { CustomError } from \"ts-custom-error\";\n\nexport interface IOpenloginError extends CustomError {\n  code: number;\n  message: string;\n  toString(): string;\n}\n\nexport type ErrorCodes = {\n  [key: number]: string;\n};\n\nexport abstract class OpenloginError extends CustomError implements IOpenloginError {\n  code: number;\n\n  message: string;\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(message);\n\n    this.code = code;\n    this.message = message || \"\";\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"OpenloginError\" });\n  }\n\n  toJSON(): IOpenloginError {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n    };\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nexport class InitializationError extends OpenloginError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5001: \"Invalid constructor params\",\n    5002: \"SDK not initialized. please call init first\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"InitializationError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): OpenloginError {\n    return new InitializationError(code, `${InitializationError.messages[code]}, ${extraMessage}`);\n  }\n\n  public static invalidParams(extraMessage = \"\"): OpenloginError {\n    return InitializationError.fromCode(5001, extraMessage);\n  }\n\n  public static notInitialized(extraMessage = \"\"): OpenloginError {\n    return InitializationError.fromCode(5002, extraMessage);\n  }\n}\n\n/**\n * login errors\n */\n\nexport class LoginError extends OpenloginError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5111: \"Invalid login params\",\n    5112: \"User not logged in.\",\n    5113: \"login popup has been closed by the user\",\n    5114: \"Login failed\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"LoginError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): OpenloginError {\n    return new LoginError(code, `${LoginError.messages[code]}, ${extraMessage}`);\n  }\n\n  public static invalidLoginParams(extraMessage = \"\"): OpenloginError {\n    return LoginError.fromCode(5111, extraMessage);\n  }\n\n  public static userNotLoggedIn(extraMessage = \"\"): OpenloginError {\n    return LoginError.fromCode(5112, extraMessage);\n  }\n\n  public static popupClosed(extraMessage = \"\"): OpenloginError {\n    return LoginError.fromCode(5113, extraMessage);\n  }\n\n  public static loginFailed(extraMessage = \"\"): OpenloginError {\n    return LoginError.fromCode(5114, extraMessage);\n  }\n}\n","import loglevel from \"loglevel\";\n\nconst log = loglevel.getLogger(\"openlogin\");\n\nlog.setLevel(\"error\");\n\nexport default log;\n","import { getPublic, sign } from \"@toruslabs/eccrypto\";\nimport { keccak256 } from \"@toruslabs/metadata-helpers\";\nimport { base64url, safeatob } from \"@toruslabs/openlogin-utils\";\n\nimport log from \"./loglevel\";\n\n// don't use destructuring for process.env cause it messes up webpack env plugin\nexport const version = process.env.OPENLOGIN_VERSION;\n\nexport async function whitelistUrl(clientId: string, appKey: string, origin: string): Promise<string> {\n  const appKeyBuf = Buffer.from(appKey.padStart(64, \"0\"), \"hex\");\n  if (base64url.encode(getPublic(appKeyBuf)) !== clientId) throw new Error(\"appKey mismatch\");\n  const sig = await sign(appKeyBuf, keccak256(Buffer.from(origin, \"utf8\")));\n  return base64url.encode(sig);\n}\n\nexport function getHashQueryParams(replaceUrl = false): { sessionId?: string; sessionNamespace?: string; error?: string } {\n  const result: { sessionId?: string; sessionNamespace?: string; error?: string } = {};\n\n  const url = new URL(window.location.href);\n  url.searchParams.forEach((value, key) => {\n    if (key !== \"result\") {\n      result[key] = value;\n    }\n  });\n  const queryResult = url.searchParams.get(\"result\");\n  if (queryResult) {\n    try {\n      const queryParams = JSON.parse(safeatob(queryResult));\n      Object.keys(queryParams).forEach((key) => {\n        result[key] = queryParams[key];\n      });\n    } catch (error) {\n      log.error(error);\n    }\n  }\n\n  const hash = url.hash.substring(1);\n  const hashUrl = new URL(`${window.location.origin}/?${hash}`);\n  hashUrl.searchParams.forEach((value, key) => {\n    if (key !== \"result\") {\n      result[key] = value;\n    }\n  });\n  const hashResult = hashUrl.searchParams.get(\"result\");\n\n  if (hashResult) {\n    try {\n      const hashParams = JSON.parse(safeatob(hashResult));\n      Object.keys(hashParams).forEach((key) => {\n        result[key] = hashParams[key];\n      });\n    } catch (error) {\n      log.error(error);\n    }\n  }\n\n  if (replaceUrl) {\n    const cleanUrl = window.location.origin + window.location.pathname;\n    window.history.replaceState(null, \"\", cleanUrl);\n  }\n\n  return result;\n}\n\nexport function constructURL(params: { baseURL: string; query?: Record<string, unknown>; hash?: Record<string, unknown> }): string {\n  const { baseURL, query, hash } = params;\n\n  const url = new URL(baseURL);\n  if (query) {\n    Object.keys(query).forEach((key) => {\n      url.searchParams.append(key, query[key] as string);\n    });\n  }\n  if (hash) {\n    const h = new URL(constructURL({ baseURL, query: hash })).searchParams.toString();\n    url.hash = h;\n  }\n  return url.toString();\n}\n\nexport function getPopupFeatures(): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const w = 1200;\n  const h = 700;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n","import { BroadcastChannel } from \"@toruslabs/broadcast-channel\";\nimport { EventEmitter } from \"events\";\n\nimport { getPopupFeatures } from \"./utils\";\n\nclass PopupHandler extends EventEmitter {\n  url: string;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  constructor({ url, target, features }: { url: string; target?: string; features?: string }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures();\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): void {\n    this.window = window.open(this.url, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url);\n    } else {\n      window.location.href = this.url;\n    }\n  }\n\n  async listenOnChannel(loginId: string): Promise<{ sessionId: string; sessionNamespace?: string }> {\n    return new Promise<{ sessionId: string; sessionNamespace?: string }>((resolve, reject) => {\n      const bc = new BroadcastChannel<{ error?: string; data?: { sessionId: string; sessionNamespace?: string } }>(loginId, {\n        webWorkerSupport: false,\n        type: \"server\",\n      });\n      bc.addEventListener(\"message\", (ev) => {\n        this.close();\n        bc.close();\n        if (ev.error) {\n          reject(new Error(ev.error));\n        } else {\n          resolve(ev.data);\n        }\n      });\n    });\n  }\n}\n\nexport default PopupHandler;\n","import { OpenloginSessionManager } from \"@toruslabs/openlogin-session-manager\";\nimport {\n  BaseLoginParams,\n  BaseRedirectParams,\n  BrowserStorage,\n  jsonToBase64,\n  LoginParams,\n  OPENLOGIN_NETWORK,\n  OPENLOGIN_NETWORK_TYPE,\n  OpenLoginOptions,\n  OpenloginSessionConfig,\n  OpenloginSessionData,\n  OpenloginUserInfo,\n  UX_MODE,\n} from \"@toruslabs/openlogin-utils\";\nimport log from \"loglevel\";\n\nimport { InitializationError, LoginError } from \"./errors\";\nimport PopupHandler from \"./PopupHandler\";\nimport { constructURL, getHashQueryParams, version } from \"./utils\";\n\nclass OpenLogin {\n  state: OpenloginSessionData = {};\n\n  options: OpenLoginOptions;\n\n  private versionSupportNetworks: OPENLOGIN_NETWORK_TYPE[] = [OPENLOGIN_NETWORK.MAINNET, OPENLOGIN_NETWORK.CYAN, OPENLOGIN_NETWORK.AQUA];\n\n  private sessionManager: OpenloginSessionManager<OpenloginSessionData>;\n\n  private currentStorage: BrowserStorage;\n\n  private _storageBaseKey = \"openlogin_store\";\n\n  constructor(options: OpenLoginOptions) {\n    if (!options.clientId) throw InitializationError.invalidParams(\"clientId is required\");\n    if (!options.sdkUrl) {\n      if (options.network === OPENLOGIN_NETWORK.MAINNET) {\n        options.sdkUrl = \"https://app.openlogin.com\";\n      } else if (options.network === OPENLOGIN_NETWORK.CYAN) {\n        options.sdkUrl = \"https://cyan.openlogin.com\";\n      } else if (options.network === OPENLOGIN_NETWORK.TESTNET) {\n        options.sdkUrl = \"https://testing.openlogin.com\";\n      } else if (options.network === OPENLOGIN_NETWORK.AQUA) {\n        options.sdkUrl = \"https://aqua.openlogin.com\";\n      } else if (options.network === OPENLOGIN_NETWORK.DEVELOPMENT) {\n        options.sdkUrl = \"http://localhost:3000\";\n      }\n    }\n    if (!options.sdkUrl) {\n      throw InitializationError.invalidParams(\"network or sdk url\");\n    }\n\n    if (!options.redirectUrl) {\n      options.redirectUrl = `${window.location.protocol}//${window.location.host}${window.location.pathname}`;\n    }\n\n    if (!options.uxMode) options.uxMode = UX_MODE.REDIRECT;\n    if (typeof options.replaceUrlOnRedirect !== \"boolean\") options.replaceUrlOnRedirect = true;\n    if (!options.originData) options.originData = {};\n    if (!options.whiteLabel) options.whiteLabel = {};\n    if (!options.loginConfig) options.loginConfig = {};\n    if (!options.mfaSettings) options.mfaSettings = {};\n    if (!options.storageServerUrl) options.storageServerUrl = \"https://broadcast-server.tor.us\";\n    if (!options.storageKey) options.storageKey = \"local\";\n    if (!options.webauthnTransports) options.webauthnTransports = [\"internal\"];\n    if (!options.sessionTime) options.sessionTime = 86400;\n\n    this.options = options;\n  }\n\n  get privKey(): string {\n    return this.state.privKey ? this.state.privKey.padStart(64, \"0\") : \"\";\n  }\n\n  get coreKitKey(): string {\n    return this.state.coreKitKey ? this.state.coreKitKey.padStart(64, \"0\") : \"\";\n  }\n\n  get ed25519PrivKey(): string {\n    return this.state.ed25519PrivKey ? this.state.ed25519PrivKey.padStart(128, \"0\") : \"\";\n  }\n\n  get coreKitEd25519Key(): string {\n    return this.state.coreKitEd25519PrivKey ? this.state.coreKitEd25519PrivKey.padStart(128, \"0\") : \"\";\n  }\n\n  get sessionId(): string {\n    return this.state.sessionId || \"\";\n  }\n\n  get sessionNamespace(): string {\n    return this.options.sessionNamespace || \"\";\n  }\n\n  async init(): Promise<void> {\n    // get sessionNamespace from the redirect result.\n    const params = getHashQueryParams(this.options.replaceUrlOnRedirect);\n    if (params.sessionNamespace) this.options.sessionNamespace = params.sessionNamespace;\n\n    const storageKey = this.options.sessionNamespace ? `${this._storageBaseKey}_${this.options.sessionNamespace}` : this._storageBaseKey;\n    this.currentStorage = BrowserStorage.getInstance(storageKey, this.options.storageKey);\n\n    const sessionId = this.currentStorage.get<string>(\"sessionId\");\n\n    this.sessionManager = new OpenloginSessionManager({\n      sessionServerBaseUrl: this.options.storageServerUrl,\n      sessionNamespace: this.options.sessionNamespace,\n      sessionTime: this.options.sessionTime,\n      sessionId,\n    });\n\n    if (this.options.network === OPENLOGIN_NETWORK.TESTNET) {\n      // using console log because it shouldn't be affected by loglevel config\n      // eslint-disable-next-line no-console\n      console.log(\"%c WARNING! You are on testnet. Please set network: 'mainnet' in production\", \"color: #FF0000\");\n    }\n\n    if (params.error) {\n      throw LoginError.loginFailed(params.error);\n    }\n\n    if (params.sessionId) {\n      this.currentStorage.set(\"sessionId\", params.sessionId);\n      this.sessionManager.sessionKey = params.sessionId;\n    }\n\n    if (this.sessionManager.sessionKey) {\n      const data = await this._authorizeSession();\n      // Fill state with correct info from session\n      // If session is invalid all the data is unset here.\n      this.updateState(data);\n      if (Object.keys(data).length === 0) {\n        // If session is invalid, unset the sessionId from localStorage.\n        this.currentStorage.set(\"sessionId\", \"\");\n      }\n    }\n  }\n\n  async login(params: LoginParams & Partial<BaseRedirectParams>): Promise<{ privKey: string }> {\n    if (!params.loginProvider) throw LoginError.invalidLoginParams(`loginProvider is required`);\n\n    // in case of redirect mode, redirect url will be dapp specified\n    // in case of popup mode, redirect url will be sdk specified\n    const defaultParams: BaseRedirectParams = {\n      redirectUrl: this.options.redirectUrl,\n    };\n\n    const loginParams: LoginParams = {\n      loginProvider: params.loginProvider,\n      ...defaultParams,\n      ...params,\n    };\n    // do this in popup-window route\n    // loginParams.redirectUrl = this.options.uxMode === UX_MODE.POPUP ? `${this.options.sdkUrl}/popup-window` : loginParams.redirectUrl;\n\n    const base64url = this.getBaseUrl();\n\n    // construct the url to open for either popup/redirect mode and call request method to handle the rest\n    const loginId = await this.getLoginId(loginParams);\n    const configParams: BaseLoginParams = {\n      loginId,\n      sessionNamespace: this.options.sessionNamespace,\n    };\n\n    if (this.options.uxMode === UX_MODE.REDIRECT) {\n      const loginUrl = constructURL({\n        baseURL: base64url,\n        hash: { b64Params: jsonToBase64(configParams) },\n      });\n      window.location.href = loginUrl;\n      return undefined;\n    }\n    return new Promise((resolve, reject) => {\n      const loginUrl = constructURL({\n        baseURL: base64url,\n        hash: { b64Params: jsonToBase64(configParams) },\n      });\n      const currentWindow = new PopupHandler({ url: loginUrl });\n\n      currentWindow.on(\"close\", () => {\n        reject(LoginError.popupClosed());\n      });\n\n      currentWindow\n        .listenOnChannel(loginId)\n        .then(({ sessionId, sessionNamespace }) => {\n          this.sessionManager.sessionKey = sessionId;\n          this.options.sessionNamespace = sessionNamespace;\n          this.currentStorage.set(\"sessionId\", sessionId);\n          return this.sessionManager.authorizeSession();\n        })\n        .then((sessionData: OpenloginSessionData) => {\n          this.updateState(sessionData);\n          return resolve({ privKey: this.privKey });\n        })\n        .catch(reject);\n\n      currentWindow.open();\n    });\n  }\n\n  async logout(): Promise<void> {\n    if (!this.sessionManager.sessionKey) throw LoginError.userNotLoggedIn();\n    await this.sessionManager.invalidateSession();\n    this.updateState({\n      privKey: \"\",\n      coreKitKey: \"\",\n      coreKitEd25519PrivKey: \"\",\n      ed25519PrivKey: \"\",\n      walletKey: \"\",\n      oAuthPrivateKey: \"\",\n      tKey: \"\",\n      userInfo: {\n        name: \"\",\n        profileImage: \"\",\n        dappShare: \"\",\n        idToken: \"\",\n        oAuthIdToken: \"\",\n        oAuthAccessToken: \"\",\n        appState: \"\",\n        email: \"\",\n        verifier: \"\",\n        verifierId: \"\",\n        aggregateVerifier: \"\",\n        typeOfLogin: \"\",\n      },\n    });\n\n    this.currentStorage.set(\"sessionId\", \"\");\n  }\n\n  getUserInfo(): OpenloginUserInfo {\n    if (!this.sessionManager.sessionKey) {\n      throw LoginError.userNotLoggedIn();\n    }\n    return this.state.userInfo;\n  }\n\n  async getLoginId(loginParams: LoginParams & Partial<BaseRedirectParams>): Promise<string> {\n    if (!this.sessionManager) throw InitializationError.notInitialized();\n    const dataObject: OpenloginSessionConfig = {\n      options: this.options,\n      params: loginParams,\n    };\n\n    const loginId = OpenloginSessionManager.generateRandomSessionKey();\n    const loginSessionMgr = new OpenloginSessionManager<OpenloginSessionConfig>({\n      sessionServerBaseUrl: this.options.storageServerUrl,\n      sessionNamespace: this.options.sessionNamespace,\n      sessionTime: 600, // each login key must be used with 10 mins (might be used at the end of popup redirect)\n      sessionId: loginId,\n    });\n\n    await loginSessionMgr.createSession(JSON.parse(JSON.stringify(dataObject)));\n\n    return loginId;\n  }\n\n  private async _authorizeSession(): Promise<OpenloginSessionData> {\n    try {\n      if (!this.sessionManager.sessionKey) return {};\n      const result = await this.sessionManager.authorizeSession();\n      return result;\n    } catch (err) {\n      log.error(\"authorization failed\", err);\n      return {};\n    }\n  }\n\n  private updateState(data: Partial<OpenloginSessionData>) {\n    this.state = { ...this.state, ...data };\n  }\n\n  private getBaseUrl(): string {\n    if (this.versionSupportNetworks.includes(this.options.network)) {\n      return `${this.options.sdkUrl}/v${version.split(\".\")[0]}/start`;\n    }\n    return `${this.options.sdkUrl}/start`;\n  }\n}\n\nexport default OpenLogin;\n"],"mappings":";;;;;;;;;AAYM,MAAgBA,cAAe,SAAQC,WAAW;EAKtDC,WAAmBA,CAAAC,IAAY,EAAEC,OAAgB;IAC/C;IACA,KAAK,CAACA,OAAO,CAAC;IAACC,eAAA;IAAAA,eAAA;IAEf,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,OAAO,GAAGA,OAAO,IAAI,EAAE;IAC5B;IACAE,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;MAAEC,KAAK,EAAE;IAAgB,CAAE,CAAC;EAClE;EAEAC,MAAMA,CAAA;IACJ,OAAO;MACLC,IAAI,EAAE,IAAI,CAACA,IAAI;MACfP,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,OAAO,EAAE,IAAI,CAACA;KACf;EACH;EAEAO,QAAQA,CAAA;IACN,OAAOC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACJ,MAAM,EAAE,CAAC;EACtC;AACD;AAEK,MAAOK,mBAAoB,SAAQd,cAAc;EAOrDE,WAAmBA,CAAAC,IAAY,EAAEC,OAAgB;IAC/C;IACA,KAAK,CAACD,IAAI,EAAEC,OAAO,CAAC;IAEpB;IACAE,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;MAAEC,KAAK,EAAE;IAAqB,CAAE,CAAC;EACvE;EAEO,OAAOO,QAAQA,CAACZ,IAAY,EAAmB;IAAA,IAAjBa,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IACpD,OAAO,IAAIH,mBAAmB,CAACX,IAAI,EAAK,GAAAW,mBAAmB,CAACM,QAAQ,CAACjB,IAAI,CAAM,KAAAa,YAAY,EAAE,CAAC;EAChG;EAEO,OAAOK,aAAaA,CAAA,EAAkB;IAAA,IAAjBL,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAC3C,OAAOH,mBAAmB,CAACC,QAAQ,CAAC,IAAI,EAAEC,YAAY,CAAC;EACzD;EAEO,OAAOM,cAAcA,CAAA,EAAkB;IAAA,IAAjBN,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAC5C,OAAOH,mBAAmB,CAACC,QAAQ,CAAC,IAAI,EAAEC,YAAY,CAAC;EACzD;;AAGF;;AAEG;AAFHX,eAAA,CA5BaS,mBAAoB,EACS;EACtC,IAAI,EAAE,QAAQ;EACd,IAAI,EAAE,4BAA4B;EAClC,IAAI,EAAE;CACP;AA2BG,MAAOS,UAAW,SAAQvB,cAAc;EAS5CE,WAAmBA,CAAAC,IAAY,EAAEC,OAAgB;IAC/C;IACA,KAAK,CAACD,IAAI,EAAEC,OAAO,CAAC;IAEpB;IACAE,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;MAAEC,KAAK,EAAE;IAAY,CAAE,CAAC;EAC9D;EAEO,OAAOO,QAAQA,CAACZ,IAAY,EAAmB;IAAA,IAAjBa,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IACpD,OAAO,IAAIM,UAAU,CAACpB,IAAI,EAAK,GAAAoB,UAAU,CAACH,QAAQ,CAACjB,IAAI,CAAM,KAAAa,YAAY,EAAE,CAAC;EAC9E;EAEO,OAAOQ,kBAAkBA,CAAA,EAAkB;IAAA,IAAjBR,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAChD,OAAOM,UAAU,CAACR,QAAQ,CAAC,IAAI,EAAEC,YAAY,CAAC;EAChD;EAEO,OAAOS,eAAeA,CAAA,EAAkB;IAAA,IAAjBT,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAC7C,OAAOM,UAAU,CAACR,QAAQ,CAAC,IAAI,EAAEC,YAAY,CAAC;EAChD;EAEO,OAAOU,WAAWA,CAAA,EAAkB;IAAA,IAAjBV,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IACzC,OAAOM,UAAU,CAACR,QAAQ,CAAC,IAAI,EAAEC,YAAY,CAAC;EAChD;EAEO,OAAOW,WAAWA,CAAA,EAAkB;IAAA,IAAjBX,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IACzC,OAAOM,UAAU,CAACR,QAAQ,CAAC,IAAI,EAAEC,YAAY,CAAC;EAChD;;gBAnCWO,UAAW,EACkB;EACtC,IAAI,EAAE,QAAQ;EACd,IAAI,EAAE,sBAAsB;EAC5B,IAAI,EAAE,qBAAqB;EAC3B,IAAI,EAAE,yCAAyC;EAC/C,IAAI,EAAE;CACP;AC7EH,MAAMK,GAAG,GAAGC,QAAQ,CAACC,SAAS,CAAC,WAAW;AAE1CF,GAAG,CAACG,QAAQ,CAAC,OAAO,CAAC;;ACErB;AACO,MAAMC,OAAO,GAAG;AAEhB,eAAeC,YAAYA,CAACC,QAAgB,EAAEC,MAAc,EAAEC,MAAc;EACjF,MAAMC,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC;EAC9D,IAAIC,SAAS,CAACC,MAAM,CAACC,SAAS,CAACN,SAAS,CAAC,CAAC,KAAKH,QAAQ,EAAE,MAAM,IAAIU,KAAK,CAAC,iBAAiB,CAAC;EAC3F,MAAMC,GAAG,GAAG,MAAMC,IAAI,CAACT,SAAS,EAAEU,SAAS,CAACT,MAAM,CAACC,IAAI,CAACH,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;EACzE,OAAOK,SAAS,CAACC,MAAM,CAACG,GAAG,CAAC;AAC9B;AAEgB,SAAAG,kBAAkBA,CAAA,EAAmB;EAAA,IAAlBC,UAAU,GAAAhC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EACnD,MAAMiC,MAAM,GAAsE,EAAE;EAEpF,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC;EACzCJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAAC,CAACjD,KAAK,EAAEkD,GAAG,KAAI;IACtC,IAAIA,GAAG,KAAK,QAAQ,EAAE;MACpBR,MAAM,CAACQ,GAAG,CAAC,GAAGlD,KAAK;IACpB;EACH,CAAC,CAAC;EACF,MAAMmD,WAAW,GAAGR,GAAG,CAACK,YAAY,CAACI,GAAG,CAAC,QAAQ,CAAC;EAClD,IAAID,WAAW,EAAE;IACf,IAAI;MACF,MAAME,WAAW,GAAGjD,IAAI,CAACkD,KAAK,CAACC,QAAQ,CAACJ,WAAW,CAAC,CAAC;MACrDrD,MAAM,CAAC0D,IAAI,CAACH,WAAW,CAAC,CAACJ,OAAO,CAAEC,GAAG,IAAI;QACvCR,MAAM,CAACQ,GAAG,CAAC,GAAGG,WAAW,CAACH,GAAG,CAAC;MAChC,CAAC,CAAC;KACH,CAAC,OAAOO,KAAK,EAAE;MACdrC,GAAG,CAACqC,KAAK,CAACA,KAAK,CAAC;IACjB;EACF;EAED,MAAMC,IAAI,GAAGf,GAAG,CAACe,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;EAClC,MAAMC,OAAO,GAAG,IAAIhB,GAAG,CAAI,GAAAC,MAAM,CAACC,QAAQ,CAAClB,MAAW,KAAA8B,IAAI,EAAE,CAAC;EAC7DE,OAAO,CAACZ,YAAY,CAACC,OAAO,CAAC,CAACjD,KAAK,EAAEkD,GAAG,KAAI;IAC1C,IAAIA,GAAG,KAAK,QAAQ,EAAE;MACpBR,MAAM,CAACQ,GAAG,CAAC,GAAGlD,KAAK;IACpB;EACH,CAAC,CAAC;EACF,MAAM6D,UAAU,GAAGD,OAAO,CAACZ,YAAY,CAACI,GAAG,CAAC,QAAQ,CAAC;EAErD,IAAIS,UAAU,EAAE;IACd,IAAI;MACF,MAAMC,UAAU,GAAG1D,IAAI,CAACkD,KAAK,CAACC,QAAQ,CAACM,UAAU,CAAC,CAAC;MACnD/D,MAAM,CAAC0D,IAAI,CAACM,UAAU,CAAC,CAACb,OAAO,CAAEC,GAAG,IAAI;QACtCR,MAAM,CAACQ,GAAG,CAAC,GAAGY,UAAU,CAACZ,GAAG,CAAC;MAC/B,CAAC,CAAC;KACH,CAAC,OAAOO,KAAK,EAAE;MACdrC,GAAG,CAACqC,KAAK,CAACA,KAAK,CAAC;IACjB;EACF;EAED,IAAIhB,UAAU,EAAE;IACd,MAAMsB,QAAQ,GAAGlB,MAAM,CAACC,QAAQ,CAAClB,MAAM,GAAGiB,MAAM,CAACC,QAAQ,CAACkB,QAAQ;IAClEnB,MAAM,CAACoB,OAAO,CAACC,YAAY,CAAC,IAAI,EAAE,EAAE,EAAEH,QAAQ,CAAC;EAChD;EAED,OAAOrB,MAAM;AACf;AAEM,SAAUyB,YAAYA,CAACC,MAA4F;EACvH,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEZ;EAAI,CAAE,GAAGU,MAAM;EAEvC,MAAMzB,GAAG,GAAG,IAAIC,GAAG,CAACyB,OAAO,CAAC;EAC5B,IAAIC,KAAK,EAAE;IACTxE,MAAM,CAAC0D,IAAI,CAACc,KAAK,CAAC,CAACrB,OAAO,CAAEC,GAAG,IAAI;MACjCP,GAAG,CAACK,YAAY,CAACuB,MAAM,CAACrB,GAAG,EAAEoB,KAAK,CAACpB,GAAG,CAAW,CAAC;IACpD,CAAC,CAAC;EACH;EACD,IAAIQ,IAAI,EAAE;IACR,MAAMc,CAAC,GAAG,IAAI5B,GAAG,CAACuB,YAAY,CAAC;MAAEE,OAAO;MAAEC,KAAK,EAAEZ;KAAM,CAAC,CAAC,CAACV,YAAY,CAAC7C,QAAQ,EAAE;IACjFwC,GAAG,CAACe,IAAI,GAAGc,CAAC;EACb;EACD,OAAO7B,GAAG,CAACxC,QAAQ,EAAE;AACvB;SAEgBsE,gBAAgBA,CAAA;EAC9B;EACA,MAAMC,cAAc,GAAG7B,MAAM,CAAC8B,UAAU,KAAKhE,SAAS,GAAGkC,MAAM,CAAC8B,UAAU,GAAG9B,MAAM,CAAC+B,OAAO;EAC3F,MAAMC,aAAa,GAAGhC,MAAM,CAACiC,SAAS,KAAKnE,SAAS,GAAGkC,MAAM,CAACiC,SAAS,GAAGjC,MAAM,CAACkC,OAAO;EAExF,MAAMC,CAAC,GAAG,IAAI;EACd,MAAMR,CAAC,GAAG,GAAG;EAEb,MAAMS,KAAK,GAAGpC,MAAM,CAACqC,UAAU,GAC3BrC,MAAM,CAACqC,UAAU,GACjBC,QAAQ,CAACC,eAAe,CAACC,WAAW,GACpCF,QAAQ,CAACC,eAAe,CAACC,WAAW,GACpCxC,MAAM,CAACyC,MAAM,CAACL,KAAK;EAEvB,MAAMM,MAAM,GAAG1C,MAAM,CAAC2C,WAAW,GAC7B3C,MAAM,CAAC2C,WAAW,GAClBL,QAAQ,CAACC,eAAe,CAACK,YAAY,GACrCN,QAAQ,CAACC,eAAe,CAACK,YAAY,GACrC5C,MAAM,CAACyC,MAAM,CAACC,MAAM;EAExB,MAAMG,UAAU,GAAG,CAAC,CAAC;EAErB,MAAMC,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAACZ,KAAK,GAAGD,CAAC,IAAI,CAAC,GAAGU,UAAU,GAAGhB,cAAc,CAAC;EACpE,MAAMoB,GAAG,GAAGF,IAAI,CAACC,GAAG,CAAC,CAACN,MAAM,GAAGf,CAAC,IAAI,CAAC,GAAGkB,UAAU,GAAGb,aAAa,CAAC;EACnE,MAAMkB,QAAQ,GAAgE,6DAAAvB,CAAC,GAAGkB,UAAU,UAAUV,CAAC,GAAGU,UAAkB,QAAAI,GAAY,SAAAH,IAAM;EAC9I,OAAOI,QAAQ;AACjB;ACtGA,MAAMC,YAAa,SAAQC,YAAY;EAarCvG,YAAAwG,IAAA,EAA0F;IAAA,IAA9E;MAAEvD,GAAG;MAAEwD,MAAM;MAAEJ;IAA+D,IAAAG,IAAA;IACxF,KAAK,EAAE;IAACrG,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IACR,IAAI,CAAC8C,GAAG,GAAGA,GAAG;IACd,IAAI,CAACwD,MAAM,GAAGA,MAAM,IAAI,QAAQ;IAChC,IAAI,CAACJ,QAAQ,GAAGA,QAAQ,IAAItB,gBAAgB,EAAE;IAC9C,IAAI,CAAC5B,MAAM,GAAGlC,SAAS;IACvB,IAAI,CAACyF,WAAW,GAAGzF,SAAS;IAC5B,IAAI,CAAC0F,aAAa,GAAG,KAAK;IAC1B,IAAI,CAACC,WAAW,EAAE;EACpB;EAEAA,WAAWA,CAAA;IACT,IAAI,CAACF,WAAW,GAAGG,MAAM,CACvBC,WAAW,CAAC,MAAK;MACf,IAAI,IAAI,CAAC3D,MAAM,IAAI,IAAI,CAACA,MAAM,CAAC4D,MAAM,EAAE;QACrCC,aAAa,CAAC,IAAI,CAACN,WAAW,CAAC;QAC/B,IAAI,CAAC,IAAI,CAACC,aAAa,EAAE;UACvB,IAAI,CAACM,IAAI,CAAC,OAAO,CAAC;QACnB;QACD,IAAI,CAACN,aAAa,GAAG,KAAK;QAC1B,IAAI,CAACxD,MAAM,GAAGlC,SAAS;MACxB;MACD,IAAI,IAAI,CAACkC,MAAM,KAAKlC,SAAS,EAAE+F,aAAa,CAAC,IAAI,CAACN,WAAW,CAAC;KAC/D,EAAE,GAAG,CAAC,CACR;EACH;EAEAQ,IAAIA,CAAA;IAAA,IAAAC,YAAA;IACF,IAAI,CAAChE,MAAM,GAAGA,MAAM,CAAC+D,IAAI,CAAC,IAAI,CAACjE,GAAG,EAAE,IAAI,CAACwD,MAAM,EAAE,IAAI,CAACJ,QAAQ,CAAC;IAC/D,KAAAc,YAAA,GAAI,IAAI,CAAChE,MAAM,cAAAgE,YAAA,KAAX,UAAAA,YAAA,CAAaC,KAAK,EAAE,IAAI,CAACjE,MAAM,CAACiE,KAAK,EAAE;EAC7C;EAEAC,KAAKA,CAAA;IACH,IAAI,CAACV,aAAa,GAAG,IAAI;IACzB,IAAI,IAAI,CAACxD,MAAM,EAAE,IAAI,CAACA,MAAM,CAACkE,KAAK,EAAE;EACtC;EAEAC,QAAQA,CAACC,yBAAkC;IACzC,IAAIA,yBAAyB,EAAE;MAC7BpE,MAAM,CAACC,QAAQ,CAACoE,OAAO,CAAC,IAAI,CAACvE,GAAG,CAAC;IAClC,OAAM;MACLE,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,IAAI,CAACJ,GAAG;IAChC;EACH;EAEA,MAAMwE,eAAeA,CAACC,OAAe;IACnC,OAAO,IAAIC,OAAO,CAAmD,CAACC,OAAO,EAAEC,MAAM,KAAI;MACvF,MAAMC,EAAE,GAAG,IAAIC,gBAAgB,CAA8EL,OAAO,EAAE;QACpHM,gBAAgB,EAAE,KAAK;QACvBC,IAAI,EAAE;MACP,EAAC;MACFH,EAAE,CAACI,gBAAgB,CAAC,SAAS,EAAGC,EAAE,IAAI;QACpC,IAAI,CAACd,KAAK,EAAE;QACZS,EAAE,CAACT,KAAK,EAAE;QACV,IAAIc,EAAE,CAACpE,KAAK,EAAE;UACZ8D,MAAM,CAAC,IAAInF,KAAK,CAACyF,EAAE,CAACpE,KAAK,CAAC,CAAC;QAC5B,OAAM;UACL6D,OAAO,CAACO,EAAE,CAACC,IAAI,CAAC;QACjB;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;AACD;;;;;;;;;;;;;;;;;;;;;;AC3DD,MAAMC,SAAS;EAabrI,YAAYsI,OAAyB;IAAAnI,eAAA,gBAZP,EAAE;IAAAA,eAAA;IAAAA,eAAA,CAI2B,iCAACoI,iBAAiB,CAACC,OAAO,EAAED,iBAAiB,CAACE,IAAI,EAAEF,iBAAiB,CAACG,IAAI,CAAC;IAAAvI,eAAA;IAAAA,eAAA;IAAAA,eAAA,0BAM5G,iBAAiB;IAGzC,IAAI,CAACmI,OAAO,CAACtG,QAAQ,EAAE,MAAMpB,mBAAmB,CAACO,aAAa,CAAC,sBAAsB,CAAC;IACtF,IAAI,CAACmH,OAAO,CAACK,MAAM,EAAE;MACnB,IAAIL,OAAO,CAACM,OAAO,KAAKL,iBAAiB,CAACC,OAAO,EAAE;QACjDF,OAAO,CAACK,MAAM,GAAG,2BAA2B;OAC7C,MAAM,IAAIL,OAAO,CAACM,OAAO,KAAKL,iBAAiB,CAACE,IAAI,EAAE;QACrDH,OAAO,CAACK,MAAM,GAAG,4BAA4B;OAC9C,MAAM,IAAIL,OAAO,CAACM,OAAO,KAAKL,iBAAiB,CAACM,OAAO,EAAE;QACxDP,OAAO,CAACK,MAAM,GAAG,+BAA+B;OACjD,MAAM,IAAIL,OAAO,CAACM,OAAO,KAAKL,iBAAiB,CAACG,IAAI,EAAE;QACrDJ,OAAO,CAACK,MAAM,GAAG,4BAA4B;OAC9C,MAAM,IAAIL,OAAO,CAACM,OAAO,KAAKL,iBAAiB,CAACO,WAAW,EAAE;QAC5DR,OAAO,CAACK,MAAM,GAAG,uBAAuB;MACzC;IACF;IACD,IAAI,CAACL,OAAO,CAACK,MAAM,EAAE;MACnB,MAAM/H,mBAAmB,CAACO,aAAa,CAAC,oBAAoB,CAAC;IAC9D;IAED,IAAI,CAACmH,OAAO,CAACS,WAAW,EAAE;MACxBT,OAAO,CAACS,WAAW,GAAG,GAAG5F,MAAM,CAACC,QAAQ,CAAC4F,QAAa,KAAA7F,MAAM,CAACC,QAAQ,CAAC6F,IAAO,GAAA9F,MAAM,CAACC,QAAQ,CAACkB,QAAU;IACxG;IAED,IAAI,CAACgE,OAAO,CAACY,MAAM,EAAEZ,OAAO,CAACY,MAAM,GAAGC,OAAO,CAACC,QAAQ;IACtD,IAAI,OAAOd,OAAO,CAACe,oBAAoB,KAAK,SAAS,EAAEf,OAAO,CAACe,oBAAoB,GAAG,IAAI;IAC1F,IAAI,CAACf,OAAO,CAACgB,UAAU,EAAEhB,OAAO,CAACgB,UAAU,GAAG,EAAE;IAChD,IAAI,CAAChB,OAAO,CAACiB,UAAU,EAAEjB,OAAO,CAACiB,UAAU,GAAG,EAAE;IAChD,IAAI,CAACjB,OAAO,CAACkB,WAAW,EAAElB,OAAO,CAACkB,WAAW,GAAG,EAAE;IAClD,IAAI,CAAClB,OAAO,CAACmB,WAAW,EAAEnB,OAAO,CAACmB,WAAW,GAAG,EAAE;IAClD,IAAI,CAACnB,OAAO,CAACoB,gBAAgB,EAAEpB,OAAO,CAACoB,gBAAgB,GAAG,iCAAiC;IAC3F,IAAI,CAACpB,OAAO,CAACqB,UAAU,EAAErB,OAAO,CAACqB,UAAU,GAAG,OAAO;IACrD,IAAI,CAACrB,OAAO,CAACsB,kBAAkB,EAAEtB,OAAO,CAACsB,kBAAkB,GAAG,CAAC,UAAU,CAAC;IAC1E,IAAI,CAACtB,OAAO,CAACuB,WAAW,EAAEvB,OAAO,CAACuB,WAAW,GAAG,KAAK;IAErD,IAAI,CAACvB,OAAO,GAAGA,OAAO;EACxB;EAEA,IAAIwB,OAAOA,CAAA;IACT,OAAO,IAAI,CAACC,KAAK,CAACD,OAAO,GAAG,IAAI,CAACC,KAAK,CAACD,OAAO,CAACxH,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE;EACvE;EAEA,IAAI0H,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACD,KAAK,CAACC,UAAU,GAAG,IAAI,CAACD,KAAK,CAACC,UAAU,CAAC1H,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE;EAC7E;EAEA,IAAI2H,cAAcA,CAAA;IAChB,OAAO,IAAI,CAACF,KAAK,CAACE,cAAc,GAAG,IAAI,CAACF,KAAK,CAACE,cAAc,CAAC3H,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE;EACtF;EAEA,IAAI4H,iBAAiBA,CAAA;IACnB,OAAO,IAAI,CAACH,KAAK,CAACI,qBAAqB,GAAG,IAAI,CAACJ,KAAK,CAACI,qBAAqB,CAAC7H,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE;EACpG;EAEA,IAAI8H,SAASA,CAAA;IACX,OAAO,IAAI,CAACL,KAAK,CAACK,SAAS,IAAI,EAAE;EACnC;EAEA,IAAIC,gBAAgBA,CAAA;IAClB,OAAO,IAAI,CAAC/B,OAAO,CAAC+B,gBAAgB,IAAI,EAAE;EAC5C;EAEA,MAAMC,IAAIA,CAAA;IACR;IACA,MAAM5F,MAAM,GAAG5B,kBAAkB,CAAC,IAAI,CAACwF,OAAO,CAACe,oBAAoB,CAAC;IACpE,IAAI3E,MAAM,CAAC2F,gBAAgB,EAAE,IAAI,CAAC/B,OAAO,CAAC+B,gBAAgB,GAAG3F,MAAM,CAAC2F,gBAAgB;IAEpF,MAAMV,UAAU,GAAG,IAAI,CAACrB,OAAO,CAAC+B,gBAAgB,GAAG,GAAG,IAAI,CAACE,eAAmB,QAAI,CAACjC,OAAO,CAAC+B,gBAAkB,KAAG,IAAI,CAACE,eAAe;IACpI,IAAI,CAACC,cAAc,GAAGC,cAAc,CAACC,WAAW,CAACf,UAAU,EAAE,IAAI,CAACrB,OAAO,CAACqB,UAAU,CAAC;IAErF,MAAMS,SAAS,GAAG,IAAI,CAACI,cAAc,CAAC9G,GAAG,CAAS,WAAW,CAAC;IAE9D,IAAI,CAACiH,cAAc,GAAG,IAAIC,uBAAuB,CAAC;MAChDC,oBAAoB,EAAE,IAAI,CAACvC,OAAO,CAACoB,gBAAgB;MACnDW,gBAAgB,EAAE,IAAI,CAAC/B,OAAO,CAAC+B,gBAAgB;MAC/CR,WAAW,EAAE,IAAI,CAACvB,OAAO,CAACuB,WAAW;MACrCO;IACD,EAAC;IAEF,IAAI,IAAI,CAAC9B,OAAO,CAACM,OAAO,KAAKL,iBAAiB,CAACM,OAAO,EAAE;MACtD;MACA;MACAiC,OAAO,CAACpJ,GAAG,CAAC,6EAA6E,EAAE,gBAAgB,CAAC;IAC7G;IAED,IAAIgD,MAAM,CAACX,KAAK,EAAE;MAChB,MAAM1C,UAAU,CAACI,WAAW,CAACiD,MAAM,CAACX,KAAK,CAAC;IAC3C;IAED,IAAIW,MAAM,CAAC0F,SAAS,EAAE;MACpB,IAAI,CAACI,cAAc,CAACO,GAAG,CAAC,WAAW,EAAErG,MAAM,CAAC0F,SAAS,CAAC;MACtD,IAAI,CAACO,cAAc,CAACK,UAAU,GAAGtG,MAAM,CAAC0F,SAAS;IAClD;IAED,IAAI,IAAI,CAACO,cAAc,CAACK,UAAU,EAAE;MAClC,MAAM5C,IAAI,GAAG,MAAM,IAAI,CAAC6C,iBAAiB,EAAE;MAC3C;MACA;MACA,IAAI,CAACC,WAAW,CAAC9C,IAAI,CAAC;MACtB,IAAIhI,MAAM,CAAC0D,IAAI,CAACsE,IAAI,CAAC,CAACpH,MAAM,KAAK,CAAC,EAAE;QAClC;QACA,IAAI,CAACwJ,cAAc,CAACO,GAAG,CAAC,WAAW,EAAE,EAAE,CAAC;MACzC;IACF;EACH;EAEA,MAAMI,KAAKA,CAACzG,MAAiD;IAC3D,IAAI,CAACA,MAAM,CAAC0G,aAAa,EAAE,MAAM/J,UAAU,CAACC,kBAAkB,CAAC,2BAA2B,CAAC;IAE3F;IACA;IACA,MAAM+J,aAAa,GAAuB;MACxCtC,WAAW,EAAE,IAAI,CAACT,OAAO,CAACS;KAC3B;IAED,MAAMuC,WAAW,GAAAC,aAAA,CAAAA,aAAA;MACfH,aAAa,EAAE1G,MAAM,CAAC0G;KACnB,EAAAC,aAAa,CACb,EAAA3G,MAAM,CACV;IACD;IACA;IAEA,MAAMnC,SAAS,GAAG,IAAI,CAACiJ,UAAU,EAAE;IAEnC;IACA,MAAM9D,OAAO,GAAG,MAAM,IAAI,CAAC+D,UAAU,CAACH,WAAW,CAAC;IAClD,MAAMI,YAAY,GAAoB;MACpChE,OAAO;MACP2C,gBAAgB,EAAE,IAAI,CAAC/B,OAAO,CAAC+B;KAChC;IAED,IAAI,IAAI,CAAC/B,OAAO,CAACY,MAAM,KAAKC,OAAO,CAACC,QAAQ,EAAE;MAC5C,MAAMuC,QAAQ,GAAGlH,YAAY,CAAC;QAC5BE,OAAO,EAAEpC,SAAS;QAClByB,IAAI,EAAE;UAAE4H,SAAS,EAAEC,YAAY,CAACH,YAAY;QAAG;MAChD,EAAC;MACFvI,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGsI,QAAQ;MAC/B,OAAO1K,SAAS;IACjB;IACD,OAAO,IAAI0G,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACrC,MAAM8D,QAAQ,GAAGlH,YAAY,CAAC;QAC5BE,OAAO,EAAEpC,SAAS;QAClByB,IAAI,EAAE;UAAE4H,SAAS,EAAEC,YAAY,CAACH,YAAY;QAAG;MAChD,EAAC;MACF,MAAMI,aAAa,GAAG,IAAIxF,YAAY,CAAC;QAAErD,GAAG,EAAE0I;MAAU,EAAC;MAEzDG,aAAa,CAACC,EAAE,CAAC,OAAO,EAAE,MAAK;QAC7BlE,MAAM,CAACxG,UAAU,CAACG,WAAW,EAAE,CAAC;MAClC,CAAC,CAAC;MAEFsK,aAAa,CACVrE,eAAe,CAACC,OAAO,CAAC,CACxBsE,IAAI,CAACxF,IAAA,IAAoC;QAAA,IAAnC;UAAE4D,SAAS;UAAEC;QAAgB,CAAE,GAAA7D,IAAA;QACpC,IAAI,CAACmE,cAAc,CAACK,UAAU,GAAGZ,SAAS;QAC1C,IAAI,CAAC9B,OAAO,CAAC+B,gBAAgB,GAAGA,gBAAgB;QAChD,IAAI,CAACG,cAAc,CAACO,GAAG,CAAC,WAAW,EAAEX,SAAS,CAAC;QAC/C,OAAO,IAAI,CAACO,cAAc,CAACsB,gBAAgB,EAAE;MAC/C,CAAC,CAAC,CACDD,IAAI,CAAEE,WAAiC,IAAI;QAC1C,IAAI,CAAChB,WAAW,CAACgB,WAAW,CAAC;QAC7B,OAAOtE,OAAO,CAAC;UAAEkC,OAAO,EAAE,IAAI,CAACA;QAAS,EAAC;MAC3C,CAAC,CAAC,CACDqC,KAAK,CAACtE,MAAM,CAAC;MAEhBiE,aAAa,CAAC5E,IAAI,EAAE;IACtB,CAAC,CAAC;EACJ;EAEA,MAAMkF,MAAMA,CAAA;IACV,IAAI,CAAC,IAAI,CAACzB,cAAc,CAACK,UAAU,EAAE,MAAM3J,UAAU,CAACE,eAAe,EAAE;IACvE,MAAM,IAAI,CAACoJ,cAAc,CAAC0B,iBAAiB,EAAE;IAC7C,IAAI,CAACnB,WAAW,CAAC;MACfpB,OAAO,EAAE,EAAE;MACXE,UAAU,EAAE,EAAE;MACdG,qBAAqB,EAAE,EAAE;MACzBF,cAAc,EAAE,EAAE;MAClBqC,SAAS,EAAE,EAAE;MACbC,eAAe,EAAE,EAAE;MACnBC,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE;QACRjM,IAAI,EAAE,EAAE;QACRkM,YAAY,EAAE,EAAE;QAChBC,SAAS,EAAE,EAAE;QACbC,OAAO,EAAE,EAAE;QACXC,YAAY,EAAE,EAAE;QAChBC,gBAAgB,EAAE,EAAE;QACpBC,QAAQ,EAAE,EAAE;QACZC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE,EAAE;QACdC,iBAAiB,EAAE,EAAE;QACrBC,WAAW,EAAE;MACd;IACF,EAAC;IAEF,IAAI,CAAC5C,cAAc,CAACO,GAAG,CAAC,WAAW,EAAE,EAAE,CAAC;EAC1C;EAEAsC,WAAWA,CAAA;IACT,IAAI,CAAC,IAAI,CAAC1C,cAAc,CAACK,UAAU,EAAE;MACnC,MAAM3J,UAAU,CAACE,eAAe,EAAE;IACnC;IACD,OAAO,IAAI,CAACwI,KAAK,CAAC0C,QAAQ;EAC5B;EAEA,MAAMhB,UAAUA,CAACH,WAAsD;IACrE,IAAI,CAAC,IAAI,CAACX,cAAc,EAAE,MAAM/J,mBAAmB,CAACQ,cAAc,EAAE;IACpE,MAAMkM,UAAU,GAA2B;MACzChF,OAAO,EAAE,IAAI,CAACA,OAAO;MACrB5D,MAAM,EAAE4G;KACT;IAED,MAAM5D,OAAO,GAAGkD,uBAAuB,CAAC2C,wBAAwB,EAAE;IAClE,MAAMC,eAAe,GAAG,IAAI5C,uBAAuB,CAAyB;MAC1EC,oBAAoB,EAAE,IAAI,CAACvC,OAAO,CAACoB,gBAAgB;MACnDW,gBAAgB,EAAE,IAAI,CAAC/B,OAAO,CAAC+B,gBAAgB;MAC/CR,WAAW,EAAE,GAAG;MAChBO,SAAS,EAAE1C;IACZ,EAAC;IAEF,MAAM8F,eAAe,CAACC,aAAa,CAAC/M,IAAI,CAACkD,KAAK,CAAClD,IAAI,CAACC,SAAS,CAAC2M,UAAU,CAAC,CAAC,CAAC;IAE3E,OAAO5F,OAAO;EAChB;EAEQ,MAAMuD,iBAAiBA,CAAA;IAC7B,IAAI;MACF,IAAI,CAAC,IAAI,CAACN,cAAc,CAACK,UAAU,EAAE,OAAO,EAAE;MAC9C,MAAMhI,MAAM,GAAG,MAAM,IAAI,CAAC2H,cAAc,CAACsB,gBAAgB,EAAE;MAC3D,OAAOjJ,MAAM;KACd,CAAC,OAAO0K,GAAG,EAAE;MACZ/L,QAAG,CAACoC,KAAK,CAAC,sBAAsB,EAAE2J,GAAG,CAAC;MACtC,OAAO,EAAE;IACV;EACH;EAEQxC,WAAWA,CAAC9C,IAAmC;IACrD,IAAI,CAAC2B,KAAK,GAAAwB,aAAA,CAAAA,aAAA,CAAQ,QAAI,CAACxB,KAAK,CAAK,EAAA3B,IAAI,CAAE;EACzC;EAEQoD,UAAUA,CAAA;IAChB,IAAI,IAAI,CAACmC,sBAAsB,CAACC,QAAQ,CAAC,IAAI,CAACtF,OAAO,CAACM,OAAO,CAAC,EAAE;MAC9D,UAAU,IAAI,CAACN,OAAO,CAACK,MAAW,KAAA7G,OAAO,CAAC+L,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAS;IAChE;IACD,UAAU,IAAI,CAACvF,OAAO,CAACK,MAAc;EACvC;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}