{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.numberToBuffer = exports.normalize = exports.recoverPublicKey = exports.concatSig = exports.legacyToBuffer = exports.isNullish = exports.padWithZeroes = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst ethjs_util_1 = require(\"ethjs-util\");\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */\nfunction padWithZeroes(hexString, targetLength) {\n  if (hexString !== '' && !/^[a-f0-9]+$/iu.test(hexString)) {\n    throw new Error(`Expected an unprefixed hex string. Received: ${hexString}`);\n  }\n  if (targetLength < 0) {\n    throw new Error(`Expected a non-negative integer target length. Received: ${targetLength}`);\n  }\n  return String.prototype.padStart.call(hexString, targetLength, '0');\n}\nexports.padWithZeroes = padWithZeroes;\n/**\n * Returns `true` if the given value is nullish.\n *\n * @param value - The value being checked.\n * @returns Whether the value is nullish.\n */\nfunction isNullish(value) {\n  return value === null || value === undefined;\n}\nexports.isNullish = isNullish;\n/**\n * Convert a value to a Buffer. This function should be equivalent to the `toBuffer` function in\n * `ethereumjs-util@5.2.1`.\n *\n * @param value - The value to convert to a Buffer.\n * @returns The given value as a Buffer.\n */\nfunction legacyToBuffer(value) {\n  return typeof value === 'string' && !(0, ethjs_util_1.isHexString)(value) ? Buffer.from(value) : (0, util_1.toBuffer)(value);\n}\nexports.legacyToBuffer = legacyToBuffer;\n/**\n * Concatenate an extended ECDSA signature into a single '0x'-prefixed hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature as a '0x'-prefixed string.\n */\nfunction concatSig(v, r, s) {\n  const rSig = (0, util_1.fromSigned)(r);\n  const sSig = (0, util_1.fromSigned)(s);\n  const vSig = (0, util_1.bufferToInt)(v);\n  const rStr = padWithZeroes((0, util_1.toUnsigned)(rSig).toString('hex'), 64);\n  const sStr = padWithZeroes((0, util_1.toUnsigned)(sSig).toString('hex'), 64);\n  const vStr = (0, ethjs_util_1.stripHexPrefix)((0, ethjs_util_1.intToHex)(vSig));\n  return (0, util_1.addHexPrefix)(rStr.concat(sStr, vStr));\n}\nexports.concatSig = concatSig;\n/**\n * Recover the public key from the given signature and message hash.\n *\n * @param messageHash - The hash of the signed message.\n * @param signature - The signature.\n * @returns The public key of the signer.\n */\nfunction recoverPublicKey(messageHash, signature) {\n  const sigParams = (0, util_1.fromRpcSig)(signature);\n  return (0, util_1.ecrecover)(messageHash, sigParams.v, sigParams.r, sigParams.s);\n}\nexports.recoverPublicKey = recoverPublicKey;\n/**\n * Normalize the input to a lower-cased '0x'-prefixed hex string.\n *\n * @param input - The value to normalize.\n * @returns The normalized value.\n */\nfunction normalize(input) {\n  if (isNullish(input)) {\n    return undefined;\n  }\n  if (typeof input === 'number') {\n    if (input < 0) {\n      return '0x';\n    }\n    const buffer = (0, util_1.toBuffer)(input);\n    input = (0, util_1.bufferToHex)(buffer);\n  }\n  if (typeof input !== 'string') {\n    let msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n    msg += ` received ${typeof input}: ${input}`;\n    throw new Error(msg);\n  }\n  return (0, util_1.addHexPrefix)(input.toLowerCase());\n}\nexports.normalize = normalize;\n/**\n * Node's Buffer.from() method does not seem to buffer numbers correctly out of the box.\n * This helper method formats the number correct for Buffer.from to return correct buffer.\n *\n * @param num - The number to convert to buffer.\n * @returns The number in buffer form.\n */\nfunction numberToBuffer(num) {\n  const hexVal = num.toString(16);\n  const prepend = hexVal.length % 2 ? '0' : '';\n  return Buffer.from(prepend + hexVal, 'hex');\n}\nexports.numberToBuffer = numberToBuffer;","map":{"version":3,"names":["util_1","require","ethjs_util_1","padWithZeroes","hexString","targetLength","test","Error","String","prototype","padStart","call","exports","isNullish","value","undefined","legacyToBuffer","isHexString","Buffer","from","toBuffer","concatSig","v","r","s","rSig","fromSigned","sSig","vSig","bufferToInt","rStr","toUnsigned","toString","sStr","vStr","stripHexPrefix","intToHex","addHexPrefix","concat","recoverPublicKey","messageHash","signature","sigParams","fromRpcSig","ecrecover","normalize","input","buffer","bufferToHex","msg","toLowerCase","numberToBuffer","num","hexVal","prepend","length"],"sources":["/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@metamask/eth-sig-util/src/utils.ts"],"sourcesContent":["import {\n  addHexPrefix,\n  bufferToHex,\n  bufferToInt,\n  ecrecover,\n  fromRpcSig,\n  fromSigned,\n  toBuffer,\n  ToBufferInputTypes,\n  toUnsigned,\n} from '@ethereumjs/util';\nimport { intToHex, isHexString, stripHexPrefix } from 'ethjs-util';\n\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */\nexport function padWithZeroes(hexString: string, targetLength: number): string {\n  if (hexString !== '' && !/^[a-f0-9]+$/iu.test(hexString)) {\n    throw new Error(\n      `Expected an unprefixed hex string. Received: ${hexString}`,\n    );\n  }\n\n  if (targetLength < 0) {\n    throw new Error(\n      `Expected a non-negative integer target length. Received: ${targetLength}`,\n    );\n  }\n\n  return String.prototype.padStart.call(hexString, targetLength, '0');\n}\n\n/**\n * Returns `true` if the given value is nullish.\n *\n * @param value - The value being checked.\n * @returns Whether the value is nullish.\n */\nexport function isNullish(value) {\n  return value === null || value === undefined;\n}\n\n/**\n * Convert a value to a Buffer. This function should be equivalent to the `toBuffer` function in\n * `ethereumjs-util@5.2.1`.\n *\n * @param value - The value to convert to a Buffer.\n * @returns The given value as a Buffer.\n */\nexport function legacyToBuffer(value: ToBufferInputTypes) {\n  return typeof value === 'string' && !isHexString(value)\n    ? Buffer.from(value)\n    : toBuffer(value);\n}\n\n/**\n * Concatenate an extended ECDSA signature into a single '0x'-prefixed hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature as a '0x'-prefixed string.\n */\nexport function concatSig(v: Buffer, r: Buffer, s: Buffer): string {\n  const rSig = fromSigned(r);\n  const sSig = fromSigned(s);\n  const vSig = bufferToInt(v);\n  const rStr = padWithZeroes(toUnsigned(rSig).toString('hex'), 64);\n  const sStr = padWithZeroes(toUnsigned(sSig).toString('hex'), 64);\n  const vStr = stripHexPrefix(intToHex(vSig));\n  return addHexPrefix(rStr.concat(sStr, vStr));\n}\n\n/**\n * Recover the public key from the given signature and message hash.\n *\n * @param messageHash - The hash of the signed message.\n * @param signature - The signature.\n * @returns The public key of the signer.\n */\nexport function recoverPublicKey(\n  messageHash: Buffer,\n  signature: string,\n): Buffer {\n  const sigParams = fromRpcSig(signature);\n  return ecrecover(messageHash, sigParams.v, sigParams.r, sigParams.s);\n}\n\n/**\n * Normalize the input to a lower-cased '0x'-prefixed hex string.\n *\n * @param input - The value to normalize.\n * @returns The normalized value.\n */\nexport function normalize(input: number | string): string | undefined {\n  if (isNullish(input)) {\n    return undefined;\n  }\n\n  if (typeof input === 'number') {\n    if (input < 0) {\n      return '0x';\n    }\n    const buffer = toBuffer(input);\n    input = bufferToHex(buffer);\n  }\n\n  if (typeof input !== 'string') {\n    let msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n    msg += ` received ${typeof input}: ${input as any as string}`;\n    throw new Error(msg);\n  }\n\n  return addHexPrefix(input.toLowerCase());\n}\n\n/**\n * Node's Buffer.from() method does not seem to buffer numbers correctly out of the box.\n * This helper method formats the number correct for Buffer.from to return correct buffer.\n *\n * @param num - The number to convert to buffer.\n * @returns The number in buffer form.\n */\nexport function numberToBuffer(num: number) {\n  const hexVal = num.toString(16);\n  const prepend = hexVal.length % 2 ? '0' : '';\n  return Buffer.from(prepend + hexVal, 'hex');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}