{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.recoverTypedSignature = exports.signTypedData = exports.typedSignatureHash = exports.TypedDataUtils = exports.TYPED_MESSAGE_SCHEMA = exports.SignTypedDataVersion = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst ethjs_util_1 = require(\"ethjs-util\");\nconst ethereumjs_abi_utils_1 = require(\"./ethereumjs-abi-utils\");\nconst utils_1 = require(\"./utils\");\n/**\n * Represents the version of `signTypedData` being used.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\n *\n * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\n */\nvar SignTypedDataVersion;\n(function (SignTypedDataVersion) {\n  SignTypedDataVersion[\"V1\"] = \"V1\";\n  SignTypedDataVersion[\"V3\"] = \"V3\";\n  SignTypedDataVersion[\"V4\"] = \"V4\";\n})(SignTypedDataVersion = exports.SignTypedDataVersion || (exports.SignTypedDataVersion = {}));\nexports.TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            type: {\n              type: 'string'\n            }\n          },\n          required: ['name', 'type']\n        }\n      }\n    },\n    primaryType: {\n      type: 'string'\n    },\n    domain: {\n      type: 'object'\n    },\n    message: {\n      type: 'object'\n    }\n  },\n  required: ['types', 'primaryType', 'domain', 'message']\n};\n/**\n * Validate that the given value is a valid version string.\n *\n * @param version - The version value to validate.\n * @param allowedVersions - A list of allowed versions. If omitted, all versions are assumed to be\n * allowed.\n */\nfunction validateVersion(version, allowedVersions) {\n  if (!Object.keys(SignTypedDataVersion).includes(version)) {\n    throw new Error(`Invalid version: '${version}'`);\n  } else if (allowedVersions && !allowedVersions.includes(version)) {\n    throw new Error(`SignTypedDataVersion not allowed: '${version}'. Allowed versions are: ${allowedVersions.join(', ')}`);\n  }\n}\n/**\n * Encode a single field.\n *\n * @param types - All type definitions.\n * @param name - The name of the field to encode.\n * @param type - The type of the field being encoded.\n * @param value - The value to encode.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns Encoded representation of the field.\n */\nfunction encodeField(types, name, type,\n// TODO: constrain type on `value`\nvalue, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  if (types[type] !== undefined) {\n    return ['bytes32',\n    // TODO: return Buffer, remove string from return type\n    version === SignTypedDataVersion.V4 && value == null // eslint-disable-line no-eq-null\n    ? '0x0000000000000000000000000000000000000000000000000000000000000000' : (0, util_1.arrToBufArr)((0, keccak_1.keccak256)(encodeData(type, value, types, version)))];\n  }\n  if (value === undefined) {\n    throw new Error(`missing value for field ${name} of type ${type}`);\n  }\n  if (type === 'bytes') {\n    if (typeof value === 'number') {\n      value = (0, utils_1.numberToBuffer)(value);\n    } else if ((0, ethjs_util_1.isHexString)(value)) {\n      const prepend = value.length % 2 ? '0' : '';\n      value = Buffer.from(prepend + value.slice(2), 'hex');\n    } else {\n      value = Buffer.from(value, 'utf8');\n    }\n    return ['bytes32', (0, util_1.arrToBufArr)((0, keccak_1.keccak256)(value))];\n  }\n  if (type === 'string') {\n    if (typeof value === 'number') {\n      value = (0, utils_1.numberToBuffer)(value);\n    } else {\n      value = Buffer.from(value !== null && value !== void 0 ? value : '', 'utf8');\n    }\n    return ['bytes32', (0, util_1.arrToBufArr)((0, keccak_1.keccak256)(value))];\n  }\n  if (type.endsWith(']')) {\n    if (version === SignTypedDataVersion.V3) {\n      throw new Error('Arrays are unimplemented in encodeData; use V4 extension');\n    }\n    const parsedType = type.slice(0, type.lastIndexOf('['));\n    const typeValuePairs = value.map(item => encodeField(types, name, parsedType, item, version));\n    return ['bytes32', (0, util_1.arrToBufArr)((0, keccak_1.keccak256)((0, ethereumjs_abi_utils_1.rawEncode)(typeValuePairs.map(([t]) => t), typeValuePairs.map(([, v]) => v))))];\n  }\n  return [type, value];\n}\n/**\n * Encodes an object by encoding and concatenating each of its members.\n *\n * @param primaryType - The root type.\n * @param data - The object to encode.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns An encoded representation of an object.\n */\nfunction encodeData(primaryType, data, types, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  const encodedTypes = ['bytes32'];\n  const encodedValues = [hashType(primaryType, types)];\n  for (const field of types[primaryType]) {\n    if (version === SignTypedDataVersion.V3 && data[field.name] === undefined) {\n      continue;\n    }\n    const [type, value] = encodeField(types, field.name, field.type, data[field.name], version);\n    encodedTypes.push(type);\n    encodedValues.push(value);\n  }\n  return (0, ethereumjs_abi_utils_1.rawEncode)(encodedTypes, encodedValues);\n}\n/**\n * Encodes the type of an object by encoding a comma delimited list of its members.\n *\n * @param primaryType - The root type to encode.\n * @param types - Type definitions for all types included in the message.\n * @returns An encoded representation of the primary type.\n */\nfunction encodeType(primaryType, types) {\n  let result = '';\n  const unsortedDeps = findTypeDependencies(primaryType, types);\n  unsortedDeps.delete(primaryType);\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n  for (const type of deps) {\n    const children = types[type];\n    if (!children) {\n      throw new Error(`No type definition specified: ${type}`);\n    }\n    result += `${type}(${types[type].map(({\n      name,\n      type: t\n    }) => `${t} ${name}`).join(',')})`;\n  }\n  return result;\n}\n/**\n * Finds all types within a type definition object.\n *\n * @param primaryType - The root type.\n * @param types - Type definitions for all types included in the message.\n * @param results - The current set of accumulated types.\n * @returns The set of all types found in the type definition.\n */\nfunction findTypeDependencies(primaryType, types, results = new Set()) {\n  if (typeof primaryType !== 'string') {\n    throw new Error(`Invalid findTypeDependencies input ${JSON.stringify(primaryType)}`);\n  }\n  const match = primaryType.match(/^\\w*/u);\n  [primaryType] = match;\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results;\n  }\n  results.add(primaryType);\n  for (const field of types[primaryType]) {\n    findTypeDependencies(field.type, types, results);\n  }\n  return results;\n}\n/**\n * Hashes an object.\n *\n * @param primaryType - The root type.\n * @param data - The object to hash.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the object.\n */\nfunction hashStruct(primaryType, data, types, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  const encoded = encodeData(primaryType, data, types, version);\n  const hashed = (0, keccak_1.keccak256)(encoded);\n  const buf = (0, util_1.arrToBufArr)(hashed);\n  return buf;\n}\n/**\n * Hashes the type of an object.\n *\n * @param primaryType - The root type to hash.\n * @param types - Type definitions for all types included in the message.\n * @returns The hash of the object type.\n */\nfunction hashType(primaryType, types) {\n  const encodedHashType = Buffer.from(encodeType(primaryType, types), 'utf-8');\n  return (0, util_1.arrToBufArr)((0, keccak_1.keccak256)(encodedHashType));\n}\n/**\n * Removes properties from a message object that are not defined per EIP-712.\n *\n * @param data - The typed message object.\n * @returns The typed message object with only allowed fields.\n */\nfunction sanitizeData(data) {\n  const sanitizedData = {};\n  for (const key in exports.TYPED_MESSAGE_SCHEMA.properties) {\n    if (data[key]) {\n      sanitizedData[key] = data[key];\n    }\n  }\n  if ('types' in sanitizedData) {\n    // TODO: Fix types\n    sanitizedData.types = Object.assign({\n      EIP712Domain: []\n    }, sanitizedData.types);\n  }\n  return sanitizedData;\n}\n/**\n * Create a EIP-712 Domain Hash.\n * This hash is used at the top of the EIP-712 encoding.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the domain object.\n */\nfunction eip712DomainHash(typedData, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  const sanitizedData = sanitizeData(typedData);\n  const {\n    domain\n  } = sanitizedData;\n  const domainType = {\n    EIP712Domain: sanitizedData.types.EIP712Domain\n  };\n  return hashStruct('EIP712Domain', domain, domainType, version);\n}\n/**\n * Hash a typed message according to EIP-712. The returned message starts with the EIP-712 prefix,\n * which is \"1901\", followed by the hash of the domain separator, then the data (if any).\n * The result is hashed again and returned.\n *\n * This function does not sign the message. The resulting hash must still be signed to create an\n * EIP-712 signature.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the typed message.\n */\nfunction eip712Hash(typedData, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  const sanitizedData = sanitizeData(typedData);\n  const parts = [Buffer.from('1901', 'hex')];\n  parts.push(eip712DomainHash(typedData, version));\n  if (sanitizedData.primaryType !== 'EIP712Domain') {\n    parts.push(hashStruct(\n    // TODO: Validate that this is a string, so this type cast can be removed.\n    sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, version));\n  }\n  return (0, util_1.arrToBufArr)((0, keccak_1.keccak256)(Buffer.concat(parts)));\n}\n/**\n * A collection of utility functions used for signing typed data.\n */\nexports.TypedDataUtils = {\n  encodeData,\n  encodeType,\n  findTypeDependencies,\n  hashStruct,\n  hashType,\n  sanitizeData,\n  eip712Hash,\n  eip712DomainHash\n};\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The '0x'-prefixed hex encoded hash representing the type of the provided message.\n */\nfunction typedSignatureHash(typedData) {\n  const hashBuffer = _typedSignatureHash(typedData);\n  return (0, util_1.bufferToHex)(hashBuffer);\n}\nexports.typedSignatureHash = typedSignatureHash;\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The hash representing the type of the provided message.\n */\nfunction _typedSignatureHash(typedData) {\n  const error = new Error('Expect argument to be non-empty array');\n  if (typeof typedData !== 'object' || !('length' in typedData) || !typedData.length) {\n    throw error;\n  }\n  const data = typedData.map(function (e) {\n    if (e.type !== 'bytes') {\n      return e.value;\n    }\n    return (0, utils_1.legacyToBuffer)(e.value);\n  });\n  const types = typedData.map(function (e) {\n    return e.type;\n  });\n  const schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n    return `${e.type} ${e.name}`;\n  });\n  return (0, util_1.arrToBufArr)((0, keccak_1.keccak256)((0, ethereumjs_abi_utils_1.solidityPack)(['bytes32', 'bytes32'], [(0, keccak_1.keccak256)((0, ethereumjs_abi_utils_1.solidityPack)(new Array(typedData.length).fill('string'), schema)), (0, keccak_1.keccak256)((0, ethereumjs_abi_utils_1.solidityPack)(types, data))])));\n}\n/**\n * Sign typed data according to EIP-712. The signing differs based upon the `version`.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), except that arrays and\n * recursive data structures are not supported.\n *\n * V4 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), and includes full support of\n * arrays and recursive data structures.\n *\n * @param options - The signing options.\n * @param options.privateKey - The private key to sign with.\n * @param options.data - The typed data to sign.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nfunction signTypedData({\n  privateKey,\n  data,\n  version\n}) {\n  validateVersion(version);\n  if ((0, utils_1.isNullish)(data)) {\n    throw new Error('Missing data parameter');\n  } else if ((0, utils_1.isNullish)(privateKey)) {\n    throw new Error('Missing private key parameter');\n  }\n  const messageHash = version === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports.TypedDataUtils.eip712Hash(data, version);\n  const sig = (0, util_1.ecsign)(messageHash, privateKey);\n  return (0, utils_1.concatSig)((0, util_1.toBuffer)(sig.v), sig.r, sig.s);\n}\nexports.signTypedData = signTypedData;\n/**\n * Recover the address of the account that created the given EIP-712\n * signature. The version provided must match the version used to\n * create the signature.\n *\n * @param options - The signature recovery options.\n * @param options.data - The typed data that was signed.\n * @param options.signature - The '0x-prefixed hex encoded message signature.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex address of the signer.\n */\nfunction recoverTypedSignature({\n  data,\n  signature,\n  version\n}) {\n  validateVersion(version);\n  if ((0, utils_1.isNullish)(data)) {\n    throw new Error('Missing data parameter');\n  } else if ((0, utils_1.isNullish)(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n  const messageHash = version === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports.TypedDataUtils.eip712Hash(data, version);\n  const publicKey = (0, utils_1.recoverPublicKey)(messageHash, signature);\n  const sender = (0, util_1.publicToAddress)(publicKey);\n  return (0, util_1.bufferToHex)(sender);\n}\nexports.recoverTypedSignature = recoverTypedSignature;","map":{"version":3,"names":["util_1","require","keccak_1","ethjs_util_1","ethereumjs_abi_utils_1","utils_1","SignTypedDataVersion","exports","TYPED_MESSAGE_SCHEMA","type","properties","types","additionalProperties","items","name","required","primaryType","domain","message","validateVersion","version","allowedVersions","Object","keys","includes","Error","join","encodeField","value","V3","V4","undefined","arrToBufArr","keccak256","encodeData","numberToBuffer","isHexString","prepend","length","Buffer","from","slice","endsWith","parsedType","lastIndexOf","typeValuePairs","map","item","rawEncode","t","v","data","encodedTypes","encodedValues","hashType","field","push","encodeType","result","unsortedDeps","findTypeDependencies","delete","deps","Array","sort","children","results","Set","JSON","stringify","match","has","add","hashStruct","encoded","hashed","buf","encodedHashType","sanitizeData","sanitizedData","key","assign","EIP712Domain","eip712DomainHash","typedData","domainType","eip712Hash","parts","concat","TypedDataUtils","typedSignatureHash","hashBuffer","_typedSignatureHash","bufferToHex","error","e","legacyToBuffer","schema","solidityPack","fill","signTypedData","privateKey","isNullish","messageHash","V1","sig","ecsign","concatSig","toBuffer","r","s","recoverTypedSignature","signature","publicKey","recoverPublicKey","sender","publicToAddress"],"sources":["/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@metamask/eth-sig-util/src/sign-typed-data.ts"],"sourcesContent":["import {\n  arrToBufArr,\n  bufferToHex,\n  ecsign,\n  publicToAddress,\n  toBuffer,\n} from '@ethereumjs/util';\nimport { keccak256 } from 'ethereum-cryptography/keccak';\nimport { isHexString } from 'ethjs-util';\n\nimport { rawEncode, solidityPack } from './ethereumjs-abi-utils';\nimport {\n  concatSig,\n  isNullish,\n  legacyToBuffer,\n  recoverPublicKey,\n  numberToBuffer,\n} from './utils';\n\n/**\n * This is the message format used for `V1` of `signTypedData`.\n */\nexport type TypedDataV1 = TypedDataV1Field[];\n\n/**\n * This represents a single field in a `V1` `signTypedData` message.\n *\n * @property name - The name of the field.\n * @property type - The type of a field (must be a supported Solidity type).\n * @property value - The value of the field.\n */\nexport type TypedDataV1Field = {\n  name: string;\n  type: string;\n  value: any;\n};\n\n/**\n * Represents the version of `signTypedData` being used.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\n *\n * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\n */\nexport enum SignTypedDataVersion {\n  V1 = 'V1',\n  V3 = 'V3',\n  V4 = 'V4',\n}\n\nexport type MessageTypeProperty = {\n  name: string;\n  type: string;\n};\n\nexport type MessageTypes = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  EIP712Domain: MessageTypeProperty[];\n  [additionalProperties: string]: MessageTypeProperty[];\n};\n\n/**\n * This is the message format used for `signTypeData`, for all versions\n * except `V1`.\n *\n * @template T - The custom types used by this message.\n * @property types - The custom types used by this message.\n * @property primaryType - The type of the message.\n * @property domain - Signing domain metadata. The signing domain is the intended context for the\n * signature (e.g. the dapp, protocol, etc. that it's intended for). This data is used to\n * construct the domain seperator of the message.\n * @property domain.name - The name of the signing domain.\n * @property domain.version - The current major version of the signing domain.\n * @property domain.chainId - The chain ID of the signing domain.\n * @property domain.verifyingContract - The address of the contract that can verify the signature.\n * @property domain.salt - A disambiguating salt for the protocol.\n * @property message - The message to be signed.\n */\nexport type TypedMessage<T extends MessageTypes> = {\n  types: T;\n  primaryType: keyof T;\n  domain: {\n    name?: string;\n    version?: string;\n    chainId?: number;\n    verifyingContract?: string;\n    salt?: ArrayBuffer;\n  };\n  message: Record<string, unknown>;\n};\n\nexport const TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: { type: 'string' },\n            type: { type: 'string' },\n          },\n          required: ['name', 'type'],\n        },\n      },\n    },\n    primaryType: { type: 'string' },\n    domain: { type: 'object' },\n    message: { type: 'object' },\n  },\n  required: ['types', 'primaryType', 'domain', 'message'],\n};\n\n/**\n * Validate that the given value is a valid version string.\n *\n * @param version - The version value to validate.\n * @param allowedVersions - A list of allowed versions. If omitted, all versions are assumed to be\n * allowed.\n */\nfunction validateVersion(\n  version: SignTypedDataVersion,\n  allowedVersions?: SignTypedDataVersion[],\n) {\n  if (!Object.keys(SignTypedDataVersion).includes(version)) {\n    throw new Error(`Invalid version: '${version}'`);\n  } else if (allowedVersions && !allowedVersions.includes(version)) {\n    throw new Error(\n      `SignTypedDataVersion not allowed: '${version}'. Allowed versions are: ${allowedVersions.join(\n        ', ',\n      )}`,\n    );\n  }\n}\n\n/**\n * Encode a single field.\n *\n * @param types - All type definitions.\n * @param name - The name of the field to encode.\n * @param type - The type of the field being encoded.\n * @param value - The value to encode.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns Encoded representation of the field.\n */\nfunction encodeField(\n  types: Record<string, MessageTypeProperty[]>,\n  name: string,\n  type: string,\n  // TODO: constrain type on `value`\n  value: any,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): [type: string, value: Buffer | string] {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  if (types[type] !== undefined) {\n    return [\n      'bytes32',\n      // TODO: return Buffer, remove string from return type\n      version === SignTypedDataVersion.V4 && value == null // eslint-disable-line no-eq-null\n        ? '0x0000000000000000000000000000000000000000000000000000000000000000'\n        : arrToBufArr(keccak256(encodeData(type, value, types, version))),\n    ];\n  }\n\n  if (value === undefined) {\n    throw new Error(`missing value for field ${name} of type ${type}`);\n  }\n\n  if (type === 'bytes') {\n    if (typeof value === 'number') {\n      value = numberToBuffer(value);\n    } else if (isHexString(value)) {\n      const prepend = value.length % 2 ? '0' : '';\n      value = Buffer.from(prepend + (value as string).slice(2), 'hex');\n    } else {\n      value = Buffer.from(value, 'utf8');\n    }\n    return ['bytes32', arrToBufArr(keccak256(value))];\n  }\n\n  if (type === 'string') {\n    if (typeof value === 'number') {\n      value = numberToBuffer(value);\n    } else {\n      value = Buffer.from(value ?? '', 'utf8');\n    }\n    return ['bytes32', arrToBufArr(keccak256(value))];\n  }\n\n  if (type.endsWith(']')) {\n    if (version === SignTypedDataVersion.V3) {\n      throw new Error(\n        'Arrays are unimplemented in encodeData; use V4 extension',\n      );\n    }\n    const parsedType = type.slice(0, type.lastIndexOf('['));\n    const typeValuePairs = value.map((item) =>\n      encodeField(types, name, parsedType, item, version),\n    );\n    return [\n      'bytes32',\n      arrToBufArr(\n        keccak256(\n          rawEncode(\n            typeValuePairs.map(([t]) => t),\n            typeValuePairs.map(([, v]) => v),\n          ),\n        ),\n      ),\n    ];\n  }\n\n  return [type, value];\n}\n\n/**\n * Encodes an object by encoding and concatenating each of its members.\n *\n * @param primaryType - The root type.\n * @param data - The object to encode.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns An encoded representation of an object.\n */\nfunction encodeData(\n  primaryType: string,\n  data: Record<string, unknown>,\n  types: Record<string, MessageTypeProperty[]>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  const encodedTypes = ['bytes32'];\n  const encodedValues: (Buffer | string)[] = [hashType(primaryType, types)];\n\n  for (const field of types[primaryType]) {\n    if (version === SignTypedDataVersion.V3 && data[field.name] === undefined) {\n      continue;\n    }\n    const [type, value] = encodeField(\n      types,\n      field.name,\n      field.type,\n      data[field.name],\n      version,\n    );\n    encodedTypes.push(type);\n    encodedValues.push(value);\n  }\n\n  return rawEncode(encodedTypes, encodedValues);\n}\n\n/**\n * Encodes the type of an object by encoding a comma delimited list of its members.\n *\n * @param primaryType - The root type to encode.\n * @param types - Type definitions for all types included in the message.\n * @returns An encoded representation of the primary type.\n */\nfunction encodeType(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n): string {\n  let result = '';\n  const unsortedDeps = findTypeDependencies(primaryType, types);\n  unsortedDeps.delete(primaryType);\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n  for (const type of deps) {\n    const children = types[type];\n    if (!children) {\n      throw new Error(`No type definition specified: ${type}`);\n    }\n\n    result += `${type}(${types[type]\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`;\n  }\n\n  return result;\n}\n\n/**\n * Finds all types within a type definition object.\n *\n * @param primaryType - The root type.\n * @param types - Type definitions for all types included in the message.\n * @param results - The current set of accumulated types.\n * @returns The set of all types found in the type definition.\n */\nfunction findTypeDependencies(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n  results: Set<string> = new Set(),\n): Set<string> {\n  if (typeof primaryType !== 'string') {\n    throw new Error(\n      `Invalid findTypeDependencies input ${JSON.stringify(primaryType)}`,\n    );\n  }\n  const match = primaryType.match(/^\\w*/u) as RegExpMatchArray;\n  [primaryType] = match;\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results;\n  }\n\n  results.add(primaryType);\n\n  for (const field of types[primaryType]) {\n    findTypeDependencies(field.type, types, results);\n  }\n  return results;\n}\n\n/**\n * Hashes an object.\n *\n * @param primaryType - The root type.\n * @param data - The object to hash.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the object.\n */\nfunction hashStruct(\n  primaryType: string,\n  data: Record<string, unknown>,\n  types: Record<string, MessageTypeProperty[]>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  const encoded = encodeData(primaryType, data, types, version);\n  const hashed = keccak256(encoded);\n  const buf = arrToBufArr(hashed);\n  return buf;\n}\n\n/**\n * Hashes the type of an object.\n *\n * @param primaryType - The root type to hash.\n * @param types - Type definitions for all types included in the message.\n * @returns The hash of the object type.\n */\nfunction hashType(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n): Buffer {\n  const encodedHashType = Buffer.from(encodeType(primaryType, types), 'utf-8');\n  return arrToBufArr(keccak256(encodedHashType));\n}\n\n/**\n * Removes properties from a message object that are not defined per EIP-712.\n *\n * @param data - The typed message object.\n * @returns The typed message object with only allowed fields.\n */\nfunction sanitizeData<T extends MessageTypes>(\n  data: TypedMessage<T>,\n): TypedMessage<T> {\n  const sanitizedData: Partial<TypedMessage<T>> = {};\n  for (const key in TYPED_MESSAGE_SCHEMA.properties) {\n    if (data[key]) {\n      sanitizedData[key] = data[key];\n    }\n  }\n\n  if ('types' in sanitizedData) {\n    // TODO: Fix types\n    sanitizedData.types = { EIP712Domain: [], ...sanitizedData.types } as any;\n  }\n  return sanitizedData as Required<TypedMessage<T>>;\n}\n\n/**\n * Create a EIP-712 Domain Hash.\n * This hash is used at the top of the EIP-712 encoding.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the domain object.\n */\nfunction eip712DomainHash<T extends MessageTypes>(\n  typedData: TypedMessage<T>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  const sanitizedData = sanitizeData(typedData);\n  const { domain } = sanitizedData;\n  const domainType = { EIP712Domain: sanitizedData.types.EIP712Domain };\n  return hashStruct('EIP712Domain', domain, domainType, version);\n}\n\n/**\n * Hash a typed message according to EIP-712. The returned message starts with the EIP-712 prefix,\n * which is \"1901\", followed by the hash of the domain separator, then the data (if any).\n * The result is hashed again and returned.\n *\n * This function does not sign the message. The resulting hash must still be signed to create an\n * EIP-712 signature.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the typed message.\n */\nfunction eip712Hash<T extends MessageTypes>(\n  typedData: TypedMessage<T>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  const sanitizedData = sanitizeData(typedData);\n  const parts = [Buffer.from('1901', 'hex')];\n  parts.push(eip712DomainHash(typedData, version));\n\n  if (sanitizedData.primaryType !== 'EIP712Domain') {\n    parts.push(\n      hashStruct(\n        // TODO: Validate that this is a string, so this type cast can be removed.\n        sanitizedData.primaryType as string,\n        sanitizedData.message,\n        sanitizedData.types,\n        version,\n      ),\n    );\n  }\n  return arrToBufArr(keccak256(Buffer.concat(parts)));\n}\n\n/**\n * A collection of utility functions used for signing typed data.\n */\nexport const TypedDataUtils = {\n  encodeData,\n  encodeType,\n  findTypeDependencies,\n  hashStruct,\n  hashType,\n  sanitizeData,\n  eip712Hash,\n  eip712DomainHash,\n};\n\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The '0x'-prefixed hex encoded hash representing the type of the provided message.\n */\nexport function typedSignatureHash(typedData: TypedDataV1Field[]): string {\n  const hashBuffer = _typedSignatureHash(typedData);\n  return bufferToHex(hashBuffer);\n}\n\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The hash representing the type of the provided message.\n */\nfunction _typedSignatureHash(typedData: TypedDataV1): Buffer {\n  const error = new Error('Expect argument to be non-empty array');\n  if (\n    typeof typedData !== 'object' ||\n    !('length' in typedData) ||\n    !typedData.length\n  ) {\n    throw error;\n  }\n\n  const data = typedData.map(function (e) {\n    if (e.type !== 'bytes') {\n      return e.value;\n    }\n\n    return legacyToBuffer(e.value);\n  });\n  const types = typedData.map(function (e) {\n    return e.type;\n  });\n  const schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n    return `${e.type} ${e.name}`;\n  });\n\n  return arrToBufArr(\n    keccak256(\n      solidityPack(\n        ['bytes32', 'bytes32'],\n        [\n          keccak256(\n            solidityPack(new Array(typedData.length).fill('string'), schema),\n          ),\n          keccak256(solidityPack(types, data)),\n        ],\n      ),\n    ),\n  );\n}\n\n/**\n * Sign typed data according to EIP-712. The signing differs based upon the `version`.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), except that arrays and\n * recursive data structures are not supported.\n *\n * V4 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), and includes full support of\n * arrays and recursive data structures.\n *\n * @param options - The signing options.\n * @param options.privateKey - The private key to sign with.\n * @param options.data - The typed data to sign.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nexport function signTypedData<\n  V extends SignTypedDataVersion,\n  T extends MessageTypes,\n>({\n  privateKey,\n  data,\n  version,\n}: {\n  privateKey: Buffer;\n  data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n  version: V;\n}): string {\n  validateVersion(version);\n  if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(privateKey)) {\n    throw new Error('Missing private key parameter');\n  }\n\n  const messageHash =\n    version === SignTypedDataVersion.V1\n      ? _typedSignatureHash(data as TypedDataV1)\n      : TypedDataUtils.eip712Hash(data as TypedMessage<T>, version);\n  const sig = ecsign(messageHash, privateKey);\n  return concatSig(toBuffer(sig.v), sig.r, sig.s);\n}\n\n/**\n * Recover the address of the account that created the given EIP-712\n * signature. The version provided must match the version used to\n * create the signature.\n *\n * @param options - The signature recovery options.\n * @param options.data - The typed data that was signed.\n * @param options.signature - The '0x-prefixed hex encoded message signature.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex address of the signer.\n */\nexport function recoverTypedSignature<\n  V extends SignTypedDataVersion,\n  T extends MessageTypes,\n>({\n  data,\n  signature,\n  version,\n}: {\n  data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n  signature: string;\n  version: V;\n}): string {\n  validateVersion(version);\n  if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n\n  const messageHash =\n    version === SignTypedDataVersion.V1\n      ? _typedSignatureHash(data as TypedDataV1)\n      : TypedDataUtils.eip712Hash(data as TypedMessage<T>, version);\n  const publicKey = recoverPublicKey(messageHash, signature);\n  const sender = publicToAddress(publicKey);\n  return bufferToHex(sender);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}