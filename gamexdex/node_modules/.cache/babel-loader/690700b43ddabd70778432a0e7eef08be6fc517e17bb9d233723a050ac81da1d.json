{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/solana-embed';\nimport { WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, log, ADAPTER_EVENTS, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { BaseSolanaAdapter } from '@web3auth/base-solana-adapter';\nimport { TorusInjectedProvider } from '@web3auth/solana-provider';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nclass SolanaWalletAdapter extends BaseSolanaAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(params);\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_SOLANA);\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n    _defineProperty(this, \"torusInstance\", null);\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n    _defineProperty(this, \"initParams\", void 0);\n    _defineProperty(this, \"loginSettings\", {});\n    _defineProperty(this, \"solanaProvider\", null);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n  }\n  get provider() {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.solanaProvider) {\n      var _this$solanaProvider;\n      return ((_this$solanaProvider = this.solanaProvider) === null || _this$solanaProvider === void 0 ? void 0 : _this$solanaProvider.provider) || null;\n    }\n    return null;\n  }\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n  async init() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    await super.init(options);\n    super.checkInitializationRequirements();\n    const {\n      chainId,\n      blockExplorer,\n      displayName,\n      rpcTarget,\n      ticker,\n      tickerName\n    } = this.chainConfig;\n    const network = {\n      chainId,\n      rpcTarget,\n      blockExplorerUrl: blockExplorer,\n      displayName,\n      tickerName,\n      ticker,\n      logo: \"\"\n    };\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n    try {\n      log.debug(\"initializing torus solana adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_SOLANA\n    });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      try {\n        const torusInpageProvider = this.torusInstance.provider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const {\n            chainId,\n            blockExplorer,\n            displayName,\n            rpcTarget,\n            ticker,\n            tickerName\n          } = this.chainConfig;\n          const network = {\n            chainId,\n            rpcTarget,\n            blockExplorerUrl: blockExplorer,\n            displayName,\n            tickerName,\n            ticker,\n            logo: \"\"\n          };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_SOLANA,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if (error instanceof Web3AuthError) throw error;\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    await super.disconnectSession();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n  async addChain(chainConfig) {\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkAddChainRequirements(chainConfig, init);\n    // await this.solanaProvider?.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n  async switchChain(params) {\n    var _this$torusInstance;\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.checkSwitchChainRequirements(params, init);\n    const chainConfig = this.getChainConfig(params.chainId);\n    await ((_this$torusInstance = this.torusInstance) === null || _this$torusInstance === void 0 ? void 0 : _this$torusInstance.setProvider({\n      rpcTarget: chainConfig.rpcTarget,\n      chainId: chainConfig.chainId,\n      displayName: chainConfig.displayName,\n      blockExplorerUrl: chainConfig.blockExplorer,\n      ticker: chainConfig.ticker,\n      tickerName: chainConfig.tickerName,\n      logo: \"https://images.web3auth.io/login-torus-solana.svg\"\n    }));\n    this.setAdapterSettings({\n      chainConfig: this.getChainConfig(params.chainId)\n    });\n  }\n}\nexport { SolanaWalletAdapter };","map":{"version":3,"names":["SolanaWalletAdapter","BaseSolanaAdapter","constructor","params","arguments","length","undefined","_defineProperty","WALLET_ADAPTERS","TORUS_SOLANA","ADAPTER_NAMESPACES","SOLANA","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","torusWalletOptions","adapterSettings","initParams","loginSettings","provider","status","solanaProvider","_this$solanaProvider","_","Error","init","options","checkInitializationRequirements","chainId","blockExplorer","displayName","rpcTarget","ticker","tickerName","chainConfig","network","blockExplorerUrl","logo","torusInstance","Torus","log","debug","_objectSpread","showTorusButton","TorusInjectedProvider","config","READY","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","error","ERRORED","checkConnectionRequirements","WalletInitializationError","notReady","CONNECTING","adapter","login","torusInpageProvider","sendTransaction","bind","signAllTransactions","signMessage","signTransaction","setupProvider","Web3AuthError","code","setProvider","CONNECTED","reconnected","WalletLoginError","connectionError","disconnect","cleanup","disconnectSession","logout","getUserInfo","notConnectedError","userInfo","addChain","checkAddChainRequirements","addChainConfig","switchChain","_this$torusInstance","checkSwitchChainRequirements","getChainConfig","setAdapterSettings"],"sources":["/Users/Einpunk Community/Documents/Brownie/brownie_gamex_vault/node_modules/@web3auth/torus-solana-adapter/src/solanaWalletAdapter.ts"],"sourcesContent":["import Torus, { NetworkInterface, TorusCtorArgs, TorusLoginParams, TorusParams } from \"@toruslabs/solana-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { ITorusWalletProvider, TorusInjectedProvider } from \"@web3auth/solana-provider\";\n\nexport interface SolanaWalletOptions extends BaseAdapterSettings {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: TorusLoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n}\n\nexport class SolanaWalletAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_SOLANA;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: TorusLoginParams = {};\n\n  private solanaProvider: TorusInjectedProvider | null = null;\n\n  constructor(params: SolanaWalletOptions = {}) {\n    super(params);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.solanaProvider) {\n      return this.solanaProvider?.provider || null;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n    const network: NetworkInterface = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init({ showTorusButton: false, ...this.initParams, network });\n\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig as CustomChainConfig,\n      },\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_SOLANA });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      try {\n        const torusInpageProvider = this.torusInstance.provider as unknown as ITorusWalletProvider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error: unknown) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n          const network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_SOLANA, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if (error instanceof Web3AuthError) throw error;\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(chainConfig, init);\n    // await this.solanaProvider?.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    const chainConfig = this.getChainConfig(params.chainId) as CustomChainConfig;\n    await this.torusInstance?.setProvider({\n      rpcTarget: chainConfig.rpcTarget,\n      chainId: chainConfig.chainId,\n      displayName: chainConfig.displayName,\n      blockExplorerUrl: chainConfig.blockExplorer,\n      ticker: chainConfig.ticker,\n      tickerName: chainConfig.tickerName,\n      logo: \"https://images.web3auth.io/login-torus-solana.svg\",\n    });\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}